================================================================================
                    AI ORCHESTRATOR COMPLETE CHEAT SHEET
================================================================================

STARTING THE AI ASSISTANT
================================================================================

From your terminal at (venv) root@Lambda:~/orchestra-main#

Option 1: Direct AI Code Assistant (RECOMMENDED - Simple & Direct)
-----------------------------------------------------------------
python3 scripts/ai_code_assistant.py

Option 2: Full Orchestrator with Auto-Detection
-----------------------------------------------
python3 ai_components/orchestrator_cli_enhanced.py

Option 3: Use Existing Quick Start
----------------------------------
./quick_start_orchestrator.sh


USING THE AI CODE ASSISTANT
================================================================================

Once started, you'll see:
[claude]> 

This is your prompt. You can type directly here.


SWITCHING BETWEEN AI MODELS
================================================================================

/model claude      - Use Claude 3 Opus (default, best for complex coding)
/model openai      - Use GPT-4 (good for general tasks)

Note: OpenRouter and Roo are integrated through the orchestrator system,
      not directly accessible via model switching.


ESSENTIAL COMMANDS
================================================================================

/help              - Show all available commands
/review <file>     - Review code in a specific file
/generate          - Generate new code from description
/explain           - Explain what code does
/exit              - Exit the assistant


SAMPLE PROMPTS FOR DIFFERENT TASKS
================================================================================

PLANNING PROMPTS
----------------
"Create a project structure for a FastAPI microservice with PostgreSQL"
"Design a scalable architecture for real-time data processing"
"Plan a migration strategy from monolith to microservices"
"Outline best practices for implementing authentication in our app"

REVIEWING PROMPTS
-----------------
/review ai_components/orchestration/ai_orchestrator.py
"Review this function for performance improvements: [paste code]"
"Check this SQL query for potential issues: [paste query]"
"Analyze this class for SOLID principles compliance"

CODING PROMPTS
--------------
"Write a Python function to validate email addresses with regex"
"Create a PostgreSQL schema for user management with roles"
"Implement a retry decorator with exponential backoff"
"Generate unit tests for the UserService class"

DEBUGGING PROMPTS
-----------------
"Why am I getting 'KeyError: user_id' in this code: [paste code]"
"Debug this async function that's hanging: [paste code]"
"Fix this SQL query returning duplicate results: [paste query]"
"Explain this error and how to fix it: [paste error message]"

OPTIMIZATION PROMPTS
--------------------
"Optimize this database query for better performance"
"Refactor this code to reduce complexity"
"Improve the memory usage of this data processing function"
"Make this API endpoint more efficient"


DETAILED USAGE EXAMPLES
================================================================================

1. REVIEWING A FILE
-------------------
[claude]> /review scripts/setup_secrets_manager.py

Thinking...

[Claude will analyze the file and provide:]
- Code quality assessment
- Potential bugs or issues  
- Performance improvements
- Best practices recommendations


2. GENERATING CODE
------------------
[claude]> /generate
Describe what you want to generate: API endpoint for user registration with email verification

Thinking...

[Claude will provide complete, working code with comments]


3. EXPLAINING CODE
------------------
[claude]> /explain
Paste code to explain (end with '###' on new line):
async def process_batch(items, batch_size=100):
    for i in range(0, len(items), batch_size):
        batch = items[i:i + batch_size]
        await asyncio.gather(*[process_item(item) for item in batch])
###

Thinking...

[Claude will explain the purpose, logic, and potential improvements]


4. DIRECT QUESTIONS
-------------------
[claude]> How do I implement connection pooling with PostgreSQL in Python?

Thinking...

[Claude will provide detailed explanation with code examples]


RUNNING IN BACKGROUND WITH TMUX
================================================================================

# Start new tmux session
tmux new -s ai-assistant

# Run the AI assistant
python3 scripts/ai_code_assistant.py

# Detach from session
Press: Ctrl+B, then D

# Reattach to session later
tmux attach -t ai-assistant

# List all sessions
tmux ls

# Kill session when done
tmux kill-session -t ai-assistant


CHECKING ORCHESTRATOR STATUS
================================================================================

# Check if services are running
./scripts/monitor_orchestrator.sh

# Watch continuous status
./scripts/monitor_orchestrator.sh --watch

# Check logs
tail -f logs/orchestrator.log

# Check specific service
ps aux | grep orchestrator


TIPS FOR BEST RESULTS
================================================================================

1. Be specific in your prompts
2. Provide context about your project
3. Include error messages completely
4. For code review, use actual file paths
5. For debugging, include the full stack trace
6. Use Claude for complex coding tasks
7. Use GPT-4 for general explanations


QUICK REFERENCE
================================================================================

Start AI Assistant:     python3 scripts/ai_code_assistant.py
Switch to GPT-4:       /model openai
Switch to Claude:      /model claude
Review code:           /review <filepath>
Generate code:         /generate
Explain code:          /explain
Exit:                  /exit


TROUBLESHOOTING
================================================================================

If "command not found":
- Make sure you're in: /root/orchestra-main
- Check if file exists: ls scripts/ai_code_assistant.py

If "module not found":
- You're already in venv, dependencies should be installed
- Try: pip install aiohttp

If API errors:
- Check your .env file has API keys
- Verify with: grep ANTHROPIC .env

================================================================================