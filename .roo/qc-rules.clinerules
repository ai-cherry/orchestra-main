# Performance-First Quality Control Configuration
# Optimized for speed, quality, and stability - human review via summaries, not interruption

import json
from typing import Dict, Any, Optional
from dataclasses import dataclass

@dataclass
class ModelPerformanceConfig:
    primary: str
    fallback: Optional[str] = None
    max_tokens: int = 8192
    temperature: float = 0.1
    priority: str = "performance"

def calculate_performance_profile(task: Dict[str, Any]) -> str:
    """Determine performance requirements - all optimized for speed and quality"""
    
    # High-performance modes get premium models
    if task.get('mode') in ['üé® UI Designer', 'üèó Architect', 'ü™É Orchestrator']:
        return "premium"
    
    # Development modes get balanced high-performance
    elif task.get('mode') in ['üíª Developer - Python 3.10+', '‚öôÔ∏è Implementation', '‚úÖ Quality Control']:
        return "balanced_high"
    
    # Research and analysis modes get specialized models
    elif task.get('mode') in ['üîç Researcher', 'üìä Analytics', 'üß† Strategist']:
        return "specialized"
    
    # Debug mode gets fast, focused models
    elif task.get('mode') == 'ü™≤ Debugger':
        return "fast_focused"
    
    return "balanced_high"

def get_optimal_model_config(task: Dict[str, Any]) -> ModelPerformanceConfig:
    """Select optimal model configuration for maximum performance"""
    
    performance_profile = calculate_performance_profile(task)
    mode = task.get('mode', '')
    
    # Premium performance configurations
    if performance_profile == "premium":
        if mode == 'üé® UI Designer':
            return ModelPerformanceConfig(
                primary="gpt41-ui-premium",
                fallback="claude-opus4", 
                temperature=0.3,
                priority="visual_reasoning"
            )
        elif mode == 'üèó Architect':
            return ModelPerformanceConfig(
                primary="claude-opus4",
                fallback="claude-sonnet4",
                temperature=0.1,
                priority="system_design"
            )
        elif mode == 'ü™É Orchestrator':
            return ModelPerformanceConfig(
                primary="claude-opus4-openrouter",
                fallback="claude-opus4",
                temperature=0.2,
                priority="coordination"
            )
    
    # Balanced high-performance configurations
    elif performance_profile == "balanced_high":
        if mode == 'üíª Developer - Python 3.10+':
            return ModelPerformanceConfig(
                primary="claude-sonnet4",
                fallback="gpt41-mini",
                temperature=0.1,
                priority="code_generation"
            )
        elif mode == '‚úÖ Quality Control':
            return ModelPerformanceConfig(
                primary="claude-opus4",
                fallback="claude-sonnet4",
                temperature=0.1,
                priority="quality_analysis"
            )
    
    # Specialized configurations
    elif performance_profile == "specialized":
        return ModelPerformanceConfig(
            primary="gemini-25-pro",
            fallback="claude-opus4",
            temperature=0.2,
            priority="multimodal_analysis"
        )
    
    # Fast focused configurations
    elif performance_profile == "fast_focused":
        return ModelPerformanceConfig(
            primary="gpt41-mini",
            fallback="claude-sonnet4",
            temperature=0.1,
            priority="debugging"
        )
    
    # Default high-performance
    return ModelPerformanceConfig(
        primary="claude-sonnet4",
        fallback="gpt41-mini",
        temperature=0.2,
        priority="general_performance"
    )

# Performance-First Quality Gates - No Approval Requirements
PERFORMANCE_QUALITY_GATES = {
    'ui_designer': {
        'auto_checks': [
            'performance_budget_check',
            'accessibility_scan',
            'design_token_validation',
            'component_optimization'
        ],
        'performance_targets': {
            'bundle_size_limit': '250KB',
            'lighthouse_performance': 90,
            'accessibility_score': 95,
            'core_web_vitals': 'good'
        },
        'approval_required': False,
        'auto_optimize': True
    },
    'python_developer': {
        'auto_checks': [
            'performance_profiling',
            'memory_optimization',
            'async_pattern_validation',
            'type_safety_check'
        ],
        'performance_targets': {
            'execution_time': 'baseline_x2_max',
            'memory_usage': 'baseline_x1.5_max',
            'type_coverage': 95,
            'async_compatibility': True
        },
        'approval_required': False,
        'auto_optimize': True
    },
    'architect': {
        'auto_checks': [
            'scalability_assessment',
            'performance_architecture_review',
            'stability_analysis',
            'integration_validation'
        ],
        'performance_targets': {
            'scalability_score': 90,
            'stability_rating': 'high',
            'integration_complexity': 'manageable'
        },
        'approval_required': False,
        'continuous_improvement': True
    },
    'quality_control': {
        'auto_checks': [
            'performance_regression_test',
            'stability_validation',
            'integration_health_check',
            'optimization_opportunities'
        ],
        'performance_targets': {
            'regression_tolerance': 5,
            'stability_uptime': 99.9,
            'integration_success_rate': 95
        },
        'approval_required': False,
        'auto_remediate': True
    }
}

# MCP Integration Requirements - Always Used and Updated
MCP_INTEGRATION = {
    'enforcement': {
        'always_use_mcp': True,
        'auto_update_servers': True,
        'integrate_in_all_modes': True,
        'performance_monitor': True
    },
    'server_priorities': [
        'orchestra_unified_mcp',
        'infrastructure_mcp', 
        'weaviate_mcp',
        'analytics_mcp'
    ],
    'auto_coordination': {
        'context_sharing': True,
        'state_synchronization': True,
        'workflow_optimization': True,
        'performance_tracking': True
    }
}

# Documentation Standards - AI Coder Focused Only
DOCUMENTATION_STANDARDS = {
    'ai_coder_focus': {
        'meaningful_only': True,
        'block_trivial_docs': True,
        'update_ongoing': True,
        'integration_focused': True
    },
    'blocked_patterns': [
        'README.md',
        'CHANGELOG.md', 
        'TODO.md',
        'NOTES.md',
        'temp_*.md',
        'quick_*.md'
    ],
    'required_patterns': [
        'architecture_decisions.md',
        'performance_benchmarks.md',
        'mcp_integration_guide.md',
        'ai_coding_patterns.md'
    ]
}

# Anti-Pattern Prevention
ANTI_PATTERNS = {
    'prevent_one_off_scripts': {
        'enabled': True,
        'blocked_patterns': [
            'temp_*.py',
            'quick_*.py', 
            'test_script_*.py',
            'one_time_*.py',
            'fix_*.py'
        ],
        'require_integration': True,
        'suggest_proper_location': True
    },
    'performance_degradation': {
        'monitor_continuously': True,
        'auto_optimize': True,
        'prevent_regression': True,
        'alert_on_slowdown': True
    }
}

# Performance Optimization Rules
PERFORMANCE_OPTIMIZATION = {
    'priority_order': [
        'performance',
        'quality', 
        'stability',
        'maintainability',
        'security',
        'cost'
    ],
    'auto_optimization': {
        'enabled': True,
        'continuous_monitoring': True,
        'proactive_improvements': True,
        'performance_budgets': True
    },
    'model_efficiency': {
        'context_optimization': True,
        'smart_caching': True,
        'parallel_processing': True,
        'load_balancing': True
    }
}

# Export configuration for roo consumption
def get_performance_config():
    return {
        'model_config': get_optimal_model_config,
        'quality_gates': PERFORMANCE_QUALITY_GATES,
        'mcp_integration': MCP_INTEGRATION,
        'documentation_standards': DOCUMENTATION_STANDARDS,
        'anti_patterns': ANTI_PATTERNS,
        'performance_optimization': PERFORMANCE_OPTIMIZATION
    } 