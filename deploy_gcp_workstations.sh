#!/bin/bash
# Deploy GCP Workstations for AI Orchestra
# This script automates the deployment of GCP Workstations infrastructure

set -e

# Default values
PROJECT_ID=""
ENVIRONMENT="dev"
REGION="us-central1"
MACHINE_TYPE="e2-standard-4"
BOOT_DISK_SIZE="50"
DATA_DISK_SIZE="100"
CACHE_DISK_SIZE="20"
NETWORK="default"
SUBNETWORK="default"
WORKSTATION_USERS=""
DRY_RUN=false
FORCE=false

# Display help
function show_help {
  echo "Usage: $0 [options]"
  echo ""
  echo "This script deploys GCP Workstations infrastructure for AI Orchestra"
  echo ""
  echo "Options:"
  echo "  -p, --project-id PROJECT_ID    GCP project ID (required)"
  echo "  -e, --environment ENV           Environment (dev, staging, prod) (default: dev)"
  echo "  -r, --region REGION             GCP region for deployment (default: us-central1)"
  echo "  -m, --machine-type TYPE         Machine type for workstations (default: e2-standard-4)"
  echo "  -b, --boot-disk SIZE            Boot disk size in GB (default: 50)"
  echo "  -d, --data-disk SIZE            Data disk size in GB (default: 100)"
  echo "  -c, --cache-disk SIZE           Cache disk size in GB (default: 20)"
  echo "  -n, --network NETWORK           VPC network name (default: default)"
  echo "  -s, --subnetwork SUBNETWORK     VPC subnetwork name (default: default)"
  echo "  -u, --users USER1,USER2         Comma-separated list of user emails"
  echo "  --dry-run                       Print Terraform commands without executing"
  echo "  -f, --force                     Skip confirmation prompt"
  echo "  -h, --help                      Display this help message"
  exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -p|--project-id)
      PROJECT_ID="$2"
      shift
      shift
      ;;
    -e|--environment)
      ENVIRONMENT="$2"
      shift
      shift
      ;;
    -r|--region)
      REGION="$2"
      shift
      shift
      ;;
    -m|--machine-type)
      MACHINE_TYPE="$2"
      shift
      shift
      ;;
    -b|--boot-disk)
      BOOT_DISK_SIZE="$2"
      shift
      shift
      ;;
    -d|--data-disk)
      DATA_DISK_SIZE="$2"
      shift
      shift
      ;;
    -c|--cache-disk)
      CACHE_DISK_SIZE="$2"
      shift
      shift
      ;;
    -n|--network)
      NETWORK="$2"
      shift
      shift
      ;;
    -s|--subnetwork)
      SUBNETWORK="$2"
      shift
      shift
      ;;
    -u|--users)
      WORKSTATION_USERS="$2"
      shift
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    -f|--force)
      FORCE=true
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      ;;
  esac
done

# Validate required parameters
if [ -z "$PROJECT_ID" ]; then
  echo "ERROR: Project ID is required"
  show_help
fi

# Format user list for Terraform
FORMATTED_USERS=""
if [ -n "$WORKSTATION_USERS" ]; then
  IFS=',' read -ra USERS <<< "$WORKSTATION_USERS"
  for user in "${USERS[@]}"; do
    if [[ ! "$user" == user:* ]]; then
      user="user:$user"
    fi
    FORMATTED_USERS="$FORMATTED_USERS \"$user\","
  done
  FORMATTED_USERS=${FORMATTED_USERS%,}
fi

# Create Terraform variables file
TF_VARS_FILE="terraform/environments/${ENVIRONMENT}/workstation.auto.tfvars"
TF_DIR="terraform/environments/${ENVIRONMENT}"

# Create directory if it doesn't exist
mkdir -p "$TF_DIR"

# Generate Terraform variables file
cat > "$TF_VARS_FILE" << EOF
project_id = "$PROJECT_ID"
environment = "$ENVIRONMENT"
location = "$REGION"
machine_type = "$MACHINE_TYPE"
boot_disk_size_gb = $BOOT_DISK_SIZE
data_disk_size_gb = $DATA_DISK_SIZE
cache_disk_size_gb = $CACHE_DISK_SIZE
network = "$NETWORK"
subnetwork = "$SUBNETWORK"
workstation_users = [$FORMATTED_USERS]
EOF

echo "Generated Terraform variables in $TF_VARS_FILE"

# Create main Terraform file if it doesn't exist
TF_MAIN_FILE="$TF_DIR/workstations.tf"
if [ ! -f "$TF_MAIN_FILE" ]; then
  cat > "$TF_MAIN_FILE" << EOF
# Terraform configuration for GCP Workstations
# Generated by deploy_gcp_workstations.sh

module "workstations" {
  source = "../../modules/gcp_workstations"

  # Pass through all variables
  project_id           = var.project_id
  environment          = var.environment
  location             = var.location
  machine_type         = var.machine_type
  boot_disk_size_gb    = var.boot_disk_size_gb
  data_disk_size_gb    = var.data_disk_size_gb
  cache_disk_size_gb   = var.cache_disk_size_gb
  network              = var.network
  subnetwork           = var.subnetwork
  workstation_users    = var.workstation_users
  workstation_image_version = "latest"
  idle_timeout         = "3600s"
  running_timeout      = "86400s"
}

output "workstation_cluster_endpoint" {
  description = "Endpoint URL for the workstation cluster"
  value       = module.workstations.workstation_cluster_endpoint
}
EOF

  echo "Created Terraform configuration in $TF_MAIN_FILE"
fi

# Check for variables.tf and create if needed
TF_VARS_DEF_FILE="$TF_DIR/variables.tf"
if [ ! -f "$TF_VARS_DEF_FILE" ]; then
  cat > "$TF_VARS_DEF_FILE" << EOF
# Variables for GCP Workstations
# Generated by deploy_gcp_workstations.sh

variable "project_id" {
  description = "The GCP project ID"
  type        = string
}

variable "environment" {
  description = "Environment (dev, staging, prod)"
  type        = string
  default     = "dev"
}

variable "location" {
  description = "The GCP region where resources will be created"
  type        = string
  default     = "us-central1"
}

variable "machine_type" {
  description = "Machine type for workstation VMs"
  type        = string
  default     = "e2-standard-4"
}

variable "boot_disk_size_gb" {
  description = "Size of the boot disk in GB"
  type        = number
  default     = 50
}

variable "data_disk_size_gb" {
  description = "Size of the data disk in GB"
  type        = number
  default     = 100
}

variable "cache_disk_size_gb" {
  description = "Size of the cache disk in GB"
  type        = number
  default     = 20
}

variable "network" {
  description = "The VPC network to use for workstations"
  type        = string
  default     = "default"
}

variable "subnetwork" {
  description = "The VPC subnetwork to use for workstations"
  type        = string
  default     = "default"
}

variable "workstation_users" {
  description = "List of users who can access workstations (emails in format 'user:user@example.com')"
  type        = list(string)
  default     = []
}
EOF

  echo "Created variables definition in $TF_VARS_DEF_FILE"
fi

# Show confirmation
echo "========================================"
echo "GCP Workstations Deployment Configuration"
echo "========================================"
echo "Project ID:      $PROJECT_ID"
echo "Environment:     $ENVIRONMENT"
echo "Region:          $REGION"
echo "Machine Type:    $MACHINE_TYPE"
echo "Boot Disk:       ${BOOT_DISK_SIZE}GB"
echo "Data Disk:       ${DATA_DISK_SIZE}GB"
echo "Cache Disk:      ${CACHE_DISK_SIZE}GB"
echo "Network:         $NETWORK"
echo "Subnetwork:      $SUBNETWORK"
echo "Users:           ${WORKSTATION_USERS:-None specified}"
echo "========================================"

# Confirm deployment
if [ "$FORCE" != "true" ]; then
  read -p "Proceed with deployment? (y/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deployment cancelled"
    exit 1
  fi
fi

# Navigate to Terraform directory
cd "$TF_DIR"

# Initialize Terraform
echo "Initializing Terraform..."
if [ "$DRY_RUN" = "true" ]; then
  echo "terraform init"
else
  terraform init
fi

# Create execution plan
echo "Creating Terraform execution plan..."
if [ "$DRY_RUN" = "true" ]; then
  echo "terraform plan -out=workstation.tfplan"
else
  terraform plan -out=workstation.tfplan
fi

# Apply Terraform configuration
if [ "$DRY_RUN" = "true" ]; then
  echo "terraform apply workstation.tfplan"
else
  echo "Applying Terraform configuration..."
  terraform apply workstation.tfplan
  
  # Display workstation access information
  echo "========================================"
  echo "GCP Workstations Deployment Complete"
  echo "========================================"
  echo "Access your workstation through the Google Cloud Console:"
  echo "https://console.cloud.google.com/workstations?project=$PROJECT_ID"
  echo
  echo "Or via the endpoint URL:"
  terraform output workstation_cluster_endpoint
  echo "========================================"
fi

echo "Deployment process completed"