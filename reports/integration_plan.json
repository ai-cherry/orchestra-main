{
  "created_at": "2025-06-03T16:01:24.079535",
  "phases": [
    {
      "name": "Backend Service Integration",
      "duration": "1-2 weeks",
      "tasks": [
        {
          "id": "1.1",
          "task": "Extend existing API gateway",
          "description": "Add new routes to existing FastAPI application",
          "files_to_modify": [
            "services/api_gateway.py",
            "services/routes/__init__.py"
          ],
          "code_changes": "\n# In services/api_gateway.py, add:\nfrom src.search_engine.search_router import router as search_router\nfrom src.file_ingestion.ingestion_router import router as ingestion_router\nfrom src.multimedia_generation.multimedia_router import router as multimedia_router\n\n# Add routers\napp.include_router(search_router, prefix=\"/api/v2/search\", tags=[\"search\"])\napp.include_router(ingestion_router, prefix=\"/api/v2/ingest\", tags=[\"ingestion\"])\napp.include_router(multimedia_router, prefix=\"/api/v2/multimedia\", tags=[\"multimedia\"])\n"
        },
        {
          "id": "1.2",
          "task": "Integrate with UnifiedDatabase",
          "description": "Ensure all new modules use existing database patterns",
          "validation": "\n# All database queries must use:\nfrom shared.database import UnifiedDatabase\n\n# Example pattern:\nasync def store_search_result(query: str, results: List[Dict]):\n    db = UnifiedDatabase()\n    query_sql = '''\n    EXPLAIN ANALYZE\n    INSERT INTO search_history (query, results, timestamp, persona)\n    VALUES (%s, %s, %s, %s)\n    RETURNING id\n    '''\n    return await db.fetch_one(query_sql, (query, json.dumps(results), datetime.utcnow(), persona))\n"
        },
        {
          "id": "1.3",
          "task": "Extend Weaviate schemas",
          "description": "Add new collections for advanced search and multimedia",
          "weaviate_schemas": {
            "SearchIndex": {
              "class": "SearchIndex",
              "properties": [
                {
                  "name": "content",
                  "dataType": [
                    "text"
                  ]
                },
                {
                  "name": "mode",
                  "dataType": [
                    "string"
                  ]
                },
                {
                  "name": "persona",
                  "dataType": [
                    "string"
                  ]
                },
                {
                  "name": "timestamp",
                  "dataType": [
                    "date"
                  ]
                },
                {
                  "name": "metadata",
                  "dataType": [
                    "object"
                  ]
                }
              ]
            },
            "MultimediaAsset": {
              "class": "MultimediaAsset",
              "properties": [
                {
                  "name": "prompt",
                  "dataType": [
                    "text"
                  ]
                },
                {
                  "name": "assetType",
                  "dataType": [
                    "string"
                  ]
                },
                {
                  "name": "url",
                  "dataType": [
                    "string"
                  ]
                },
                {
                  "name": "persona",
                  "dataType": [
                    "string"
                  ]
                },
                {
                  "name": "generatedAt",
                  "dataType": [
                    "date"
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "1.4",
          "task": "Integrate with existing monitoring",
          "description": "Add new metrics to existing monitoring infrastructure",
          "metrics": [
            "search_mode_usage",
            "ingestion_file_types",
            "multimedia_generation_count",
            "operator_task_queue_depth"
          ]
        }
      ]
    },
    {
      "name": "UI Integration",
      "duration": "1-2 weeks",
      "tasks": [
        {
          "id": "3.1",
          "task": "Create React component library",
          "description": "Build reusable components matching design spec",
          "components": [
            "PersonaSelector",
            "SearchModeSelector",
            "FileUploadPanel",
            "MultimediaPanel",
            "OperatorTaskView",
            "RealTimeAnalytics"
          ]
        },
        {
          "id": "3.2",
          "task": "Integrate with existing authentication",
          "description": "Use existing auth context and user management",
          "code": "\n// In App.tsx\nimport { useAuth } from './contexts/AuthContext';\nimport { PersonaProvider } from './contexts/PersonaContext';\n\nfunction App() {\n    const { user, isAuthenticated } = useAuth();\n    \n    return (\n        <PersonaProvider>\n            <Router>\n                {isAuthenticated ? <AuthenticatedApp /> : <LoginPage />}\n            </Router>\n        </PersonaProvider>\n    );\n}\n"
        },
        {
          "id": "3.3",
          "task": "WebSocket integration",
          "description": "Connect to existing WebSocket infrastructure",
          "endpoints": [
            "/ws/search-progress",
            "/ws/ingestion-status",
            "/ws/operator-updates",
            "/ws/analytics"
          ]
        },
        {
          "id": "3.4",
          "task": "Progressive Web App setup",
          "description": "Enable offline capabilities and mobile optimization",
          "features": [
            "Service worker for offline search",
            "IndexedDB for local storage",
            "Push notifications for task completion",
            "Responsive design for all screen sizes"
          ]
        }
      ]
    }
  ],
  "database_migrations": [
    {
      "version": "2.0.1",
      "description": "Add search history and modes",
      "up": "\n-- Search history with modes\nCREATE TABLE IF NOT EXISTS search_history (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    query TEXT NOT NULL,\n    mode VARCHAR(50) NOT NULL,\n    persona VARCHAR(50) NOT NULL,\n    results JSONB,\n    response_time_ms INTEGER,\n    user_id UUID REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_search_mode (mode),\n    INDEX idx_search_persona (persona),\n    INDEX idx_search_user (user_id)\n);\n\n-- File ingestion tracking\nCREATE TABLE IF NOT EXISTS file_ingestions (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    file_name VARCHAR(255) NOT NULL,\n    file_hash VARCHAR(64) UNIQUE NOT NULL,\n    file_size BIGINT NOT NULL,\n    mime_type VARCHAR(100),\n    status VARCHAR(50) DEFAULT 'pending',\n    progress FLOAT DEFAULT 0,\n    extracted_text TEXT,\n    metadata JSONB,\n    error TEXT,\n    user_id UUID REFERENCES users(id),\n    domain VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP,\n    INDEX idx_ingestion_status (status),\n    INDEX idx_ingestion_hash (file_hash)\n);\n\n-- Multimedia generations\nCREATE TABLE IF NOT EXISTS multimedia_generations (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    type VARCHAR(50) NOT NULL, -- 'image' or 'video'\n    prompt TEXT NOT NULL,\n    model VARCHAR(100),\n    status VARCHAR(50) DEFAULT 'pending',\n    result_url TEXT,\n    metadata JSONB,\n    cost_credits INTEGER DEFAULT 0,\n    user_id UUID REFERENCES users(id),\n    persona VARCHAR(50),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    completed_at TIMESTAMP,\n    INDEX idx_multimedia_type (type),\n    INDEX idx_multimedia_user (user_id)\n);\n\n-- Operator tasks\nCREATE TABLE IF NOT EXISTS operator_tasks (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    workflow_type VARCHAR(100) NOT NULL,\n    input_data JSONB NOT NULL,\n    status VARCHAR(50) DEFAULT 'queued',\n    assigned_agents JSONB,\n    progress FLOAT DEFAULT 0,\n    result JSONB,\n    error TEXT,\n    priority INTEGER DEFAULT 5,\n    user_id UUID REFERENCES users(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    started_at TIMESTAMP,\n    completed_at TIMESTAMP,\n    INDEX idx_operator_status (status),\n    INDEX idx_operator_priority (priority)\n);\n",
      "down": "\nDROP TABLE IF EXISTS operator_tasks;\nDROP TABLE IF EXISTS multimedia_generations;\nDROP TABLE IF EXISTS file_ingestions;\nDROP TABLE IF EXISTS search_history;\n"
    }
  ],
  "api_mappings": {
    "/api/search": "/api/v2/search?mode=normal",
    "/api/upload": "/api/v2/ingest-file",
    "/api/generate": "/api/v2/multimedia/generate",
    "/api/chat": "/api/v2/operator/chat"
  },
  "ui_components": [],
  "deployment_strategy": {
    "name": "Blue-Green Deployment",
    "duration": "1 week",
    "strategy": {
      "type": "blue_green",
      "steps": [
        {
          "step": 1,
          "action": "Deploy to staging",
          "command": "cd infrastructure && pulumi up -s staging",
          "validation": [
            "Run integration tests",
            "Performance benchmarks",
            "Security scan"
          ]
        },
        {
          "step": 2,
          "action": "Deploy green environment",
          "command": "cd infrastructure && pulumi up -s production-green",
          "checks": [
            "Health checks passing",
            "Database migrations complete",
            "Weaviate indexes built"
          ]
        },
        {
          "step": 3,
          "action": "Gradual traffic shift",
          "config": {
            "initial_percentage": 10,
            "increment": 10,
            "interval_minutes": 30,
            "rollback_on_error": true
          }
        },
        {
          "step": 4,
          "action": "Complete cutover",
          "command": "cd infrastructure && pulumi up -s production",
          "post_deployment": [
            "Monitor error rates",
            "Check performance metrics",
            "User feedback collection"
          ]
        }
      ]
    }
  }
}