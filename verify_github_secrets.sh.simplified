#!/bin/bash
# verify_github_secrets.sh.simplified - Streamlined script to verify GitHub secrets
# Simplified version optimized for single-developer workflows

set -e

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Load the centralized GitHub authentication utility
if [ -f "github_auth.sh.simplified" ]; then
    source github_auth.sh.simplified
elif [ -f "github_auth.sh" ]; then
    source github_auth.sh
else
    echo -e "${RED}Error: No GitHub authentication script found. Please ensure github_auth.sh or github_auth.sh.simplified exists.${NC}"
    exit 1
fi

# Configuration - using repository-level secrets instead of organization-level for single developer
GITHUB_REPO="${GITHUB_REPO:-$(git config --get remote.origin.url | sed -n 's/.*github.com[:/]\([^/]*\/[^.]*\).*/\1/p')}"

if [ -z "$GITHUB_REPO" ]; then
    echo -e "${YELLOW}Unable to automatically determine repository. Please enter your GitHub repository (format: owner/repo):${NC}"
    read GITHUB_REPO
fi

# Print header
echo -e "${BLUE}=================================================================${NC}"
echo -e "${BLUE}${BOLD}   GITHUB REPOSITORY SECRETS VERIFICATION   ${NC}"
echo -e "${BLUE}=================================================================${NC}"
echo -e "${BLUE}Repository: ${GITHUB_REPO}${NC}"

# Get GitHub token
GITHUB_TOKEN=$(get_github_token)

# Authenticate with GitHub
authenticate_github "$GITHUB_TOKEN"

# Function to check if a secret exists
check_secret() {
    local secret_name=$1
    local required=$2
    
    echo -e "${YELLOW}Checking for secret: ${secret_name}...${NC}"
    
    # Use GitHub CLI to check if the secret exists
    if gh secret list -R "$GITHUB_REPO" | grep -q "$secret_name"; then
        echo -e "${GREEN}✓ Secret ${secret_name} found${NC}"
        return 0
    else
        if [ "$required" = "true" ]; then
            echo -e "${RED}❌ Required secret ${secret_name} not found${NC}"
            return 1
        else
            echo -e "${YELLOW}⚠️ Optional secret ${secret_name} not found${NC}"
            return 0
        fi
    fi
}

# Function to create a secret if it doesn't exist
create_secret() {
    local secret_name=$1
    local description=$2
    
    if ! check_secret "$secret_name" "false"; then
        echo -e "${YELLOW}Would you like to create the secret ${secret_name}? (y/n)${NC}"
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Please enter the value for ${secret_name} (${description}):${NC}"
            read -s secret_value
            echo
            
            echo -e "${YELLOW}Creating secret ${secret_name}...${NC}"
            echo "$secret_value" | gh secret set "$secret_name" -R "$GITHUB_REPO"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}✓ Secret ${secret_name} created successfully${NC}"
            else
                echo -e "${RED}❌ Failed to create secret ${secret_name}${NC}"
            fi
        fi
    fi
}

# Check for essential secrets - simplified list for single developer
echo -e "\n${BLUE}${BOLD}Checking essential GitHub secrets...${NC}"
essential_secrets=(
    "GITHUB_TOKEN"
    "GCP_PROJECT_ID"
)

missing_essential=0
for secret in "${essential_secrets[@]}"; do
    if ! check_secret "$secret" "true"; then
        missing_essential=$((missing_essential + 1))
    fi
done

# Offer to create missing essential secrets
if [ $missing_essential -gt 0 ]; then
    echo -e "\n${YELLOW}Would you like to set up the missing essential secrets now? (y/n)${NC}"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Create GitHub token if missing
        create_secret "GITHUB_TOKEN" "Your GitHub Personal Access Token"
        
        # Create GCP Project ID if missing
        create_secret "GCP_PROJECT_ID" "Your Google Cloud Project ID"
    fi
fi

# Check for recommended secrets
echo -e "\n${BLUE}${BOLD}Checking recommended GitHub secrets...${NC}"
recommended_secrets=(
    "GCP_REGION"
    "GCP_SERVICE_ACCOUNT" 
)

missing_recommended=0
for secret in "${recommended_secrets[@]}"; do
    if ! check_secret "$secret" "false"; then
        missing_recommended=$((missing_recommended + 1))
    fi
done

# Offer to create missing recommended secrets
if [ $missing_recommended -gt 0 ]; then
    echo -e "\n${YELLOW}Would you like to set up the missing recommended secrets now? (y/n)${NC}"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Create GCP Region if missing
        create_secret "GCP_REGION" "Your preferred Google Cloud region (e.g., us-central1)"
        
        # Create GCP Service Account if missing
        create_secret "GCP_SERVICE_ACCOUNT" "Your GCP Service Account email"
    fi
fi

# Print summary
echo -e "\n${BLUE}${BOLD}Summary:${NC}"
echo -e "Essential secrets: ${GREEN}$((${#essential_secrets[@]} - $missing_essential))${NC}/${#essential_secrets[@]} found"
echo -e "Recommended secrets: ${GREEN}$((${#recommended_secrets[@]} - $missing_recommended))${NC}/${#recommended_secrets[@]} found"

if [ $missing_essential -gt 0 ]; then
    echo -e "\n${YELLOW}${BOLD}Warning: Some essential secrets are missing.${NC}"
    echo -e "You may need to set up the missing secrets before certain operations will work."
    exit 1
else
    echo -e "\n${GREEN}${BOLD}All essential secrets are available!${NC}"
    echo -e "You're ready for development and deployment."
fi
