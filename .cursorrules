# Cursor IDE Quick Reference - Project Symphony

## Tool Boundaries & Context Intelligence
- **Use Cursor for**: Quick edits, single-file operations, immediate code generation
- **Use Roo for**: Architecture, complex workflows, multi-step tasks, research
- **Hierarchical rules**: Auto-activated based on file context (.cursor/rules/)
- **MCP integration**: Pulumi, Sequential Thinking, GitHub, Filesystem servers active
- **Templates**: Use .cursor/templates.md for context-aware prompting

## Essential Coding Standards
- **Python 3.10 only** (NOT 3.11+)
- **Type hints mandatory** for all functions  
- **Google-style docstrings**
- **Black + isort formatting**
- **subprocess.run()** not os.system()

## Database Constraints
- **PostgreSQL + Weaviate only** (NO MongoDB, NO Redis for primary storage)
- **Use shared.database.UnifiedDatabase class**
- **EXPLAIN ANALYZE** required for new PostgreSQL queries

## Performance Requirements  
- **Benchmark complex functions**
- **O(n log n) or better algorithms**
- **Memory-aware data processing**

## File Creation Rules
- **NO standalone scripts** - integrate into existing modules
- **NO temporary files** without @transient_file decorator  
- **NO documentation files** unless replacing existing ones
- **Check .cursor/rules/temp-file-prevention.mdc** for details

## Quick Integration Paths
- Utilities → existing utils.py files
- Database ops → UnifiedDatabase helpers  
- Automation → scripts/automation_manager.py
- Reports → docs/ or reports/ directories

## Before Complex Tasks
Ask: "Should this use a Roo mode instead?" 
- Architecture decisions → `roo architect`
- Debugging analysis → `roo debug`  
- Research tasks → `roo research`
- Multi-file workflows → `roo orchestrator`

## Forbidden Patterns
- Creating files in root without purpose
- Python 3.11+ features (match/case, tomllib)
- MongoDB usage
- Docker/Poetry (use pip/venv)
- Complex patterns without clear benefit

**Remember**: Cursor = Fast coding. Roo = Complex thinking. Choose appropriately.
