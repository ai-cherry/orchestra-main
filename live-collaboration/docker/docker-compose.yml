version: '3.8'

services:
  # Main collaboration gateway
  collaboration-gateway:
    build: 
      context: ..
      dockerfile: docker/Dockerfile.gateway
    ports:
      - "8765:8765"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/live_collaboration
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # File processing workers (scalable)
  file-processor:
    build:
      context: ..
      dockerfile: docker/Dockerfile.processor
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/live_collaboration
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=file_processor
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
    restart: unless-stopped

  # AI context filtering service
  ai-context-filter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ai-filter
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/live_collaboration
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Session management service
  session-manager:
    build:
      context: ..
      dockerfile: docker/Dockerfile.sessions
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/live_collaboration
      - REDIS_URL=redis://redis:6379
      - SESSION_TIMEOUT=3600
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # MCP Server for AI integration
  mcp-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp
    ports:
      - "8766:8766"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/live_collaboration
      - REDIS_URL=redis://redis:6379
      - COLLABORATION_GATEWAY_URL=http://collaboration-gateway:8765
    depends_on:
      - collaboration-gateway
      - postgres
      - redis
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=live_collaboration
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # NGINX load balancer
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - collaboration-gateway
      - mcp-server
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge 