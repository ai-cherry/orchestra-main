"""
AI CONTEXT: REVIEWER MODE - Orchestra Project (GCP-Free Edition)
================================================================

READ THIS ENTIRE FILE BEFORE REVIEWING ANY CODE!

Project: Orchestra AI (Python 3.10, pip/venv, External Services)
Role: You are reviewing code changes for compliance, quality, and stability.

REVIEW CHECKLIST:

1. ENVIRONMENT & DEPENDENCY COMPLIANCE
   ‚úÖ Python 3.10 only (no 3.11+ features)
   ‚úÖ pip/venv workflow (NO Poetry, Pipenv)
   ‚úÖ External services properly configured (MongoDB, Redis, Weaviate)
   ‚úÖ No GCP dependencies or imports
   ‚úÖ No Docker SDK usage (docker-compose for services only)

2. CODE QUALITY & PATTERNS
   ‚úÖ Type hints for all functions
   ‚úÖ Google-style docstrings
   ‚úÖ Black formatting applied
   ‚úÖ subprocess.run() used (never os.system())
   ‚úÖ Minimal external dependencies
   ‚úÖ Scripts in scripts/ directory
   ‚úÖ Configuration via .env files

3. PERFORMANCE & STABILITY
   ‚úÖ Simple, direct implementations
   ‚úÖ No unnecessary complexity
   ‚úÖ Efficient use of external services
   ‚úÖ Proper error handling
   ‚úÖ Resource cleanup (close connections)

4. FORBIDDEN PATTERNS TO CHECK
   ‚ùå Poetry/Pipenv imports or config files
   ‚ùå Docker SDK usage
   ‚ùå GCP service imports
   ‚ùå Python 3.11+ syntax (match/case, tomllib)
   ‚ùå Complex metaclasses or multiple inheritance
   ‚ùå Hardcoded credentials (use env vars)

5. EXTERNAL SERVICE PATTERNS
   ‚úÖ MongoDB connections use MONGODB_URI env var
   ‚úÖ Redis connections use REDIS_HOST/PORT env vars
   ‚úÖ Proper connection error handling
   ‚úÖ Connection pooling where appropriate

REVIEW COMMANDS:
```bash
# Check Python version compatibility
python3.10 -m py_compile <file.py>

# Run anti-pattern checker
python scripts/ai_code_reviewer.py --check-file <file.py>

# Verify imports
grep -E "poetry|pipenv|google\.cloud|docker" <file.py>

# Check formatting
black --check <file.py>

# Run type checking
mypy <file.py>
```

APPROVAL CRITERIA:
- ‚úÖ No forbidden patterns detected
- ‚úÖ Follows pip/venv workflow
- ‚úÖ Works with Python 3.10
- ‚úÖ Uses external services correctly
- ‚úÖ Has proper error handling
- ‚úÖ Includes type hints
- ‚úÖ Simple and maintainable

RED FLAGS:
- üö© Any Poetry/Pipenv references
- üö© GCP imports or configuration
- üö© Docker SDK usage
- üö© Python 3.11+ features
- üö© Missing type hints
- üö© Hardcoded service URLs/credentials
- üö© Complex inheritance patterns

GOOD EXAMPLE:
```python
import os
from typing import Optional
import pymongo
from dotenv import load_dotenv

load_dotenv()

def get_db_connection() -> Optional[pymongo.database.Database]:
    \"\"\"Get MongoDB connection.

    Returns:
        Database instance or None if connection fails
    \"\"\"
    try:
        client = pymongo.MongoClient(os.getenv("MONGODB_URI"))
        return client.orchestra
    except Exception as e:
        print(f"Failed to connect: {e}")
        return None
```

REMEMBER:
- Simplicity and stability are key
- External services > self-hosted
- pip/venv is the only way

# This file is meant to be read by AI when reviewing code.
# Usage: Include this filename in your prompt when reviewing.
# Example: "Read ai_context_reviewer.py and review these changes"
"""
