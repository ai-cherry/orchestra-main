# TODO: Consider adding connection pooling configuration
#!/usr/bin/env python3
"""
"""
    """Check what's already configured in .env"""
    """Setup GitHub integration using existing org tokens"""
    print("\nüîó Setting up GitHub Integration...")
    
    # Check if GitHub tokens are available in environment (from org secrets)
    github_classic = os.environ.get('GH_CLASSIC_PAT_TOKEN')
    github_fine_grained = os.environ.get('GH_FINE_GRAINED_TOKEN')
    
    config = {}
    
    if github_classic:
        config['GITHUB_TOKEN'] = github_classic
        print(f"  ‚úÖ Found GitHub Classic PAT token: {github_classic[:8]}...")
    
    if github_fine_grained:
        config['GITHUB_FINE_GRAINED_TOKEN'] = github_fine_grained
        print(f"  ‚úÖ Found GitHub Fine-Grained token: {github_fine_grained[:8]}...")
    
    if not (github_classic or github_fine_grained):
        print("  ‚ö†Ô∏è GitHub tokens not found in environment")
        print("  üí° Make sure your GitHub Actions can access org-level secrets:")
        print("     - GH_CLASSIC_PAT_TOKEN")
        print("     - GH_FINE_GRAINED_TOKEN")
        
        # Manual fallback
        manual_token = input("  Enter GitHub token manually (or press Enter to skip): ").strip()
        if manual_token:
            config['GITHUB_TOKEN'] = manual_token
    
    return config

def setup_anthropic_claude() -> Dict[str, str]:
    """Setup Claude/Anthropic API"""
    print("\nüß† Setting up Claude/Anthropic...")
    
    anthropic_key = os.environ.get('ANTHROPIC_API_KEY')
    if anthropic_key:
        print(f"  ‚úÖ Found Anthropic API key: {anthropic_key[:8]}...")
        return {'ANTHROPIC_API_KEY': anthropic_key}
    
    print("  üîë Anthropic API key needed for Claude integration")
    print("  üìç Get your key at: https://console.anthropic.com/")
    
    key = input("  Enter Anthropic API key (or press Enter to skip): ").strip()
    if key:
        return {'ANTHROPIC_API_KEY': key}
    
    print("  ‚ö†Ô∏è Skipping Claude setup - you can add this later")
    return {}

def setup_openai() -> Dict[str, str]:
    """Setup OpenAI integration"""
    print("\nü§ñ Setting up OpenAI...")
    
    openai_key = os.environ.get('OPENAI_API_KEY')
    if openai_key:
        print(f"  ‚úÖ Found OpenAI API key: {openai_key[:8]}...")
        return {'OPENAI_API_KEY': openai_key}
    
    print("  üîë OpenAI API key for GPT models")
    print("  üìç Get your key at: https://platform.openai.com/api-keys")
    
    key = input("  Enter OpenAI API key (or press Enter to skip): ").strip()
    if key:
        return {'OPENAI_API_KEY': key}
    
    print("  ‚ö†Ô∏è Skipping OpenAI setup - you can add this later")
    return {}

def setup_openrouter() -> Dict[str, str]:
    """Setup OpenRouter integration"""
    print("\nüîÄ Setting up OpenRouter...")
    
    openrouter_key = os.environ.get('OPENROUTER_API_KEY')
    if openrouter_key:
        print(f"  ‚úÖ Found OpenRouter API key: {openrouter_key[:8]}...")
        return {'OPENROUTER_API_KEY': openrouter_key}
    
    print("  üîë OpenRouter provides access to multiple AI models at lower cost")
    print("  üìç Sign up at: https://openrouter.ai/")
    
    key = input("  Enter OpenRouter API key (or press Enter to skip): ").strip()
    if key:
        return {'OPENROUTER_API_KEY': key}
    
    print("  ‚ö†Ô∏è Skipping OpenRouter setup - you can add this later")
    return {}

def setup_simulation_services() -> Dict[str, str]:
    """Setup simulation-based services"""
    print("\nüéÆ Setting up simulation services...")
    
    config = {
        'CURSOR_API_KEY': 'simulation_mode',
        'ROO_CODE_MODE': 'enhanced_integration',
        'ROO_CODE_ENDPOINT': 'via_openrouter'
    }
    
    print("  ‚úÖ Cursor AI: Set to simulation mode (API not yet public)")
    print("  ‚úÖ Roo Code: Enhanced integration mode")
    
    return config

def update_env_file(new_config: Dict[str, str]) -> None:
    """Update .env file with new configuration"""
        f.write("# Cherry AI Services Configuration\n")
        f.write("# Generated by setup_ai_services.py\n\n")
        
        # Database configuration
        f.write("# Database Configuration\n")
        for key in ['POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB', 'POSTGRES_USER', 'POSTGRES_PASSWORD']:
            if key in final_config:
                f.write(f"{key}={final_config[key]}\n")
        
        f.write("\n# Vector Database\n")
        for key in ['WEAVIATE_URL', 'WEAVIATE_API_KEY']:
            if key in final_config:
                f.write(f"{key}={final_config[key]}\n")
        
        # AI Services
        f.write("\n# AI Services\n")
        ai_keys = ['ANTHROPIC_API_KEY', 'OPENAI_API_KEY', 'OPENROUTER_API_KEY', 
                   'GITHUB_TOKEN', 'GITHUB_FINE_GRAINED_TOKEN', 'CURSOR_API_KEY']
        for key in ai_keys:
            if key in final_config:
                f.write(f"{key}={final_config[key]}\n")
        
        # Portkey configuration
        f.write("\n# Portkey Configuration\n")
        for key in ['PORTKEY_OPENAI_VIRTUAL_KEY', 'PORTKEY_ANTHROPIC_VIRTUAL_KEY', 'PORTKEY_API_KEY']:
            if key in final_config:
                f.write(f"{key}={final_config[key]}\n")
        
        # Roo Code configuration
        f.write("\n# Roo Code Configuration\n")
        for key in ['ROO_CODE_MODE', 'ROO_CODE_ENDPOINT']:
            if key in final_config:
                f.write(f"{key}={final_config[key]}\n")
        
        # Other configuration
        f.write("\n# Other Configuration\n")
        for key, value in final_config.items():
            if key not in ai_keys + ['POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB', 
                                    'POSTGRES_USER', 'POSTGRES_PASSWORD', 'WEAVIATE_URL', 
                                    'WEAVIATE_API_KEY', 'PORTKEY_OPENAI_VIRTUAL_KEY', 
                                    'PORTKEY_ANTHROPIC_VIRTUAL_KEY', 'PORTKEY_API_KEY',
                                    'ROO_CODE_MODE', 'ROO_CODE_ENDPOINT']:
                f.write(f"{key}={value}\n")

def test_configuration() -> None:
    """Test the AI services configuration"""
    print("\nüß™ Testing AI Services Configuration...")
    
    try:

    
        pass
        # Test imports
        print("  üì¶ Testing imports...")
        from ai_components.claude.claude_analyzer import ClaudeProjectAnalyzer
        from ai_components.cursor_ai.cursor_integration_enhanced import CursorAIClient
        from ai_components.github_copilot.copilot_integration import GitHubCopilotClient
        from scripts.ai_system_conductor import AISystemconductor
        print("    ‚úÖ All AI components imported successfully")
        
        # Test conductor initialization
        print("  üé≠ Testing AI conductor...")
        # This might fail if database not configured, but that's ok
        try:

            pass
            conductor = AISystemconductor()
            print("    ‚úÖ AI conductor initialized")
        except Exception:

            pass
            print(f"    ‚ö†Ô∏è AI conductor warning: {e}")
            print("    üí° This is normal if database services aren't running yet")
        
        print("  ‚úÖ Configuration test completed!")
        
    except Exception:

        
        pass
        print(f"  ‚ùå Configuration test failed: {e}")
        print("  üí° Check your Python path and dependencies")

def show_next_steps(configured_services: List[str]) -> None:
    """Show next steps based on what was configured"""
    print("\nüéØ Next Steps:")
    
    if 'ANTHROPIC_API_KEY' in configured_services:
        print("  1Ô∏è‚É£ Test Claude integration:")
        print("     python ai_components/claude/claude_analyzer.py")
    else:
        print("  1Ô∏è‚É£ Get Claude API key for immediate functionality:")
        print("     https://console.anthropic.com/")
    
    if 'GITHUB_TOKEN' in configured_services:
        print("  2Ô∏è‚É£ Test GitHub Copilot integration:")
        print("     python ai_components/github_copilot/copilot_integration.py --test")
    else:
        print("  2Ô∏è‚É£ Ensure GitHub tokens are available in your environment")
    
    print("  3Ô∏è‚É£ Start database services:")
    print("     sudo systemctl start postgresql")
    print("     docker run -d -p 8080:8080 weaviate/weaviate")
    
    print("  4Ô∏è‚É£ Test full system:")
    print("     python scripts/comprehensive_ai_validation.py --quick")
    
    print("  5Ô∏è‚É£ Start AI conductor:")
    print("     python scripts/ai_system_conductor.py --start")

def main():
    """Main setup function"""
    print("üöÄ Cherry AI Services Setup")
    print("=" * 50)
    
    # Check existing configuration
    existing = check_existing_env()
    print(f"üìã Found {len(existing)} existing configuration items")
    
    # Setup each service
    new_config = {}
    configured_services = []
    
    # GitHub integration (using org tokens)
    github_config = setup_github_integration()
    new_config.update(github_config)
    if github_config:
        configured_services.extend(github_config.keys())
    
    # Claude/Anthropic
    claude_config = setup_anthropic_claude()
    new_config.update(claude_config)
    if claude_config:
        configured_services.extend(claude_config.keys())
    
    # OpenAI
    openai_config = setup_openai()
    new_config.update(openai_config)
    if openai_config:
        configured_services.extend(openai_config.keys())
    
    # OpenRouter
    openrouter_config = setup_openrouter()
    new_config.update(openrouter_config)
    if openrouter_config:
        configured_services.extend(openrouter_config.keys())
    
    # Simulation services
    sim_config = setup_simulation_services()
    new_config.update(sim_config)
    configured_services.extend(sim_config.keys())
    
    # Update .env file
    if new_config:
        print(f"\nüíæ Updating .env file with {len(new_config)} new configurations...")
        update_env_file(new_config)
        print("  ‚úÖ .env file updated!")
    
    # Test configuration
    test_configuration()
    
    # Show next steps
    show_next_steps(configured_services)
    
    print("\nüéâ AI Services setup complete!")
    print(f"üìä Configured {len(configured_services)} services")
    print("üîç See AI_SERVICES_CONFIGURATION_GUIDE.md for detailed information")

if __name__ == "__main__":
    main() 