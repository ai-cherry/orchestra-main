server {
    listen 80;
    server_name cherry-ai.me www.cherry-ai.me;

    # Access and error logs
    access_log /var/log/nginx/dashboard.access.log;
    error_log /var/log/nginx/dashboard.error.log;

    # t location for the dashboard UI (Next.js app)
    location / {
        proxy_pass http://localhost:3000; # Assuming dashboard Next.js app runs on port 3000
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s; # Increase timeout for potentially long-running UI interactions
        proxy_cache_bypass $http_upgrade;
    }

    # Location for the FastAPI backend API
    # Requests to cherry-ai.me/api/... will be forwarded to the backend
    location /api/ {
        proxy_pass http://localhost:8000/api/; # Forward to FastAPI backend, ensure trailing slash
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_cache_bypass $http_upgrade;

        # WebSocket support for the API path (if your FastAPI uses WebSockets under /api/ws for example)
        # If your WebSocket path is different, adjust this location block or add a new one.
        # E.g., location /api/ws/ { ... }
    }
    
    # Optional: If your WebSocket for the collaboration bridge is NOT under /api/
    # For example, if it's directly at /ws or a specific path like /ws/collab
    # The collaboration bridge is currently on port 8765 and might be handled by a separate Nginx config or directly.
    # If main.py also serves the WebSocket on port 8000 under a path like /ws, then /api/ws might be sufficient.
    # For now, this example assumes API related WebSockets are under /api/

    # Placeholder for SSL configuration (Let's Encrypt / Certbot)
    # listen 443 ssl http2;
    # server_name cherry-ai.me www.cherry-ai.me;
    # ssl_certificate /etc/letsencrypt/live/cherry-ai.me/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/cherry-ai.me/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

# It's often cleaner to have a separate server block for `api.cherry-ai.me`
# if you prefer that over `cherry-ai.me/api/`.
# Example for api.cherry-ai.me subdomain:
# server {
#     listen 80;
#     server_name api.cherry-ai.me;
# 
#     access_log /var/log/nginx/api.access.log;
#     error_log /var/log/nginx/api.error.log;
# 
#     location / {
#         proxy_pass http://localhost:8000; # Forward to FastAPI backend
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_set_header Host $host;
#         # ... other headers ...
#     }
#     # ... SSL for api.cherry-ai.me ...
# } 