// This file is for use with Gemini Code Assist in VS Code/Codespaces
// To use, install Gemini Code Assist extension, then use the comment prompt below

/**
 * Workstation configuration upgrade script
 * Upgrades from e2-standard-4 to n2d-standard-32 with 2x T4 GPUs
 * 
 * To generate with Gemini Code Assist, use:
 * /fix workstation configuration to upgrade from e2-standard-4 to n2d-standard-32 with 2x T4 GPUs
 */

// The script below will be generated by Gemini Code Assist when prompted
// This is a template for what it should look like:

/**
 * GCP Workstation Configuration Upgrade
 * Upgrades from e2-standard-4 to n2d-standard-32 with 2x NVIDIA T4 GPUs
 */

// Shell script to be saved as upgrade_workstation.sh
const upgradeScript = `#!/bin/bash
# upgrade_workstation.sh
# 
# Upgrades GCP workstation from e2-standard-4 to n2d-standard-32 with 2x NVIDIA T4 GPUs
# For cherry-ai-project project workstations

set -e

# Configuration
PROJECT_ID="cherry-ai-project"
REGION="us-central1"
CLUSTER_NAME="ai-development"
CONFIG_NAME="ai-dev-config"

echo "===== GCP Workstation Configuration Upgrade ====="
echo "Project: $PROJECT_ID"
echo "Region: $REGION"
echo "Cluster: $CLUSTER_NAME"
echo "Config: $CONFIG_NAME"

# Step 1: Get current configuration
echo "\\nStep 1: Getting current workstation configuration..."
CURRENT_CONFIG=$(gcloud workstations configs describe "$CONFIG_NAME" \\
  --cluster="$CLUSTER_NAME" \\
  --region="$REGION" \\
  --project="$PROJECT_ID" \\
  --format=json)

echo "Current machine type: $(echo "$CURRENT_CONFIG" | jq -r '.host.gceInstance.machineType')"
echo "Current GPU configuration: $(echo "$CURRENT_CONFIG" | jq -r '.host.gceInstance.accelerators[]?.type // "None"')"

# Step 2: Update workstation configuration
echo "\\nStep 2: Updating workstation configuration..."
echo "Upgrading to n2d-standard-32 with 2x NVIDIA T4 GPUs..."

# Create a temporary JSON file with the updated configuration
cat > updated_config.json << EOF
{
  "host": {
    "gceInstance": {
      "machineType": "n2d-standard-32",
      "accelerators": [
        {
          "type": "nvidia-tesla-t4",
          "count": 2
        }
      ],
      "serviceAccount": "$(echo "$CURRENT_CONFIG" | jq -r '.host.gceInstance.serviceAccount // "default"')",
      "bootDiskSizeGb": "$(echo "$CURRENT_CONFIG" | jq -r '.host.gceInstance.bootDiskSizeGb // "100"')"
    }
  }
}
EOF

# Update the configuration
gcloud workstations configs update "$CONFIG_NAME" \\
  --cluster="$CLUSTER_NAME" \\
  --region="$REGION" \\
  --project="$PROJECT_ID" \\
  --update-from-file=updated_config.json || {
    echo "Error: Failed to update workstation configuration."
    echo "This might be due to quota limits or the configuration already exists."
    exit 1
  }

# Clean up the temporary file
rm -f updated_config.json

# Step 3: Verify the update
echo "\\nStep 3: Verifying updated configuration..."
UPDATED_CONFIG=$(gcloud workstations configs describe "$CONFIG_NAME" \\
  --cluster="$CLUSTER_NAME" \\
  --region="$REGION" \\
  --project="$PROJECT_ID" \\
  --format=json)

NEW_MACHINE_TYPE=$(echo "$UPDATED_CONFIG" | jq -r '.host.gceInstance.machineType')
NEW_GPU_TYPE=$(echo "$UPDATED_CONFIG" | jq -r '.host.gceInstance.accelerators[]?.type // "None"')
NEW_GPU_COUNT=$(echo "$UPDATED_CONFIG" | jq -r '.host.gceInstance.accelerators[]?.count // "0"')

if [[ "$NEW_MACHINE_TYPE" == "n2d-standard-32" ]] && [[ "$NEW_GPU_TYPE" == "nvidia-tesla-t4" ]] && [[ "$NEW_GPU_COUNT" == "2" ]]; then
  echo "\\n✅ WORKSTATION UPGRADE SUCCESSFUL!"
  echo "Machine Type: $NEW_MACHINE_TYPE"
  echo "GPU Type: $NEW_GPU_TYPE"
  echo "GPU Count: $NEW_GPU_COUNT"
else
  echo "\\n❌ WORKSTATION UPGRADE VERIFICATION FAILED"
  echo "Expected machine type 'n2d-standard-32', got '$NEW_MACHINE_TYPE'"
  echo "Expected GPU type 'nvidia-tesla-t4', got '$NEW_GPU_TYPE'"
  echo "Expected GPU count '2', got '$NEW_GPU_COUNT'"
  exit 1
fi

# Step 4: Restart workstation to apply changes
echo "\\nStep 4: Restarting workstation to apply changes..."
echo "Note: This will terminate any active workstation sessions"

read -p "Restart workstation now? (y/n): " RESTART_CONFIRM
if [[ "$RESTART_CONFIRM" == "y" ]]; then
  echo "Stopping workstation..."
  gcloud workstations stop "$CONFIG_NAME" \\
    --cluster="$CLUSTER_NAME" \\
    --region="$REGION" \\
    --project="$PROJECT_ID" || {
      echo "Warning: Failed to stop workstation. It might already be stopped."
    }
    
  echo "Starting workstation with new configuration..."
  gcloud workstations start "$CONFIG_NAME" \\
    --cluster="$CLUSTER_NAME" \\
    --region="$REGION" \\
    --project="$PROJECT_ID" || {
      echo "Error: Failed to start workstation with new configuration."
      exit 1
    }
    
  echo "\\n✅ WORKSTATION RESTART COMPLETE"
  echo "The workstation is now running with the new configuration"
else
  echo "\\nSkipped workstation restart. Remember to restart the workstation"
  echo "to apply the new configuration using:"
  echo "gcloud workstations stop $CONFIG_NAME --cluster=$CLUSTER_NAME --region=$REGION"
  echo "gcloud workstations start $CONFIG_NAME --cluster=$CLUSTER_NAME --region=$REGION"
fi

echo "\\n===== Workstation Upgrade Complete ====="
echo "Your workstation has been upgraded to n2d-standard-32 with 2x NVIDIA T4 GPUs."
echo "View in GCP Console: https://console.cloud.google.com/workstations/clusters/$CLUSTER_NAME/configs?project=$PROJECT_ID"
`;

// Function to save the upgrade script
function saveUpgradeScript() {
  // This would be handled by the Gemini Code Assist extension
  console.log('Workstation upgrade script generated');
}

// Function to execute the upgrade script
function executeUpgradeScript() {
  // This would be executed by the user in the terminal
  console.log('Execute with: chmod +x upgrade_workstation.sh && ./upgrade_workstation.sh');
}

// Output
console.log('Workstation upgrade script generated for upgrading to n2d-standard-32 with 2x NVIDIA T4 GPUs');
console.log('Save to upgrade_workstation.sh and execute with bash');
