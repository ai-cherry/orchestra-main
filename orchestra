#!/bin/bash
# Orchestra AI - The ONLY Command You Need

# Kill anything on port 8000
echo "🔫 Killing anything on port 8000..."
lsof -ti:8000 | xargs kill -9 2>/dev/null || true

# Figure out which orchestra directory to use
if [ -d "$HOME/orchestra-main-2" ]; then
    cd "$HOME/orchestra-main-2"
elif [ -d "$HOME/orchestra-main" ]; then
    cd "$HOME/orchestra-main"
else
    cd "$(dirname "$0")"
fi

echo "📁 Working in: $(pwd)"

# Auto-setup Python environment
if command -v pyenv &> /dev/null; then
    eval "$(pyenv init -)"
fi

# Create venv if it doesn't exist
if [ ! -d "venv" ]; then
    echo "🔧 First time setup..."
    python3 -m venv venv
fi

# Activate venv
source venv/bin/activate

# Install dependencies if needed
if ! python -c "import fastapi" 2>/dev/null; then
    echo "📦 Installing dependencies..."
    pip install --upgrade pip --quiet
    if [ -f "requirements-minimal.txt" ]; then
        pip install -r requirements-minimal.txt --quiet
    elif [ -f "requirements.txt" ]; then
        pip install -r requirements.txt --quiet
    fi
    pip install litellm --quiet
fi

# Create .env if missing
if [ ! -f ".env" ]; then
    echo "📝 Creating .env..."
    if [ -f "env.example" ]; then
        cp env.example .env
    else
        cat > .env << 'EOF'
ENVIRONMENT=development
DEBUG=True
DATABASE_URL=postgresql://localhost/orchestra_ai
REDIS_URL=redis://localhost:6379/0
SECRET_KEY=dev-secret-key
API_PORT=8000
EOF
    fi
fi

# Find and run the app
echo "🚀 Starting Orchestra AI..."
if [ -f "main_app.py" ]; then
    python -m uvicorn main_app:app --reload --host 0.0.0.0 --port 8000
elif [ -f "agent/app/main.py" ]; then
    python -m uvicorn agent.app.main:app --reload --host 0.0.0.0 --port 8000
else
    # Create a test server
    cat > test_server.py << 'EOF'
from fastapi import FastAPI
app = FastAPI(title="Orchestra AI")

@app.get("/")
async def root():
    return {"message": "Orchestra AI is running! 🎵"}

@app.get("/health")
async def health():
    return {"status": "healthy"}
EOF
    python -m uvicorn test_server:app --reload --host 0.0.0.0 --port 8000
fi 