name: Migrate GitHub Secrets to GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      apply_time_conditions:
        description: 'Apply time-based conditions to restrict access to business hours'
        required: false
        default: false
        type: boolean
      service_accounts:
        description: 'Comma-separated service accounts to grant access (optional)'
        required: false
        type: string

jobs:
  migrate:
    name: Migrate GitHub Secrets
    runs-on: ubuntu-latest
    
    # Define environment
    environment: ${{ github.event.inputs.environment }}
    
    # Set permissions
    permissions:
      contents: read
      id-token: write  # For GCP Workload Identity Federation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install PyGithub google-cloud-secret-manager python-dotenv
          
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_ID }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Get secrets from repository
        id: get-secrets
        run: |
          # Create a list of secret names
          SECRETS=$(gh secret list --repo ${{ github.repository }} --json name -q '.[].name' | jq -r 'join(",")')
          echo "SECRETS_LIST=$SECRETS" >> $GITHUB_ENV
          
          # Count secrets
          SECRET_COUNT=$(echo "$SECRETS" | tr ',' '\n' | wc -l)
          echo "Found $SECRET_COUNT secrets in the repository"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run migration script
        run: |
          # Prepare command
          MIGRATE_CMD="python3 secret-management/migrate_github_to_gcp.py --project-id=${{ secrets.GCP_PROJECT_ID }} --repo=${{ github.repository }}"
          
          # Add time conditions if requested
          if [ "${{ github.event.inputs.apply_time_conditions }}" == "true" ]; then
            MIGRATE_CMD="$MIGRATE_CMD --time-condition"
          fi
          
          # Add service accounts if provided
          if [ -n "${{ github.event.inputs.service_accounts }}" ]; then
            MIGRATE_CMD="$MIGRATE_CMD --service-accounts=${{ github.event.inputs.service_accounts }}"
          fi
          
          # Add labels
          MIGRATE_CMD="$MIGRATE_CMD --labels=environment=${{ github.event.inputs.environment }},migrated-by=github-actions"
          
          # Add output CSV report
          MIGRATE_CMD="$MIGRATE_CMD --output-csv=migration_report.csv"
          
          # Run in dry-run mode first
          echo "Running in dry-run mode first"
          $MIGRATE_CMD --dry-run
          
          # Ask for confirmation
          echo "The above secrets will be migrated. Proceeding with actual migration..."
          
          # Execute the actual migration
          $MIGRATE_CMD
          
      - name: Upload migration report
        uses: actions/upload-artifact@v4
        with:
          name: migration-report
          path: migration_report.csv
          
      - name: Summarize migration
        run: |
          echo "## Secret Migration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "Time-based conditions: ${{ github.event.inputs.apply_time_conditions }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse the migration report
          if [ -f migration_report.csv ]; then
            SUCCESS_COUNT=$(grep -c "created\|updated" migration_report.csv || echo 0)
            SKIPPED_COUNT=$(grep -c "skipped" migration_report.csv || echo 0)
            ERROR_COUNT=$(grep -c "error" migration_report.csv || echo 0)
            
            echo "- 🟢 **$SUCCESS_COUNT** secrets successfully migrated" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 **$SKIPPED_COUNT** secrets skipped" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 **$ERROR_COUNT** secrets had errors" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Migration report not found" >> $GITHUB_STEP_SUMMARY
          fi
