name: Orchestra AI - Production Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          npm install -g audit-ci

      - name: Run Python security scan (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Check Python dependencies (Safety)
        run: |
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto .

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Backend Testing
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: orchestra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Run Python linting (flake8)
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Python type checking (mypy)
        run: |
          pip install mypy
          mypy . --ignore-missing-imports || true

      - name: Run backend unit tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/orchestra_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test-secret-key
          LAMBDA_LABS_API_KEY: test-key
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run frontend linting
        run: npm run lint

      - name: Run frontend type checking
        run: npm run type-check

      - name: Run frontend unit tests
        run: npm run test:unit

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: web/dist/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: orchestra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          cd web && npm ci

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: web/dist/

      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/orchestra_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: test-secret-key
        run: |
          uvicorn main_api:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run integration tests
        run: |
          pip install pytest-playwright
          playwright install
          pytest tests/integration/ -v

      - name: Run API health checks
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/system/status || exit 1

  # Infrastructure Validation
  infrastructure-tests:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Install Pulumi dependencies
        run: |
          cd pulumi
          pip install -r requirements.txt

      - name: Validate Pulumi configuration
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          cd pulumi
          pulumi stack select dev --create
          pulumi config set lambda_labs:api_key "test-key"
          pulumi preview

      - name: Validate deployment scripts
        run: |
          chmod +x *.sh
          bash -n deploy_complete_infrastructure.sh
          bash -n setup_lambda_labs.sh
          bash -n configure_gpu.sh

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests, integration-tests, infrastructure-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Deploy Frontend to Vercel
      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./web
          vercel-args: '--prod'

      # Deploy Infrastructure with Pulumi
      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Deploy Infrastructure
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}
        run: |
          cd pulumi
          pip install -r requirements.txt
          pulumi stack select production --create
          pulumi config set lambda_labs:api_key "$LAMBDA_LABS_API_KEY" --secret
          pulumi up --yes

      # Deploy Backend to Lambda Labs
      - name: Deploy Backend Services
        env:
          LAMBDA_LABS_API_KEY: ${{ secrets.LAMBDA_LABS_API_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/lambda_key
          chmod 600 ~/.ssh/lambda_key
          
          # Deploy to Lambda Labs instances
          ./deploy_complete_infrastructure.sh

      # Health Checks
      - name: Production Health Checks
        run: |
          # Wait for services to start
          sleep 60
          
          # Check frontend
          curl -f https://orchestra-ai-admin.vercel.app/health || exit 1
          
          # Check backend (replace with actual IP)
          # curl -f http://[LAMBDA_IP]:8000/health || exit 1

      # Notify deployment status
      - name: Notify Deployment Success
        if: success()
        run: |
          echo "✅ Orchestra AI deployed successfully to production!"
          echo "Frontend: https://orchestra-ai-admin.vercel.app"
          echo "Backend: Lambda Labs GPU instances"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Orchestra AI deployment failed!"
          exit 1

  # Performance Testing (Post-deployment)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

