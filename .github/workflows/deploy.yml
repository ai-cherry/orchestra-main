name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Run tests
        run: |
          poetry run pytest

      - name: Run linting
        run: |
          poetry run flake8
          poetry run mypy .

  build-container:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/525398941159/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@cherry-ai-project.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          docker build -t us-docker.pkg.dev/cherry-ai-project/orchestra/api:${{ github.sha }} .
          docker push us-docker.pkg.dev/cherry-ai-project/orchestra/api:${{ github.sha }}

  deploy-cloud-run:
    needs: build-container
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/525398941159/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@cherry-ai-project.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy mcp-server \
            --image us-docker.pkg.dev/cherry-ai-project/orchestra/api:${{ github.sha }} \
            --region us-west4 \
            --platform managed \
            --memory 16Gi \
            --cpu 4 \
            --min-instances 2 \
            --max-instances 20 \
            --concurrency 80 \
            --execution-environment gen2 \
            --service-account orchestra-api-sa@cherry-ai-project.iam.gserviceaccount.com \
            --set-env-vars="PROJECT_ID=cherry-ai-project,ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }},REGION=us-west4" \
            --set-secrets="GCP_MASTER_SERVICE_JSON=gcp-master-service-json:latest,GH_CLASSIC_PAT_TOKEN=gh-classic-pat-token:latest,GH_FINE_GRAINED_PAT_TOKEN=gh-fine-grained-pat-token:latest"

      - name: Run integration tests
        run: |
          SERVICE_URL=$(gcloud run services describe mcp-server --region us-west4 --format='value(status.url)')
          curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health | grep 200

  notify:
    needs: deploy-cloud-run
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ needs.deploy-cloud-run.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: |
            Deployment of MCP Server to Cloud Run ${{ needs.deploy-cloud-run.result == 'success' && 'succeeded' || 'failed' }}
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
