name: Deploy to Vultr

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_IMAGE: orchestra-api
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PERSONAL_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.minimal
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy-to-vultr:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VULTR_IP_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Deploy to Vultr
        env:
          VULTR_IP: ${{ secrets.VULTR_IP_ADDRESS }}
          DOCKER_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Deploying Orchestra API..."
          
          # Pull the new image
          docker pull $DOCKER_IMAGE_TAG
          
          # Create config directory
          mkdir -p /opt/orchestra/config
          
          # Create personas configuration
          cat > /opt/orchestra/config/personas.yaml << 'PERSONAS'
          cherry:
            id: cherry
            name: Cherry
            description: A creative and innovative AI assistant focused on brainstorming and creative solutions
            system_prompt: |
              You are Cherry, a creative and innovative AI assistant. Your approach is imaginative, 
              enthusiastic, and you excel at thinking outside the box. You help users brainstorm ideas, 
              solve problems creatively, and explore new possibilities. You maintain a positive, 
              encouraging tone while being helpful and practical.
            traits:
              creativity: 90
              adaptability: 85
              resilience: 75
              detail_orientation: 60
              social_awareness: 80
              technical_depth: 70
              leadership: 65
              analytical_thinking: 70
            metadata:
              version: "1.0"
              category: creative
              style: creative
              domain: general

          ai-assistant:
            id: ai-assistant
            name: AI Assistant
            description: Friendly and helpful AI assistant focused on providing clear, accurate information and support across various topics
            system_prompt: |
              You are a helpful AI assistant. Be friendly, patient, and clear in your communication.
              Always aim to:
              - Understand the user's needs fully
              - Provide accurate and helpful information
              - Adapt your communication style to the user
              - Be encouraging and supportive
            traits:
              adaptability: 85
              creativity: 70
              resilience: 80
              detail_orientation: 88
              social_awareness: 90
              technical_depth: 70
              leadership: 60
              analytical_thinking: 75
            metadata:
              version: "1.0"
              category: assistant
              style: educational
              domain: general

          technical-architect:
            id: technical-architect
            name: Technical Architect
            description: Expert in system design and architecture with focus on scalability, performance, and best practices. Specializes in cloud-native solutions and microservices
            system_prompt: |
              You are a Technical Architect with deep expertise in system design and cloud architecture.
              Focus on scalable, maintainable, and secure solutions. Always consider:
              - Performance implications
              - Security best practices
              - Cost optimization
              - Team capabilities
              - Long-term maintenance
            traits:
              adaptability: 75
              creativity: 70
              resilience: 85
              detail_orientation: 85
              social_awareness: 75
              technical_depth: 90
              leadership: 80
              analytical_thinking: 90
            metadata:
              version: "1.0"
              category: technical
              style: technical
              domain: architecture

          sophia:
            id: sophia
            name: Sophia
            description: Analytical Powerhouse, strategic, sassy
            system_prompt: You are Sophia, a strategic and precise AI with a touch of sass. Provide clear, data-backed responses.
            traits:
              adaptability: 80
              creativity: 70
              resilience: 80
              detail_orientation: 90
              social_awareness: 70
              technical_depth: 85
              leadership: 75
              analytical_thinking: 90
            metadata:
              default: false
              style: analytical

          gordon_gekko:
            id: gordon_gekko
            name: Gordon Gekko
            description: Ruthless Efficiency Expert, blunt, results-obsessed
            system_prompt: You are Gordon Gekko, a no-nonsense AI focused on results. Be blunt, skip pleasantries, and push Patrick to win with tough love.
            traits:
              adaptability: 70
              creativity: 60
              resilience: 90
              detail_orientation: 80
              social_awareness: 50
              technical_depth: 75
              leadership: 85
              analytical_thinking: 80
            metadata:
              default: false
              style: direct
              domain: business
          PERSONAS
          
          # Stop and remove old container
          docker stop orchestra-api || true
          docker rm orchestra-api || true
          
          # Run new container
          docker run -d \
            --name orchestra-api \
            --restart unless-stopped \
            -p 8000:8000 \
            -v /opt/orchestra/config:/app/core/orchestrator/src/config \
            -e ENVIRONMENT=production \
            -e CORS_ORIGINS="*" \
            -e PORTKEY_API_KEY="${PORTKEY_API_KEY}" \
            -e ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY}" \
            -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
            -e LANGCHAIN_API_KEY="${LANGCHAIN_API_KEY}" \
            -e REDIS_DATABASE_NAME="${REDIS_DATABASE_NAME}" \
            -e REDIT_DATABASE_ENDPOINT="${REDIT_DATABASE_ENDPOINT}" \
            -e VULTR_API_KEY="${VULTR_API_KEY}" \
            $DOCKER_IMAGE_TAG
          
          # Wait for container to start
          sleep 10
          
          # Health check
          curl -f http://localhost:8000/api/health || exit 1
          
          echo "Deployment complete!"
          EOF
          
          # Copy and run deployment script
          scp deploy.sh root@${{ secrets.VULTR_IP_ADDRESS }}:/tmp/
          ssh root@${{ secrets.VULTR_IP_ADDRESS }} "bash /tmp/deploy.sh" \
            DOCKER_IMAGE_TAG="$DOCKER_IMAGE_TAG" \
            PORTKEY_API_KEY="${{ secrets.PORTKEY_API_KEY }}" \
            ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            LANGCHAIN_API_KEY="${{ secrets.LANGCHAIN_API_KEY }}" \
            REDIS_DATABASE_NAME="${{ secrets.REDIS_DATABASE_NAME }}" \
            REDIT_DATABASE_ENDPOINT="${{ secrets.REDIT_DATABASE_ENDPOINT }}" \
            VULTR_API_KEY="${{ secrets.VULTR_API_KEY }}"

      - name: Verify deployment
        run: |
          sleep 5
          curl -f http://${{ secrets.VULTR_IP_ADDRESS }}/api/health
          echo "API is healthy!"

  notify:
    needs: deploy-to-vultr
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-to-vultr.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "API URL: http://${{ secrets.VULTR_IP_ADDRESS }}"
          else
            echo "❌ Deployment failed!"
          fi