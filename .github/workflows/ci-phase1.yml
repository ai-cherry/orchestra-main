name: CI - Phase 1

on:
  pull_request:
    branches: [main, develop, 'phase-*']
  push:
    branches: [main, develop, 'phase-*']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect which parts of the codebase changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      javascript: ${{ steps.filter.outputs.javascript }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'pyproject.toml'
              - 'poetry.lock'
              - 'requirements*.txt'
            javascript:
              - '**/*.js'
              - '**/*.jsx'
              - '**/*.ts'
              - '**/*.tsx'
              - '**/package.json'
              - '**/pnpm-lock.yaml'
            docker:
              - '**/Dockerfile*'
              - '**/docker-compose*.yml'
              - 'dev-compose.yml'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Python linting and testing
  python:
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi
      
      - name: Run Black
        run: poetry run black --check .
      
      - name: Run isort
        run: poetry run isort --check-only .
      
      - name: Run Ruff
        run: poetry run ruff .
      
      - name: Run pytest
        run: poetry run pytest --cov=src --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # JavaScript/TypeScript linting and testing
  javascript:
    needs: changes
    if: ${{ needs.changes.outputs.javascript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run ESLint
        run: pnpm -r lint
      
      - name: Run Prettier check
        run: pnpm -r format:check
      
      - name: Run tests
        run: pnpm -r test --if-present

  # Docker build validation
  docker:
    needs: changes
    if: ${{ needs.changes.outputs.docker == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Validate Docker Compose
        run: docker-compose -f dev-compose.yml config
      
      - name: Build Docker images
        run: docker-compose -f dev-compose.yml build --parallel

  # Documentation validation
  docs:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check.json'

  # Summary job that other jobs can depend on
  ci-success:
    needs: [python, javascript, docker, docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.python.result }}" == "failure" ]] || \
             [[ "${{ needs.javascript.result }}" == "failure" ]] || \
             [[ "${{ needs.docker.result }}" == "failure" ]] || \
             [[ "${{ needs.docs.result }}" == "failure" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully" 