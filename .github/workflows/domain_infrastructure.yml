name: Domain Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - 'config/domains/**'
      - '.github/workflows/domain_infrastructure.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to deploy (personal/payready/paragonrx/all)'
        required: true
        default: 'all'

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Validate Domain Configurations
      run: |
        python scripts/validate_domain_infrastructure.py
    
    - name: Check Rate Limit Configs
      run: |
        for domain in personal payready paragonrx; do
          echo "Validating $domain rate limits..."
          python -c "import json; f = open('config/domains/${domain}_rate_limits.json'); config = json.load(f); assert config['rate_limiting']['enabled']; print(f'✅ {domain} rate limits valid')"
        done

  configure-routing:
    name: Configure Domain Routing
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure NGINX Domain Routing
      run: |
        echo "🔧 Configuring domain routing..."
        bash scripts/fix_api_gateway_routing.sh
    
    - name: Validate NGINX Configuration
      run: |
        docker run --rm -v $PWD/infrastructure/nginx:/etc/nginx/conf.d:ro nginx:alpine nginx -t

  deploy-personal:
    name: Deploy Personal Domain
    runs-on: ubuntu-latest
    needs: configure-routing
    if: github.event.inputs.domain == 'personal' || github.event.inputs.domain == 'all' || github.event.inputs.domain == ''
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Pulumi
      uses: pulumi/actions@v3
    
    - name: Deploy Personal Infrastructure
      run: |
        cd infrastructure
        pulumi stack select personal-prod
        pulumi up --yes
      env:
        DOMAIN: personal
    
    - name: Initialize Personal Services
      run: |
        python scripts/initialize_weaviate.py --domain personal
        python scripts/configure_airbyte.py --domain personal

  deploy-payready:
    name: Deploy PayReady Domain
    runs-on: ubuntu-latest
    needs: configure-routing
    if: github.event.inputs.domain == 'payready' || github.event.inputs.domain == 'all' || github.event.inputs.domain == ''
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Pulumi
      uses: pulumi/actions@v3
    
    - name: Deploy PayReady Infrastructure
      run: |
        cd infrastructure
        pulumi stack select payready-prod
        pulumi up --yes
      env:
        DOMAIN: payready
    
    - name: Initialize PayReady Services
      run: |
        python scripts/initialize_weaviate.py --domain payready
        python scripts/configure_airbyte.py --domain payready

  deploy-paragonrx:
    name: Deploy ParagonRX Domain
    runs-on: ubuntu-latest
    needs: configure-routing
    if: github.event.inputs.domain == 'paragonrx' || github.event.inputs.domain == 'all' || github.event.inputs.domain == ''
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Pulumi
      uses: pulumi/actions@v3
    
    - name: Deploy ParagonRX Infrastructure
      run: |
        cd infrastructure
        pulumi stack select paragonrx-prod
        pulumi up --yes
      env:
        DOMAIN: paragonrx
    
    - name: Initialize ParagonRX Services
      run: |
        python scripts/initialize_weaviate.py --domain paragonrx
        python scripts/configure_airbyte.py --domain paragonrx

  test-infrastructure:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    needs: [deploy-personal, deploy-payready, deploy-paragonrx]
    if: always()
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests pyyaml numpy
    
    - name: Run Infrastructure Tests
      run: |
        python scripts/infrastructure_tests.py
    
    - name: Run Smoke Tests
      run: |
        python scripts/smoke_tests.py --all-domains
    
    - name: Check Circuit Breakers
      run: |
        python -c "from shared.enhanced_circuit_breaker import circuit_breaker_manager; print(circuit_breaker_manager.get_health_status())"

  monitor-deployment:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: test-infrastructure
    if: success()
    steps:
    - uses: actions/checkout@v3
    
    - name: Start AI Infrastructure Monitor
      run: |
        python scripts/ai_infrastructure_monitor.py --duration 300 &
        MONITOR_PID=$!
        
        # Let it run for 5 minutes
        sleep 300
        
        # Check for anomalies
        kill $MONITOR_PID
        
        if [ -f "anomalies.json" ]; then
          echo "⚠️ Anomalies detected during deployment"
          cat anomalies.json
        else
          echo "✅ No anomalies detected"
        fi
    
    - name: Generate Deployment Report
      run: |
        cat > generate_report.py << 'EOF'
        import json
        from datetime import datetime
        
        report = {
            'deployment_time': datetime.now().isoformat(),
            'domains_deployed': ['personal', 'payready', 'paragonrx'],
            'status': 'success',
            'routing_configured': True,
            'monitoring_active': True
        }
        
        with open('deployment_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        EOF
        python generate_report.py
    
    - name: Upload Deployment Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment_report.json
