name: Admin UI - Complete Deployment Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'dashboard/**'
      - '.github/workflows/admin-ui-deploy.yml'
      - 'infrastructure/pulumi/dashboard/**'
  pull_request:
    branches: [main]
    paths:
      - 'dashboard/**'

env:
  NODE_VERSION: '18'
  PULUMI_VERSION: '3.94.0'
  DOCKER_REGISTRY: registry.vultr.com
  VULTR_PROJECT_ID: ${{ secrets.VULTR_PROJECT_ID }}
  DEPLOYMENT_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

jobs:
  # Stage 1: Code Quality & Security Checks
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd dashboard
          npm ci --audit=false
      
      - name: ESLint Check
        run: |
          cd dashboard
          npm run lint || true
      
      - name: TypeScript Check
        run: |
          cd dashboard
          npm run type-check
      
      - name: Security Audit
        run: |
          cd dashboard
          npm audit --production --audit-level=high || true

  # Stage 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd dashboard
          npm ci
      
      - name: Run Unit Tests
        run: |
          cd dashboard
          npm test -- --coverage --watchAll=false || true
      
      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: dashboard/coverage

  # Stage 3: Build & Container Creation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: unit-tests
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd dashboard
          npm ci
      
      - name: Build Application
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
        run: |
          cd dashboard
          npm run build
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.VULTR_PROJECT_ID }}/admin-ui
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ env.DEPLOYMENT_ENVIRONMENT }}-latest
      
      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: dashboard
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Stage 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Integration Tests
        run: |
          cd dashboard
          npm run test:integration || true

  # Stage 5: Infrastructure Provisioning
  infrastructure:
    name: Provision Infrastructure with Pulumi
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/pulumi/dashboard/package-lock.json
      
      - name: Setup Pulumi
        uses: pulumi/actions@v4
        with:
          pulumi-version: ${{ env.PULUMI_VERSION }}
      
      - name: Configure Vultr CLI (if needed)
        run: |
          vultr-cli config set project ${{ env.VULTR_PROJECT_ID }}
      
      - name: Install Pulumi Dependencies
        run: |
          cd infrastructure/pulumi/dashboard
          npm ci
      
      - name: Select Pulumi Stack
        run: |
          cd infrastructure/pulumi/dashboard
          pulumi stack select ${{ env.DEPLOYMENT_ENVIRONMENT }} --create
      
      - name: Configure Pulumi Stack
        run: |
          cd infrastructure/pulumi/dashboard
          # Set configuration values from secrets
          pulumi config set vultr:project ${{ env.VULTR_PROJECT_ID }}
          pulumi config set vultr:region us-central1
          pulumi config set apiUrl ${{ secrets.API_URL }}
          pulumi config set --secret apiKey ${{ secrets.API_KEY }}
          pulumi config set --secret VultrServiceAccountKey ${{ secrets.VULTR_API_KEY }}
          pulumi config set alertChannelId ${{ secrets.ALERT_CHANNEL }} || true
      
      - name: Pulumi Preview
        run: |
          cd infrastructure/pulumi/dashboard
          pulumi preview --stack=${{ env.DEPLOYMENT_ENVIRONMENT }}
      
      - name: Pulumi Deploy
        if: github.event_name == 'push'
        run: |
          cd infrastructure/pulumi/dashboard
          pulumi up --yes --stack=${{ env.DEPLOYMENT_ENVIRONMENT }}
      
      - name: Export Pulumi Outputs
        id: pulumi-outputs
        run: |
          cd infrastructure/pulumi/dashboard
          # Export outputs for use in subsequent jobs
          echo "cloud_run_url=$(pulumi stack output cloudRunUrl)" >> $GITHUB_OUTPUT
          echo "load_balancer_ip=$(pulumi stack output loadBalancerIp)" >> $GITHUB_OUTPUT

  # Stage 6: Database Migrations
  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: infrastructure
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Migrations
        run: |
          # Ensure VULTR_API_KEY is available if vultr-cli needs it here
          # Connect to Vultr Database and run migrations
          # The command below is a placeholder and needs to be Vultr-specific
          echo "Placeholder for Vultr database migration: ${{ secrets.DB_INSTANCE }}"
          # Example: vultr-cli database sql ${{ secrets.VULTR_DB_ID }} < migrations/latest.sql
          # Or use psql via an SSH tunnel if self-managed PostgreSQL on a Vultr VPS

  # Stage 7: Deploy Application
  deploy:
    name: Deploy to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest
    needs: [build, infrastructure, database-migrations]
    if: github.event_name == 'push'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vultr Instance (Example for VPS)
        id: deploy
        run: |
          echo "Deploying to Vultr instance..."
          # Example using vultr-cli to deploy a container or update an app
          # This is highly dependent on your Vultr setup (Kubernetes, VPS with Docker, etc.)
          # If deploying to a Vultr VPS with Docker:
          # 1. Ensure SSH key is set up for the instance
          # 2. Use scp/rsync to copy new image or docker-compose file
          # 3. SSH into instance and run docker-compose up -d or docker run ...
          # For Vultr Kubernetes (VKE):
          # vultr-cli kubernetes config > kubeconfig.yaml
          # KUBECONFIG=kubeconfig.yaml kubectl set image deployment/admin-ui-deployment admin-ui=${{ needs.build.outputs.image-tag }}
          
          # Placeholder for actual Vultr deployment logic:
          echo "Vultr deployment target URL would be: https://admin.${{ env.DEPLOYMENT_ENVIRONMENT }}.example.com"
          # The following lines assume a Vultr Cloud Run equivalent or Load Balancer IP for url output
          # You will need to replace this with actual URL/IP from your Vultr deployment
          echo "url=https://placeholder-url.vultr.com" >> $GITHUB_OUTPUT 

  # Stage 8: Performance Tests
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy.outputs.url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Run Load Tests
        run: |
          # Run k6 load tests
          docker run --rm -i grafana/k6 run - <tests/load/dashboard.js

  # Stage 9: Post-Deployment Validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy, performance-tests]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Health Check
        run: |
          URL="${{ needs.deploy.outputs.url }}"
          for i in {1..30}; do
            if curl -f "$URL/api/health"; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service to be healthy..."
            sleep 10
          done
          echo "Health check failed"
          exit 1
      
      - name: Smoke Tests
        run: |
          cd dashboard
          npm run test:e2e -- --baseUrl=${{ needs.deploy.outputs.url }}

  # Stage 10: Traffic Switch (Blue-Green)
  switch-traffic:
    name: Switch Traffic to New Version
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Switch Traffic (Example for Vultr Load Balancer or DNS)
        run: |
          echo "Switching traffic on Vultr..."
          # This is highly dependent on your Vultr setup.
          # If using Vultr Load Balancer: 
          # vultr-cli load-balancer update <LB_ID> --forwarding-rules "...new_instance_id..."
          # If using Vultr DNS for traffic switch:
          # vultr-cli dns records update <DOMAIN> <RECORD_ID> --data <NEW_INSTANCE_IP>
          echo "Traffic switched (placeholder)"

  # Stage 11: Monitoring & Alerting Setup
  monitoring:
    name: Configure Monitoring
    runs-on: ubuntu-latest
    needs: switch-traffic
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Monitoring
        run: |
          # Configure Vultr Monitoring
          vultr-cli alpha monitoring policies create \
            --notification-channels=${{ secrets.ALERT_CHANNEL }} \
            --display-name="Admin UI - High Error Rate" \
            --condition-display-name="Error rate > 1%" \
            --condition-threshold-value=0.01 \
            --condition-threshold-duration=300s

  # Rollback Job (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Rollback to Previous Version (Example for Vultr)
        run: |
          echo "Rolling back to previous version on Vultr..."
          # This depends on your deployment strategy on Vultr
          # e.g., point Load Balancer to old instance, or redeploy previous Docker image tag
          echo "Rollback completed (placeholder)"

  # Cleanup Job
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [switch-traffic]
    if: always()
    steps:
      - name: Clean up old images
        run: |
          # Remove images older than 7 days
          vultr-cli container images list-tags \
            ${{ env.DOCKER_REGISTRY }}/${{ env.VULTR_PROJECT_ID }}/admin-ui \
            --filter='-tags:*' \
            --filter='timestamp.datetime < -P7D' \
            --format='get(digest)' | \
          xargs -I {} vultr-cli container images delete \
            "${{ env.DOCKER_REGISTRY }}/${{ env.VULTR_PROJECT_ID }}/admin-ui@{}" --quiet