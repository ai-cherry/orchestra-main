name: Test Automation System

on:
  push:
    paths:
      - 'automation_*.py'
      - 'fully_automated_performance_enhancement.py'
      - 'workspace_optimization.py'
      - 'tests/automation/**'
      - '.github/workflows/test-automation-system.yml'
  pull_request:
    paths:
      - 'automation_*.py'
      - 'fully_automated_performance_enhancement.py'
      - 'workspace_optimization.py'
      - 'tests/automation/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Automation System Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Configure workload identity federation
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install google-cloud-aiplatform
          
          # Make sure scripts are executable
          chmod +x automation_controller.py
          chmod +x fully_automated_performance_enhancement.py
          chmod +x workspace_optimization.py
          chmod +x automation_decision_helper.py
          chmod +x analyze_code_wrapper.py
      
      - name: Run tests
        run: |
          pytest tests/automation/ -v --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
      
      - name: Run static analysis
        run: |
          pip install mypy ruff black
          
          # Run type checking
          mypy automation_controller.py fully_automated_performance_enhancement.py workspace_optimization.py automation_decision_helper.py
          
          # Run linting
          ruff check automation_controller.py fully_automated_performance_enhancement.py workspace_optimization.py automation_decision_helper.py
          
          # Check formatting
          black --check automation_controller.py fully_automated_performance_enhancement.py workspace_optimization.py automation_decision_helper.py
      
      - name: Test code analysis wrapper
        run: |
          # Create test file for analysis
          cat > test_file.py << 'EOF'
          def test_function():
              """Test function for code analysis."""
              password = "hardcoded_password"  # Security issue for testing
              return password
          EOF
          
          # Stage the file
          git add test_file.py
          
          # Run code analysis wrapper in non-interactive mode
          python analyze_code_wrapper.py --extensions .py || true
          
          # Clean up
          git reset test_file.py
          rm test_file.py
