name: Simplified Orchestra Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  PROJECT_ID: cherry-ai-project
  REGION: us-west4

jobs:
  deploy:
    name: Deploy Orchestra
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_MASTER_SERVICE_JSON }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.3
    
    - name: Deploy Infrastructure
      working-directory: infra/simplified-terraform
      run: |
        terraform init
        terraform apply -auto-approve \
          -var="project_id=$PROJECT_ID" \
          -var="region=$REGION" \
          -var="env=${{ github.event.inputs.environment || 'dev' }}"
    
    - name: Get Terraform outputs
      id: terraform-outputs
      working-directory: infra/simplified-terraform
      run: |
        echo "service_account=$(terraform output -raw service_account_email)" >> $GITHUB_OUTPUT
        echo "redis_host=$(terraform output -raw redis_host)" >> $GITHUB_OUTPUT
        echo "redis_port=$(terraform output -raw redis_port)" >> $GITHUB_OUTPUT
        echo "postgres_connection_name=$(terraform output -raw postgres_connection_name)" >> $GITHUB_OUTPUT
        echo "postgres_database=$(terraform output -raw postgres_database)" >> $GITHUB_OUTPUT
        echo "postgres_user=$(terraform output -raw postgres_user)" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: gcr.io/${{ env.PROJECT_ID }}/orchestra-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: orchestra-api
        region: ${{ env.REGION }}
        image: gcr.io/${{ env.PROJECT_ID }}/orchestra-api:${{ github.sha }}
        env_vars: |
          REDIS_HOST=${{ steps.terraform-outputs.outputs.redis_host }}
          REDIS_PORT=${{ steps.terraform-outputs.outputs.redis_port }}
          POSTGRES_CONNECTION_NAME=${{ steps.terraform-outputs.outputs.postgres_connection_name }}
          POSTGRES_DB=${{ steps.terraform-outputs.outputs.postgres_database }}
          POSTGRES_USER=${{ steps.terraform-outputs.outputs.postgres_user }}
        secrets: |
          REDIS_PASSWORD=redis-auth-${{ github.event.inputs.environment || 'dev' }}:latest
          POSTGRES_PASSWORD=postgres-password-${{ github.event.inputs.environment || 'dev' }}:latest
        service_account: ${{ steps.terraform-outputs.outputs.service_account }}
        flags: --allow-unauthenticated
    
    - name: Show Output
      run: |
        echo "Deployed service URL: ${{ steps.deploy.outputs.url }}"