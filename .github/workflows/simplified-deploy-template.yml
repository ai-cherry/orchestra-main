# Simplified GitHub Actions workflow template for a single-developer project
# This template provides a streamlined deployment process with fewer verification steps

name: Simplified Deploy to Cloud Run

on:
  push:
    branches: [main]
    paths:
      - 'your-service/**'  # Customize this path for your service
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: your-service-name  # Customize this for your service

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      contents: read
      id-token: write  # Required for requesting the JWT for WIF
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python (if needed)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      # Authenticate to Google Cloud
      # Option 1: Using Workload Identity Federation (recommended)
      - name: Google Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      
      # Option 2: Using service account key (simpler but less secure)
      - name: Google Auth via Service Account Key
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER == '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # Configure Docker to use gcloud credentials
      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io
      
      # Build and push the Docker image with reasonable defaults
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: your-service/Dockerfile  # Customize this path for your service
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
      
      # Deploy to Cloud Run with simplified configuration
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --set-env-vars=ENV=${{ github.event.inputs.environment || 'dev' }}
      
      # Show the deployed service URL
      - name: Show Output
        run: |
          echo "Service deployed successfully!"
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
