name: CI

on:
  pull_request:
  push:
    branches: [main]
  schedule:
    - cron: "0 4 * * *"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements/dev.txt
      - name: Run Make validate
        run: |
          make validate

  python-version-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Python version
        run: |
          PYVER=$(python3 --version | awk '{print $2}')
          MAJOR=$(echo $PYVER | cut -d. -f1)
          MINOR=$(echo $PYVER | cut -d. -f2)
          if [ "$MAJOR" -lt 3 ] || { [ "$MAJOR" -eq 3 ] && [ "$MINOR" -lt 10 ]; }; then
            echo "Python 3.10+ required, found $PYVER" >&2
            exit 1
          fi
          echo "Python version OK: $PYVER"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy
      - name: Run black
        run: |
          black --check .
      - name: Run flake8
        run: |
          flake8 .
      - name: Run mypy
        run: |
          mypy .

  admin-ui-lint-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Set up Node.js (pin to patch version for reproducibility, enable npm cache)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.1"
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd admin-ui
          npm ci
      - name: Lint admin-ui
        run: |
          set -euo pipefail
          cd admin-ui
          npm run lint
      - name: Build admin-ui
        run: |
          cd admin-ui
          npm run build

  pulumi-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Check for required secrets
        id: check-secrets
        run: |
          if [ -z "$PULUMI_ACCESS_TOKEN" ]; then
            echo "PULUMI_ACCESS_TOKEN is not set. Skipping Pulumi preview."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v4
        if: steps.check-secrets.outputs.skip != 'true'

      - name: Authenticate to Google Cloud
        if: steps.check-secrets.outputs.skip != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Python 3.10
        if: steps.check-secrets.outputs.skip != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Pulumi
        if: steps.check-secrets.outputs.skip != 'true'
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Configure Pulumi backend
        if: steps.check-secrets.outputs.skip != 'true'
        run: |
          # Use GCS backend if configured, otherwise use Pulumi service
          if [ -n "${{ secrets.PULUMI_GCS_BACKEND }}" ]; then
            pulumi login gs://cherry-ai-project-pulumi-state
          else
            pulumi login
          fi

      - name: Install Python dependencies
        if: steps.check-secrets.outputs.skip != 'true'
        run: |
          cd infra/admin_ui_site
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Pulumi preview (admin-ui)
        if: steps.check-secrets.outputs.skip != 'true'
        run: |
          cd infra/admin_ui_site
          pulumi stack select gcp/dev/admin-ui || pulumi stack init gcp/dev/admin-ui
          pulumi preview --non-interactive
