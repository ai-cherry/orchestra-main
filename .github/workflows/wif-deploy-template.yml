# GitHub Actions workflow template using Workload Identity Federation for GCP authentication
# This template demonstrates how to use WIF for secure authentication to Google Cloud
# Copy this file and customize it for your specific service

name: Deploy to Cloud Run with WIF

on:
  push:
    branches: [main]
    paths:
      - 'your-service/**'  # Customize this path for your service
      - '.github/workflows/your-workflow-name.yml'  # Update this to match your workflow filename
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: your-service-name  # Customize this for your service

jobs:
  test:
    name: Test Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        continue-on-error: false  # Fail workflow if checkout fails
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
        continue-on-error: false  # Fail workflow if Python setup fails
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
        continue-on-error: false  # Fail workflow if Poetry installation fails
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: your-service/.venv  # Customize this path for your service
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
        continue-on-error: true  # Continue workflow if cache fails
      
      - name: Install dependencies
        run: |
          cd your-service  # Customize this path for your service
          poetry install --no-interaction
        continue-on-error: false  # Fail workflow if dependency installation fails
      
      - name: Run tests
        run: |
          cd your-service  # Customize this path for your service
          poetry run pytest tests/ --cov=your-service
        continue-on-error: false  # Fail workflow if tests fail
  
  deploy:
    name: Deploy Service
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      contents: read
      id-token: write  # Required for requesting the JWT for WIF
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        continue-on-error: false  # Fail workflow if checkout fails
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
        continue-on-error: false  # Fail workflow if Python setup fails
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: your-service/.venv  # Customize this path for your service
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
        continue-on-error: true  # Continue workflow if cache fails
      
      - name: Install dependencies
        run: |
          cd your-service  # Customize this path for your service
          poetry install --no-interaction --no-dev
        continue-on-error: false  # Fail workflow if dependency installation fails
      
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi
      
      # Load environment-specific configurations
      - name: Load environment config
        run: |
          if [ -f "config/environments/${{ env.ENVIRONMENT }}.env" ]; then
            cat "config/environments/${{ env.ENVIRONMENT }}.env" >> $GITHUB_ENV
          else
            echo "No environment-specific config found for ${{ env.ENVIRONMENT }}"
            # Set default values if no environment config is found
            echo "MEMORY=1Gi" >> $GITHUB_ENV
            echo "CPU=1" >> $GITHUB_ENV
            echo "MIN_INSTANCES=0" >> $GITHUB_ENV
            echo "MAX_INSTANCES=10" >> $GITHUB_ENV
            echo "CONCURRENCY=80" >> $GITHUB_ENV
            echo "TIMEOUT=300s" >> $GITHUB_ENV
          fi
      
      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Google Auth via Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'
        continue-on-error: false  # Fail workflow if authentication fails
      
      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
        continue-on-error: false  # Fail workflow if gcloud setup fails
      
      # Configure Docker to use gcloud credentials
      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io
        continue-on-error: false  # Fail workflow if Docker authorization fails
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        continue-on-error: false  # Fail workflow if Buildx setup fails
      
      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: your-service/Dockerfile  # Customize this path for your service
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:latest
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ env.ENVIRONMENT }}
        continue-on-error: false  # Fail workflow if build/push fails
      
      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=${{ env.MEMORY }}
            --cpu=${{ env.CPU }}
            --min-instances=${{ env.MIN_INSTANCES }}
            --max-instances=${{ env.MAX_INSTANCES }}
            --concurrency=${{ env.CONCURRENCY }}
            --timeout=${{ env.TIMEOUT }}
            --set-env-vars=ENV=${{ env.ENVIRONMENT }},PROJECT_ID=${{ env.PROJECT_ID }}
      
      # Show the deployed service URL
      - name: Show Output
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
      
      # Verify deployment
      - name: Verify Deployment
        run: |
          echo "Verifying deployment at ${{ steps.deploy.outputs.url }}"
          # Wait for the service to be fully available
          sleep 15
          # Simple health check
          if curl -s "${{ steps.deploy.outputs.url }}/health"; then
            echo "Health check passed!"
            exit 0
          else
            echo "Health check failed!"
            # Fail the workflow if health check fails in production
            if [ "${{ env.ENVIRONMENT }}" == "prod" ]; then
              echo "Production deployment failed health check - failing workflow"
              exit 1
            else
              echo "Non-production deployment - continuing despite failed health check"
              exit 0
            fi
          fi
        continue-on-error: false  # Fail workflow if verification fails (based on the script logic)