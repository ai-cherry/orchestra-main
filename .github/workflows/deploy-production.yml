name: 🚀 Cherry AI Production Deployment
on:
  push:
    branches: [main]
    paths:
      - 'admin-interface/**'
      - 'infrastructure/**'
      - 'mcp_server/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PRODUCTION_SERVER: "45.32.69.157"
  STAGING_SERVER: "207.246.108.201"
  DATABASE_SERVER: "45.77.87.106"

jobs:
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Dependencies
        run: |
          npm install
          pip install -r requirements.txt
          
      - name: 🧪 Run Tests
        run: |
          npm test
          python -m pytest tests/ -v
          
      - name: 🔍 Security Scan
        run: |
          npm audit --audit-level=high
          pip-audit
          
      - name: 🏗️ Build Application
        run: |
          npm run build
          python setup.py build
          
      - name: 🔐 Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.PRODUCTION_SERVER }} >> ~/.ssh/known_hosts
          
      - name: 🚀 Deploy to Production
        env:
          # AI Service APIs
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          
          # Vector Databases
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          
          # Cloud Infrastructure
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PAPERSPACE_API_KEY: ${{ secrets.PAPERSPACE_API_KEY }}
          
          # Additional Services
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          PORTKEY_API_KEY: ${{ secrets.PORTKEY_API_KEY }}
          PORTKEY_CONFIG: ${{ secrets.PORTKEY_CONFIG }}
          REDIS_USER_API_KEY: ${{ secrets.REDIS_USER_API_KEY }}
          REDIS_ACCOUNT_KEY: ${{ secrets.REDIS_ACCOUNT_KEY }}
          
        run: |
          # Create deployment script with all environment variables
          cat > deploy_production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Cherry AI Production Deployment Started"
          echo "Server: $(hostname)"
          echo "Date: $(date)"
          
          # Update system packages
          apt update && apt upgrade -y
          
          # Install required packages
          apt install -y nginx redis-server python3-pip nodejs npm curl git
          
          # Start and enable services
          systemctl start nginx redis-server
          systemctl enable nginx redis-server
          
          # Create application directory
          mkdir -p /var/www/cherry-ai
          cd /var/www/cherry-ai
          
          # Clone latest code
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/ai-cherry/orchestra-main.git .
          fi
          
          # Install Python dependencies
          pip3 install -r requirements.txt
          
          # Install Node.js dependencies
          npm install
          
          # Build application
          npm run build || echo "No build script found"
          
          # Copy admin interface
          cp -r admin-interface/* /var/www/html/
          
          # Create environment file
          cat > /var/www/cherry-ai/.env << ENVEOF
          # Cherry AI Production Environment
          ENVIRONMENT=production
          DEBUG=false
          
          # AI Service APIs
          OPENAI_API_KEY=${OPENAI_API_KEY}
          ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
          GEMINI_API_KEY=${GEMINI_API_KEY}
          OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
          PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
          
          # Vector Databases
          WEAVIATE_URL=${WEAVIATE_URL}
          WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
          PINECONE_API_KEY=${PINECONE_API_KEY}
          
          # Cloud Infrastructure
          VULTR_API_KEY=${VULTR_API_KEY}
          PULUMI_ACCESS_TOKEN=${PULUMI_ACCESS_TOKEN}
          PAPERSPACE_API_KEY=${PAPERSPACE_API_KEY}
          
          # Additional Services
          NOTION_API_KEY=${NOTION_API_KEY}
          PORTKEY_API_KEY=${PORTKEY_API_KEY}
          PORTKEY_CONFIG=${PORTKEY_CONFIG}
          REDIS_USER_API_KEY=${REDIS_USER_API_KEY}
          REDIS_ACCOUNT_KEY=${REDIS_ACCOUNT_KEY}
          
          # Database Configuration
          POSTGRES_HOST=${DATABASE_SERVER}
          POSTGRES_PORT=5432
          POSTGRES_USER=orchestra
          POSTGRES_PASSWORD=orchestra_prod_2024
          POSTGRES_DB=cherry_ai
          
          # Redis Configuration
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_DB=0
          ENVEOF
          
          # Configure Nginx
          cat > /etc/nginx/sites-available/cherry-ai.me << 'NGINXEOF'
          server {
              listen 80;
              listen [::]:80;
              server_name cherry-ai.me www.cherry-ai.me;
              
              root /var/www/html;
              index index.html;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'" always;
              
              location / {
                  try_files $uri $uri/ =404;
              }
              
              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              location /mcp/ {
                  proxy_pass http://localhost:8001/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINXEOF
          
          # Enable site
          ln -sf /etc/nginx/sites-available/cherry-ai.me /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Test and reload Nginx
          nginx -t && systemctl reload nginx
          
          # Start MCP servers
          cd /var/www/cherry-ai/mcp_server
          python3 -m servers.enhanced_cherry_domain_server &
          python3 -m servers.ai_coding_assistant &
          python3 -m servers.prompt_management &
          
          echo "✅ Deployment completed successfully"
          echo "🌐 Website: http://cherry-ai.me"
          echo "📊 Status: $(systemctl is-active nginx) / $(systemctl is-active redis-server)"
          EOF
          
          # Make script executable
          chmod +x deploy_production.sh
          
          # Execute deployment on production server
          scp deploy_production.sh root@${{ env.PRODUCTION_SERVER }}:/tmp/
          ssh root@${{ env.PRODUCTION_SERVER }} "bash /tmp/deploy_production.sh"
          
      - name: 🧪 Health Check
        run: |
          sleep 30
          curl -f http://${{ env.PRODUCTION_SERVER }} || exit 1
          echo "✅ Health check passed"
          
      - name: 📢 Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "🌐 Website: http://cherry-ai.me"
            echo "📊 All services operational"
          else
            echo "❌ Deployment failed"
            echo "📋 Check logs for details"
          fi

