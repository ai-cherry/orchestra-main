name: Deploy with Service Account Key

on:
  push:
    branches: [main]
    paths:
      - 'mcp_server/**'
      - '.github/workflows/key-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: mcp-server

jobs:
  test:
    name: Test MCP Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: mcp_server/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      
      - name: Install dependencies
        run: |
          cd mcp_server
          poetry install --no-interaction
      
      - name: Run tests
        run: |
          cd mcp_server
          poetry run pytest tests/ --cov=mcp_server
  
  deploy:
    name: Deploy MCP Server
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: mcp_server/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      
      - name: Install dependencies
        run: |
          cd mcp_server
          poetry install --no-interaction --no-dev
      
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi
      
      # Load environment-specific configurations
      - name: Load environment config
        run: |
          if [ -f "config/environments/${{ env.ENVIRONMENT }}.env" ]; then
            cat "config/environments/${{ env.ENVIRONMENT }}.env" >> $GITHUB_ENV
          else
            echo "No environment-specific config found for ${{ env.ENVIRONMENT }}"
          fi
      
      # Set up service account key
      - name: Set up GCP service account key
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > service-account-key.json
      
      # Authenticate to Google Cloud using service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # Configure Docker to use gcloud credentials
      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: mcp_server/Dockerfile.optimized
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:latest
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ env.ENVIRONMENT }}
      
      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=${{ env.MEMORY || '1Gi' }}
            --cpu=${{ env.CPU || '1' }}
            --min-instances=${{ env.MIN_INSTANCES || '0' }}
            --max-instances=${{ env.MAX_INSTANCES || '10' }}
            --concurrency=80
            --timeout=300s
            --set-env-vars=ENV=${{ env.ENVIRONMENT }},PROJECT_ID=${{ env.PROJECT_ID }}
      
      # Show the deployed service URL
      - name: Show Output
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
      
      # Verify deployment
      - name: Verify Deployment
        run: |
          echo "Verifying deployment at ${{ steps.deploy.outputs.url }}"
          # Wait for the service to be fully available
          sleep 15
          # Simple health check
          if curl -s "${{ steps.deploy.outputs.url }}/health"; then
            echo "Health check passed!"
          else
            echo "Health check failed, but continuing deployment"
          fi