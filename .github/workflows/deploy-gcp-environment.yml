name: Deploy GCP Environment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_infra:
        description: 'Deploy infrastructure'
        required: false
        default: true
        type: boolean
      deploy_app:
        description: 'Deploy application'
        required: false
        default: true
        type: boolean
      deploy_data_sync:
        description: 'Deploy data sync pipeline'
        required: false
        default: true
        type: boolean

env:
  PROJECT_ID: cherry-ai-project
  REGION: us-central1
  SERVICE_NAME: orchestra-api
  BUCKET_NAME: cherry-ai-project-migration

jobs:
  setup-and-deploy:
    name: Setup and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.VERTEX_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ env.PROJECT_ID }}

      # Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Verify authentication
      - name: Verify authentication
        run: |
          gcloud auth list
          gcloud config list project
          gcloud projects describe ${{ env.PROJECT_ID }}

      # Deploy infrastructure if requested
      - name: Deploy infrastructure
        if: ${{ github.event.inputs.deploy_infra == 'true' || github.event_name == 'push' }}
        run: |
          echo "Deploying infrastructure for environment: ${{ github.event.inputs.environment || 'dev' }}"
          
          # Enable required APIs
          gcloud services enable aiplatform.googleapis.com
          gcloud services enable secretmanager.googleapis.com
          gcloud services enable iam.googleapis.com
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud services enable workstations.googleapis.com
          
          # Set up Terraform
          cd terraform
          terraform init
          
          # Apply Terraform with appropriate variables
          terraform apply -auto-approve \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var="env=${{ github.event.inputs.environment || 'dev' }}"
          
          cd ..

      # Set up Vertex AI resources
      - name: Set up Vertex AI resources
        if: ${{ github.event.inputs.deploy_infra == 'true' || github.event_name == 'push' }}
        run: |
          echo "Setting up Vertex AI resources"
          
          # Use our Python utility to set up Vertex AI
          python vertex_ai_setup.py setup \
            --project-id ${{ env.PROJECT_ID }} \
            --region ${{ env.REGION }} \
            --service-account ${{ secrets.VERTEX_SERVICE_ACCOUNT_EMAIL }}
          
          # Create a notebook instance if needed
          python vertex_ai_setup.py create-notebook \
            --name ai-orchestra-notebook-${{ github.event.inputs.environment || 'dev' }} \
            --machine-type n1-standard-8 \
            --accelerator-type NVIDIA_TESLA_T4 \
            --accelerator-count 1

      # Deploy application to Cloud Run if requested
      - name: Deploy application to Cloud Run
        if: ${{ github.event.inputs.deploy_app == 'true' || github.event_name == 'push' }}
        run: |
          echo "Deploying application to Cloud Run"
          
          # Build and deploy to Cloud Run
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }}" \
            --set-env-vars="ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}" \
            --service-account ${{ secrets.VERTEX_SERVICE_ACCOUNT_EMAIL }}
          
          # Get the URL of the deployed service
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "Deployed service URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      # Deploy data sync pipeline if requested
      - name: Deploy data sync pipeline
        if: ${{ github.event.inputs.deploy_data_sync == 'true' || github.event_name == 'push' }}
        run: |
          echo "Deploying data sync pipeline"
          
          # Submit Cloud Build configuration
          gcloud builds submit --config cloudbuild_data_sync.yaml \
            --substitutions=_BUCKET="${{ env.BUCKET_NAME }}",_ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}",_DIRECTION="push",_ENV="${{ github.event.inputs.environment || 'dev' }}"
          
          # Verify the build was submitted
          echo "Cloud Build job submitted for data sync pipeline"

      # Verify deployment
      - name: Verify deployment
        run: |
          echo "Verifying deployment"
          
          # List Cloud Run services
          gcloud run services list --platform managed --region ${{ env.REGION }}
          
          # List Vertex AI resources
          python vertex_ai_setup.py list-resources
          
          # List Cloud Build jobs
          gcloud builds list --limit 5
          
          echo "Deployment verification complete"

      # Post deployment summary
      - name: Post deployment summary
        run: |
          echo "# Deployment Summary" > deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Environment" >> deployment_summary.md
          echo "- Project ID: ${{ env.PROJECT_ID }}" >> deployment_summary.md
          echo "- Region: ${{ env.REGION }}" >> deployment_summary.md
          echo "- Environment: ${{ github.event.inputs.environment || 'dev' }}" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Deployed Resources" >> deployment_summary.md
          echo "- Cloud Run Service: ${{ env.SERVICE_NAME }}" >> deployment_summary.md
          echo "- Service URL: ${{ env.SERVICE_URL }}" >> deployment_summary.md
          echo "- Vertex AI Resources: Configured" >> deployment_summary.md
          echo "- Data Sync Pipeline: Deployed" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Next Steps" >> deployment_summary.md
          echo "1. Access your application at: ${{ env.SERVICE_URL }}" >> deployment_summary.md
          echo "2. Monitor logs in Cloud Logging" >> deployment_summary.md
          echo "3. Check Cloud Build history for data sync pipeline status" >> deployment_summary.md
          
          cat deployment_summary.md