name: Deploy Orchestra AI (including Admin UI)

on:
  push:
    branches: [main]
    tags-ignore: ['v*.*.*'] # Dev deployment ignores tags
  pull_request: # Run build and tests on PRs to any branch
  workflow_dispatch: # Allow manual triggering for any job, including prod
  schedule:
    - cron: '0 3 * * *' # Nightly at 3am UTC

jobs:
  pre-commit:
    name: Pre-commit Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  build-and-test-admin-ui:
    name: Build and Test Admin UI
    runs-on: ubuntu-latest
    needs: pre-commit
    outputs:
      admin_ui_built: ${{ steps.build_step.outputs.admin_ui_built }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Admin UI - Install Dependencies
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile

      - name: Admin UI - Lint
        working-directory: ./admin-ui
        run: pnpm lint

      - name: Admin UI - Unit Tests
        working-directory: ./admin-ui
        run: pnpm test

      # Set NODE_ENV=production explicitly for the build step
      - name: Admin UI - Build
        id: build_step
        working-directory: ./admin-ui
        env:
          NODE_ENV: production
        run: |
          # IMPORTANT: We explicitly set NODE_ENV=production to ensure CSS is properly included
          # This fixes the "blank white screen" issue where CSS was missing from the build
          pnpm build
          echo "admin_ui_built=true" >> "$GITHUB_OUTPUT"

      # Add verification step to check for properly sized JS and CSS files
      - name: Verify Admin UI Build Output
        working-directory: ./admin-ui
        run: |
          echo "Verifying build output..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "::error::Build directory not found at dist/"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f "dist/index.html" ]; then
            echo "::error::index.html not found in build directory"
            exit 1
          fi
          
          # Check for assets directory
          if [ ! -d "dist/assets" ]; then
            echo "::error::assets directory not found in build directory"
            exit 1
          fi
          
          # Find JS files
          JS_FILES=$(find "dist/assets" -name "*.js" -type f)
          JS_COUNT=$(echo "$JS_FILES" | grep -c "\.js$" || true)
          
          if [ "$JS_COUNT" -eq 0 ]; then
            echo "::error::No JavaScript files found in assets directory"
            exit 1
          fi
          
          echo "Found $JS_COUNT JavaScript file(s)"
          
          # Find CSS files
          CSS_FILES=$(find "dist/assets" -name "*.css" -type f)
          CSS_COUNT=$(echo "$CSS_FILES" | grep -c "\.css$" || true)
          
          if [ "$CSS_COUNT" -eq 0 ]; then
            echo "::error::No CSS files found in assets directory"
            exit 1
          fi
          
          echo "Found $CSS_COUNT CSS file(s)"
          
          # Check JS file sizes (minimum 100KB expected)
          MIN_JS_SIZE=100000
          for js_file in $JS_FILES; do
            js_size=$(stat -c%s "$js_file" 2>/dev/null || stat -f%z "$js_file")
            js_name=$(basename "$js_file")
            
            if [ "$js_size" -lt "$MIN_JS_SIZE" ]; then
              echo "::error::JavaScript file $js_name is too small: $js_size bytes (expected min. $MIN_JS_SIZE bytes)"
              echo "This indicates a build issue. The JS bundle is incomplete."
              exit 1
            else
              echo "JavaScript file $js_name size: $js_size bytes"
            fi
          done
          
          # Check CSS file sizes (minimum 10KB expected)
          MIN_CSS_SIZE=10000
          for css_file in $CSS_FILES; do
            css_size=$(stat -c%s "$css_file" 2>/dev/null || stat -f%z "$css_file")
            css_name=$(basename "$css_file")
            
            if [ "$css_size" -lt "$MIN_CSS_SIZE" ]; then
              echo "::error::CSS file $css_name is too small: $css_size bytes (expected min. $MIN_CSS_SIZE bytes)"
              echo "This indicates a build issue. The CSS is incomplete."
              exit 1
            else
              echo "CSS file $css_name size: $css_size bytes"
            fi
          done
          
          # Check index.html for references to JS and CSS
          index_content=$(cat "dist/index.html")
          
          # Check for JS references
          if ! echo "$index_content" | grep -q "src=\"/assets/.*\.js\""; then
            echo "::error::No JavaScript file references found in index.html"
            exit 1
          fi
          
          echo "JavaScript references found in index.html"
          
          # Check for CSS references
          if ! echo "$index_content" | grep -q "href=\"/assets/.*\.css\""; then
            echo "::error::No CSS file references found in index.html"
            exit 1
          fi
          
          echo "CSS references found in index.html"
          echo "Build verification complete! All checks passed."

      - name: Admin UI - E2E Tests (against local dev server)
        working-directory: ./admin-ui
        run: pnpm e2e # This runs Playwright against localhost as per playwright.config.ts default

      # Enhanced artifact preservation for both successful and failed builds
      - name: Upload Admin UI Build Artifact
        uses: actions/upload-artifact@v4
        if: always() # Upload artifacts even if the build fails
        with:
          name: admin-ui-dist
          path: admin-ui/dist/
          if-no-files-found: warn # Changed from error to warn to prevent workflow failure
          retention-days: 7 # Set retention period

      # Add detailed error logs for failed builds
      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: admin-ui-build-logs
          path: |
            admin-ui/node_modules/.pnpm/debug.log
            admin-ui/*.log
            admin-ui/npm-debug.log*
            admin-ui/pnpm-debug.log*
          if-no-files-found: ignore
          retention-days: 7

  deploy-to-dev:
    name: Deploy to Dev Environment
    needs: build-and-test-admin-ui
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.build-and-test-admin-ui.outputs.admin_ui_built == 'true'
    runs-on: ubuntu-latest
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      DRAGONFLY_URI: ${{ secrets.DRAGONFLY_URI }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
      MONGODB_SERVICE_CLIENT_ID: ${{ secrets.MONGODB_SERVICE_CLIENT_ID }}
      MONGODB_SERVICE_CLIENT_SECRET: ${{ secrets.MONGODB_SERVICE_CLIENT_SECRET }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      DO_ROOT_PASSWORD: ${{ secrets.DO_ROOT_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Admin UI Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-ui-dist
          path: admin-ui/dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - name: Install infra dependencies
        working-directory: ./infra
        run: pip install -r ../requirements/base.txt

      - name: Login to Pulumi
        run: pulumi login

      - name: Configure Pulumi for Dev
        working-directory: ./infra
        run: |
          pulumi stack select dev --create
          pulumi config set --secret digitalocean:token "$DIGITALOCEAN_TOKEN"
          # dev environment can set custom domain if desired
          pulumi config set env dev

      - name: Deploy to Dev with Pulumi
        id: pulumi_deploy_dev
        working-directory: ./infra
        run: |
          pulumi up --yes

      - name: Get Dev Pulumi Outputs
        id: pulumi_outputs_dev
        working-directory: ./infra
        run: |
          echo "admin_ui_dev_url=$(pulumi stack output admin_ui_live_url)" >> $GITHUB_OUTPUT

  deploy-to-prod:
    name: Deploy to Production Environment
    needs: build-and-test-admin-ui
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))) && needs.build-and-test-admin-ui.outputs.admin_ui_built == 'true'
    runs-on: ubuntu-latest
    environment: production
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_PROD_CONFIG_PASSPHRASE || secrets.PULUMI_CONFIG_PASSPHRASE }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_PROD || secrets.OPENAI_API_KEY }}
      WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY_PROD || secrets.WEAVIATE_API_KEY }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING_PROD || secrets.MONGODB_CONNECTION_STRING }}
      DRAGONFLY_URI: ${{ secrets.DRAGONFLY_URI_PROD || secrets.DRAGONFLY_URI }}
      MONGO_URI: ${{ secrets.MONGO_URI_PROD || secrets.MONGO_URI }}
      WEAVIATE_URL: ${{ secrets.WEAVIATE_URL_PROD || secrets.WEAVIATE_URL }}
      MONGODB_SERVICE_CLIENT_ID: ${{ secrets.MONGODB_SERVICE_CLIENT_ID_PROD || secrets.MONGODB_SERVICE_CLIENT_ID }}
      MONGODB_SERVICE_CLIENT_SECRET: ${{ secrets.MONGODB_SERVICE_CLIENT_SECRET_PROD || secrets.MONGODB_SERVICE_CLIENT_SECRET }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD_PROD || secrets.GRAFANA_ADMIN_PASSWORD }}
      DO_ROOT_PASSWORD: ${{ secrets.DO_ROOT_PASSWORD_PROD || secrets.DO_ROOT_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Admin UI Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-ui-dist
          path: admin-ui/dist

      # Verify the downloaded build artifacts before deployment
      - name: Verify Downloaded Build Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          
          # Check if dist directory exists
          if [ ! -d "admin-ui/dist" ]; then
            echo "::error::Build directory not found at admin-ui/dist/"
            exit 1
          fi
          
          # Check if index.html exists
          if [ ! -f "admin-ui/dist/index.html" ]; then
            echo "::error::index.html not found in build directory"
            exit 1
          fi
          
          # Check for assets directory
          if [ ! -d "admin-ui/dist/assets" ]; then
            echo "::error::assets directory not found in build directory"
            exit 1
          fi
          
          # Find JS and CSS files
          JS_FILES=$(find "admin-ui/dist/assets" -name "*.js" -type f)
          CSS_FILES=$(find "admin-ui/dist/assets" -name "*.css" -type f)
          
          echo "Found JS files: $JS_FILES"
          echo "Found CSS files: $CSS_FILES"
          
          # Check if index.html contains references to JS and CSS
          if ! grep -q "assets/.*\.js" "admin-ui/dist/index.html"; then
            echo "::error::No JavaScript file references found in index.html"
            cat "admin-ui/dist/index.html"
            exit 1
          fi
          
          if ! grep -q "assets/.*\.css" "admin-ui/dist/index.html"; then
            echo "::error::No CSS file references found in index.html"
            cat "admin-ui/dist/index.html"
            exit 1
          fi
          
          echo "Build artifacts verified successfully!"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - name: Install infra dependencies
        working-directory: ./infra
        run: pip install -r ../requirements/base.txt

      - name: Login to Pulumi
        run: pulumi login

      - name: Configure Pulumi for Prod
        working-directory: ./infra
        run: |
          pulumi stack select prod --create
          pulumi config set --secret digitalocean:token "$DIGITALOCEAN_TOKEN"
          pulumi config set adminUiCustomDomain cherry-ai.me
          pulumi config set env prod

      - name: Deploy to Production with Pulumi
        id: pulumi_deploy_prod # Step ID to reference outputs if needed by other steps in this job
        working-directory: ./infra
        run: |
          pulumi up --yes

      - name: Get Prod Pulumi Outputs for Environment URL
        id: pulumi_outputs_prod # This ID is used by environment.url
        working-directory: ./infra
        run: |
          echo "admin_ui_prod_url=$(pulumi stack output admin_ui_live_url)" >> $GITHUB_OUTPUT

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm for Playwright
        run: npm install -g pnpm

      - name: Admin UI - Install Dependencies for Playwright
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile # Need Playwright and browsers

      - name: Install Playwright Browsers
        working-directory: ./admin-ui
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright E2E Tests on Production
        if: steps.pulumi_outputs_prod.outputs.admin_ui_prod_url != '' # Only run if URL is available
        working-directory: ./admin-ui
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.pulumi_outputs_prod.outputs.admin_ui_prod_url }}
        run: pnpm e2e # This will use PLAYWRIGHT_BASE_URL due to playwright.config.ts modification

      - name: Upload Playwright E2E Report (Production)
        if: always() # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-prod
          path: admin-ui/playwright-report/ # Default Playwright HTML report path
          retention-days: 7

      # Add post-deployment verification step
      - name: Verify Production Deployment
        if: success()
        run: |
          echo "Verifying production deployment at https://cherry-ai.me"
          
          # Wait for DNS propagation and deployment to stabilize
          sleep 30
          
          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://cherry-ai.me")
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Site is accessible (HTTP 200)"
            
            # Check for blank page (should have content)
            CONTENT_SIZE=$(curl -s "https://cherry-ai.me" | wc -c)
            echo "Content size: $CONTENT_SIZE bytes"
            
            if [ "$CONTENT_SIZE" -lt 500 ]; then
              echo "::warning::Site content is suspiciously small ($CONTENT_SIZE bytes). Possible blank page issue."
            else
              echo "Content size looks good"
            fi
            
            # Check for CSS and JS references
            SITE_CONTENT=$(curl -s "https://cherry-ai.me")
            
            if echo "$SITE_CONTENT" | grep -q "assets/.*\.js"; then
              echo "JavaScript reference found in the HTML"
            else
              echo "::warning::No JavaScript reference found in the HTML. Possible build issue."
            fi
            
            if echo "$SITE_CONTENT" | grep -q "assets/.*\.css"; then
              echo "CSS reference found in the HTML"
            else
              echo "::warning::No CSS reference found in the HTML. Possible build issue."
            fi
          else
            echo "::warning::Site returned HTTP status $HTTP_STATUS. Deployment may not be fully complete."
          fi

  nightly-e2e:
    name: Nightly Playwright E2E (Dev)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Admin UI - Install Dependencies
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile
      - name: Install Playwright Browsers
        working-directory: ./admin-ui
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright E2E Tests (Dev)
        working-directory: ./admin-ui
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.ADMIN_UI_DEV_URL }}
        run: pnpm e2e
      - name: Upload Playwright E2E Report (Nightly)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-nightly
          path: admin-ui/playwright-report/
          retention-days: 7
