name: Deploy Orchestra AI (including Admin UI)

on:
  push:
    branches: [main]
    tags-ignore: ['v*.*.*'] # Dev deployment ignores tags
  pull_request: # Run build and tests on PRs to any branch
  workflow_dispatch: # Allow manual triggering for any job, including prod
  schedule:
    - cron: '0 3 * * *' # Nightly at 3am UTC

jobs:
  pre-commit:
    name: Pre-commit Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  build-and-test-admin-ui:
    name: Build and Test Admin UI
    runs-on: ubuntu-latest
    needs: pre-commit
    outputs:
      admin_ui_built: ${{ steps.build_step.outputs.admin_ui_built }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Admin UI - Install Dependencies
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile

      - name: Admin UI - Lint
        working-directory: ./admin-ui
        run: pnpm lint

      - name: Admin UI - Unit Tests
        working-directory: ./admin-ui
        run: pnpm test

      - name: Admin UI - Build
        id: build_step
        working-directory: ./admin-ui
        run: |
          pnpm build
          echo "admin_ui_built=true" >> "$GITHUB_OUTPUT"

      - name: Admin UI - E2E Tests (against local dev server)
        working-directory: ./admin-ui
        run: pnpm e2e # This runs Playwright against localhost as per playwright.config.ts default

      - name: Upload Admin UI Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: admin-ui-dist
          path: admin-ui/dist/
          if-no-files-found: error

  deploy-to-dev:
    name: Deploy to Dev Environment
    needs: build-and-test-admin-ui
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.build-and-test-admin-ui.outputs.admin_ui_built == 'true'
    runs-on: ubuntu-latest
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      DRAGONFLY_URI: ${{ secrets.DRAGONFLY_URI }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
      MONGODB_SERVICE_CLIENT_ID: ${{ secrets.MONGODB_SERVICE_CLIENT_ID }}
      MONGODB_SERVICE_CLIENT_SECRET: ${{ secrets.MONGODB_SERVICE_CLIENT_SECRET }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      DO_ROOT_PASSWORD: ${{ secrets.DO_ROOT_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Admin UI Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-ui-dist
          path: admin-ui/dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - name: Install infra dependencies
        working-directory: ./infra
        run: pip install -r ../requirements/base.txt

      - name: Login to Pulumi
        run: pulumi login

      - name: Configure Pulumi for Dev
        working-directory: ./infra
        run: |
          pulumi stack select dev --create
          pulumi config set --secret digitalocean:token "$DIGITALOCEAN_TOKEN"
          # dev environment can set custom domain if desired
          pulumi config set env dev

      - name: Deploy to Dev with Pulumi
        id: pulumi_deploy_dev
        working-directory: ./infra
        run: |
          pulumi up --yes

      - name: Get Dev Pulumi Outputs
        id: pulumi_outputs_dev
        working-directory: ./infra
        run: |
          echo "admin_ui_dev_url=$(pulumi stack output admin_ui_live_url)" >> $GITHUB_OUTPUT

  deploy-to-prod:
    name: Deploy to Production Environment
    needs: build-and-test-admin-ui
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))) && needs.build-and-test-admin-ui.outputs.admin_ui_built == 'true'
    runs-on: ubuntu-latest
    environment: production
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_PROD_CONFIG_PASSPHRASE || secrets.PULUMI_CONFIG_PASSPHRASE }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_PROD || secrets.OPENAI_API_KEY }}
      WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY_PROD || secrets.WEAVIATE_API_KEY }}
      MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING_PROD || secrets.MONGODB_CONNECTION_STRING }}
      DRAGONFLY_URI: ${{ secrets.DRAGONFLY_URI_PROD || secrets.DRAGONFLY_URI }}
      MONGO_URI: ${{ secrets.MONGO_URI_PROD || secrets.MONGO_URI }}
      WEAVIATE_URL: ${{ secrets.WEAVIATE_URL_PROD || secrets.WEAVIATE_URL }}
      MONGODB_SERVICE_CLIENT_ID: ${{ secrets.MONGODB_SERVICE_CLIENT_ID_PROD || secrets.MONGODB_SERVICE_CLIENT_ID }}
      MONGODB_SERVICE_CLIENT_SECRET: ${{ secrets.MONGODB_SERVICE_CLIENT_SECRET_PROD || secrets.MONGODB_SERVICE_CLIENT_SECRET }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD_PROD || secrets.GRAFANA_ADMIN_PASSWORD }}
      DO_ROOT_PASSWORD: ${{ secrets.DO_ROOT_PASSWORD_PROD || secrets.DO_ROOT_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Admin UI Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: admin-ui-dist
          path: admin-ui/dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2

      - name: Install infra dependencies
        working-directory: ./infra
        run: pip install -r ../requirements/base.txt

      - name: Login to Pulumi
        run: pulumi login

      - name: Configure Pulumi for Prod
        working-directory: ./infra
        run: |
          pulumi stack select prod --create
          pulumi config set --secret digitalocean:token "$DIGITALOCEAN_TOKEN"
          pulumi config set adminUiCustomDomain cherry-ai.me
          pulumi config set env prod

      - name: Deploy to Production with Pulumi
        id: pulumi_deploy_prod # Step ID to reference outputs if needed by other steps in this job
        working-directory: ./infra
        run: |
          pulumi up --yes

      - name: Get Prod Pulumi Outputs for Environment URL
        id: pulumi_outputs_prod # This ID is used by environment.url
        working-directory: ./infra
        run: |
          echo "admin_ui_prod_url=$(pulumi stack output admin_ui_live_url)" >> $GITHUB_OUTPUT

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm for Playwright
        run: npm install -g pnpm

      - name: Admin UI - Install Dependencies for Playwright
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile # Need Playwright and browsers

      - name: Install Playwright Browsers
        working-directory: ./admin-ui
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright E2E Tests on Production
        if: steps.pulumi_outputs_prod.outputs.admin_ui_prod_url != '' # Only run if URL is available
        working-directory: ./admin-ui
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.pulumi_outputs_prod.outputs.admin_ui_prod_url }}
        run: pnpm e2e # This will use PLAYWRIGHT_BASE_URL due to playwright.config.ts modification

      - name: Upload Playwright E2E Report (Production)
        if: always() # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-prod
          path: admin-ui/playwright-report/ # Default Playwright HTML report path
          retention-days: 7

  nightly-e2e:
    name: Nightly Playwright E2E (Dev)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Admin UI - Install Dependencies
        working-directory: ./admin-ui
        run: pnpm install --frozen-lockfile
      - name: Install Playwright Browsers
        working-directory: ./admin-ui
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright E2E Tests (Dev)
        working-directory: ./admin-ui
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.ADMIN_UI_DEV_URL }}
        run: pnpm e2e
      - name: Upload Playwright E2E Report (Nightly)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-nightly
          path: admin-ui/playwright-report/
          retention-days: 7
