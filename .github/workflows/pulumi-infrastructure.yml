name: Orchestra AI - Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pulumi[automation]
          
      - name: Setup Pulumi
        uses: pulumi/actions@v4
        
      - name: Deploy Preview
        run: |
          python -c "
          import asyncio
          from pulumi.ci_cd_automation import PulumiAutomationOrchestrator
          
          async def main():
              orchestrator = PulumiAutomationOrchestrator()
              result = await orchestrator.deploy_preview('${{ github.head_ref }}')
              print(f'Preview URL: {result.get(\"preview_url\", \"N/A\")}')
          
          asyncio.run(main())
          "
          
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview deployment completed! Check the logs for the preview URL.'
            })

  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pulumi[automation]
          
      - name: Setup Pulumi
        uses: pulumi/actions@v4
        
      - name: Deploy Production
        run: |
          python -c "
          import asyncio
          from pulumi.ci_cd_automation import PulumiAutomationOrchestrator
          
          async def main():
              orchestrator = PulumiAutomationOrchestrator()
              result = await orchestrator.deploy_production()
              print(f'Production deployment: {result[\"status\"]}')
              if result[\"status\"] == \"success\":
                  print(f'Vercel URL: {result[\"outputs\"].get(\"vercel_production_url\", {}).get(\"value\", \"N/A\")}')
          
          asyncio.run(main())
          "

  cleanup:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pulumi[automation]
          
      - name: Setup Pulumi
        uses: pulumi/actions@v4
        
      - name: Destroy Preview
        run: |
          python -c "
          import asyncio
          from pulumi.ci_cd_automation import PulumiAutomationOrchestrator
          
          async def main():
              orchestrator = PulumiAutomationOrchestrator()
              result = await orchestrator.destroy_preview('${{ github.head_ref }}')
              print(f'Preview cleanup: {result[\"status\"]}')
          
          asyncio.run(main())
          "

