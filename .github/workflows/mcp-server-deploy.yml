name: MCP Server Build and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'mcp_server/**'
      - 'setup.py'
      - '.github/workflows/mcp-server-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'mcp_server/**'
      - 'setup.py'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: cherry-ai-project
  REGION: us-central1
  SERVICE_NAME: mcp-server

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        working-directory: ./mcp_server
        run: |
          poetry install
      
      - name: Lint with flake8
        working-directory: ./mcp_server
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Test with pytest
        working-directory: ./mcp_server
        run: |
          poetry run pytest tests/ --cov=mcp_server
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'
      
      - name: Google Auth via Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker gcr.io
      
      - name: Build Docker image
        run: |
          # Copy pyproject.toml to the expected location for the Docker build
          cp mcp_server/pyproject.toml .
          # Build the Docker image
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} -f mcp_server/scripts/Dockerfile .
      
      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
  
  deploy-dev:
    name: Deploy to Development
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Google Auth via Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}-dev
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: |
            LOG_LEVEL=DEBUG
      
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
  
  deploy-prod:
    name: Deploy to Production
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Google Auth via Workload Identity Federation
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}-prod
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: |
            LOG_LEVEL=INFO
          secrets: |
            GEMINI_API_KEY=mcp-gemini-api-key:latest
      
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}