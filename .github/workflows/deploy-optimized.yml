name: Deploy Optimized AI Orchestra

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run linting and tests
        run: |
          poetry run flake8 .
          poetry run pytest tests/

  authenticate:
    name: Authenticate to Google Cloud
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Verify authentication
        run: gcloud auth list

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [setup, authenticate]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure Docker to use gcloud credentials
        run: gcloud auth configure-docker gcr.io
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-api:latest,gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ env.ENVIRONMENT }}
      
      - name: Build and push MCP image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-mcp:latest,gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ env.ENVIRONMENT }}
      
      - name: Build and push Phidata image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/agents/phidata-agent.Dockerfile
          push: true
          tags: gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-phidata:latest,gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-phidata:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENV=${{ env.ENVIRONMENT }}

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [setup, authenticate, build-and-push]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.REGION }}" -var="env=${{ env.ENVIRONMENT }}"
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.REGION }}" -var="env=${{ env.ENVIRONMENT }}"

  deploy-services:
    name: Deploy Services to Cloud Run
    runs-on: ubuntu-latest
    needs: [setup, authenticate, build-and-push, deploy-infrastructure]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Deploy API Service
        run: |
          gcloud run deploy ai-orchestra-api-${{ env.ENVIRONMENT }} \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-api:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 5m \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }},REGION=${{ env.REGION }},WORKERS=2,WORKER_CONNECTIONS=1000" \
            --allow-unauthenticated
      
      - name: Deploy MCP Service
        run: |
          gcloud run deploy ai-orchestra-mcp-${{ env.ENVIRONMENT }} \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-mcp:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 4Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 5m \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }},REGION=${{ env.REGION }},WORKERS=2,WORKER_CONNECTIONS=1000" \
            --allow-unauthenticated
      
      - name: Deploy Phidata Service
        run: |
          gcloud run deploy ai-orchestra-phidata-${{ env.ENVIRONMENT }} \
            --image gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-phidata:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 4Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 5m \
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }},REGION=${{ env.REGION }}" \
            --allow-unauthenticated

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [setup, deploy-services]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Get Service URLs
        id: get-urls
        run: |
          API_URL=$(gcloud run services describe ai-orchestra-api-${{ env.ENVIRONMENT }} --region ${{ env.REGION }} --format='value(status.url)')
          MCP_URL=$(gcloud run services describe ai-orchestra-mcp-${{ env.ENVIRONMENT }} --region ${{ env.REGION }} --format='value(status.url)')
          PHIDATA_URL=$(gcloud run services describe ai-orchestra-phidata-${{ env.ENVIRONMENT }} --region ${{ env.REGION }} --format='value(status.url)')
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "mcp_url=$MCP_URL" >> $GITHUB_OUTPUT
          echo "phidata_url=$PHIDATA_URL" >> $GITHUB_OUTPUT
      
      - name: Verify Deployment
        run: |
          echo "Verifying API deployment at ${{ steps.get-urls.outputs.api_url }}"
          curl -s "${{ steps.get-urls.outputs.api_url }}/health" | grep -q "healthy" || exit 1
          
          echo "Verifying MCP deployment at ${{ steps.get-urls.outputs.mcp_url }}"
          curl -s "${{ steps.get-urls.outputs.mcp_url }}/health" || exit 1
          
          echo "Verifying Phidata deployment at ${{ steps.get-urls.outputs.phidata_url }}"
          curl -s "${{ steps.get-urls.outputs.phidata_url }}/health" || exit 1
      
      - name: Create Deployment Summary
        run: |
          echo "# Deployment Summary" > deployment-summary.md
          echo "Environment: ${{ env.ENVIRONMENT }}" >> deployment-summary.md
          echo "Project: ${{ env.PROJECT_ID }}" >> deployment-summary.md
          echo "Region: ${{ env.REGION }}" >> deployment-summary.md
          echo "Commit: ${{ github.sha }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Service URLs" >> deployment-summary.md
          echo "- API: ${{ steps.get-urls.outputs.api_url }}" >> deployment-summary.md
          echo "- MCP Server: ${{ steps.get-urls.outputs.mcp_url }}" >> deployment-summary.md
          echo "- Phidata Agent: ${{ steps.get-urls.outputs.phidata_url }}" >> deployment-summary.md
      
      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md