name: Test Environment Manager

on:
  push:
    paths:
      - 'environment_manager.py'
      - 'tests/test_environment_manager.py'
      - '.github/workflows/test-environment-manager.yml'
  pull_request:
    paths:
      - 'environment_manager.py'
      - 'tests/test_environment_manager.py'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Environment Manager Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock pytest-cov
          
          # Make environment_manager.py executable
          chmod +x environment_manager.py
      
      - name: Run tests
        run: |
          pytest tests/test_environment_manager.py -v --cov=environment_manager --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
      
      - name: Run static analysis
        run: |
          pip install mypy ruff black
          
          # Run type checking
          mypy environment_manager.py
          
          # Run linting
          ruff check environment_manager.py
          
          # Check formatting
          black --check environment_manager.py
      
      - name: Test functionality
        run: |
          # Create a test .env.development file
          echo "# DEV Environment" > .env.development
          echo "ACTIVE=true" >> .env.development
          echo "AI_ORCHESTRA_ENV=dev" >> .env.development
          
          # Run environment status check
          python environment_manager.py status
          
          # Test workspace optimization
          python environment_manager.py optimize-workspace
          
          # Test repository size analysis
          python environment_manager.py repo-size
          
          # Test cleanup (dry run)
          python environment_manager.py cleanup
