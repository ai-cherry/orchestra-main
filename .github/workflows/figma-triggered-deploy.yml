name: Figma-Triggered Deployment

# Trigger on repository_dispatch events from Figma webhook
on:
  repository_dispatch:
    types: 
      - figma_file_update
      - figma_version_update
      - figma_library_publish

jobs:
  process-figma-changes:
    name: Process Figma Design Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci || npm install
          npm install -g @figma/rest-api-spec
      
      - name: Log Figma event details
        run: |
          echo "Figma Event Type: ${{ github.event.client_payload.figma_event_type }}"
          echo "Figma File Name: ${{ github.event.client_payload.file_name }}"
          echo "Figma File Key: ${{ github.event.client_payload.file_key }}"
          echo "Webhook ID: ${{ github.event.client_payload.figma_webhook_id }}"
          echo "Timestamp: ${{ github.event.client_payload.timestamp }}"
      
      - name: Setup GitHub credentials
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Extract Figma design tokens
        env:
          FIGMA_PAT: ${{ secrets.FIGMA_PAT }}
          FIGMA_FILE_KEY: ${{ github.event.client_payload.file_key }}
        run: |
          echo "Extracting design tokens from Figma..."
          node scripts/generate_figma_components.js --token=$FIGMA_PAT --file=$FIGMA_FILE_KEY --verbose
      
      - name: Run validation on extracted tokens
        run: |
          echo "Validating extracted design tokens..."
          # Add validation logic here
          
          # Example basic validation:
          if [ -f "component-adaptation-mapping.json" ]; then
            echo "Validating JSON format..."
            jq . component-adaptation-mapping.json > /dev/null
            echo "JSON validation successful."
          else
            echo "Warning: component-adaptation-mapping.json not found."
          fi
      
      - name: Update UI components and tokens
        run: |
          echo "Updating UI components and design tokens..."
          
          # Update variables in the UI package if they exist
          if [ -f "packages/ui/src/tokens/variables.js" ]; then
            echo "Updating UI token variables..."
            
            # Logic to update variables.js with new token values
            # In a real implementation, this might parse component-adaptation-mapping.json
            # and update the variables.js file
          fi
          
          # Update Android resources if they exist
          if [ -d "packages/ui/android/src/main/res/values" ]; then
            echo "Updating Android resources..."
            
            # Logic to update colors.xml and styles.xml with new values
          fi
      
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          
          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update design tokens from Figma [skip ci]" \
                     -m "Automated update triggered by Figma change" \
                     -m "Event: ${{ github.event.client_payload.figma_event_type }}" \
                     -m "File: ${{ github.event.client_payload.file_name }}"
            
            git push
            echo "Changes pushed to repository."
          else
            echo "No changes to commit."
          fi
      
      - name: Notify team of successful update
        if: success()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          payload: |
            {
              "text": "Figma Design Update Successfully Applied :tada:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Figma Design Update Successfully Applied* :tada:"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*File:*\n${{ github.event.client_payload.file_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Event:*\n${{ github.event.client_payload.figma_event_type }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Timestamp:*\n${{ github.event.client_payload.timestamp }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View in Figma"
                      },
                      "url": "https://www.figma.com/file/${{ github.event.client_payload.file_key }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  
  # Only run deployment if the Figma update is successful
  deploy-to-staging:
    name: Deploy to Staging Environment
    needs: process-figma-changes
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main # Ensure we're deploying from main
      
      - name: Set up Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.ORG_GCP_CREDENTIALS }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.ORG_GCP_PROJECT_ID }}
      
      - name: Deploy to GCP
        run: |
          echo "Deploying updated design to staging environment..."
          # Add deployment steps here
          # This would typically involve building and deploying to Cloud Run, GKE, or other GCP services
