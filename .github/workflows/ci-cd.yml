# ci-cd.yml
# Robust CI/CD pipeline for Python/Node/Docker/Poetry monorepo.
# Enforces linting, type checks, tests, Docker build, and GCP deploy readiness.

name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    env:
      POETRY_VIRTUALENVS_CREATE: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: pip install poetry

      - name: Install Python dependencies
        run: poetry install --no-interaction --no-root

      - name: Lint Python code
        run: poetry run flake8 .

      - name: Type check Python code
        run: poetry run mypy .

      - name: Run Python tests
        run: poetry run pytest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Node dependencies (admin-interface)
        run: |
          cd admin-interface
          npm ci

      - name: Lint Node code (admin-interface)
        run: |
          cd admin-interface
          npm run lint || true

      - name: Build Node app (admin-interface)
        run: |
          cd admin-interface
          npm run build

      - name: Docker Compose Build (all services)
        run: docker compose build

      - name: Poetry Export Requirements (for Docker)
        run: poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Check for uncommitted changes
        run: |
          git diff --exit-code || (echo "Uncommitted changes after build. Please commit all generated files." && exit 1)

      # GCP deploy steps (commented, enable as needed)
      # - name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: ${{ secrets.GCP_SA_KEY }}

      # - name: Configure Docker for Artifact Registry
      #   run: gcloud auth configure-docker

      # - name: Build and Push Docker Image
      #   run: |
      #     docker build -t gcr.io/$GCP_PROJECT_ID/orchestra-main:$GITHUB_SHA .
      #     docker push gcr.io/$GCP_PROJECT_ID/orchestra-main:$GITHUB_SHA

      # - name: Deploy to Cloud Run
      #   run: |
      #     gcloud run deploy orchestra-main \
      #       --image gcr.io/$GCP_PROJECT_ID/orchestra-main:$GITHUB_SHA \
      #       --region $GCP_REGION \
      #       --platform managed \
      #       --allow-unauthenticated

      - name: Success
        run: echo "CI/CD pipeline completed successfully."
