name: Deploy Admin Interface

on:
  push:
    branches: [main]
    paths:
      - 'admin-interface/**'
      - 'services/admin-api/**'
      - '.github/workflows/deploy-admin-interface.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_MASTER_SERVICE_JSON }}
          service_account: ${{ secrets.GCP_PROJECT_AUTHENTICATION_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      # Build and deploy backend
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Set up Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
      
      - name: Build backend Docker image
        run: |
          cd services/admin-api
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-backend:${{ github.sha }} .
          docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-backend:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-backend:latest
      
      - name: Push backend Docker image
        run: |
          gcloud auth configure-docker -q
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-backend:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-backend:latest
      
      # Build and deploy frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Build frontend Docker image
        run: |
          cd admin-interface
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-frontend:${{ github.sha }} .
          docker tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-frontend:${{ github.sha }} gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-frontend:latest
      
      - name: Push frontend Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-frontend:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/ai-orchestra-admin-frontend:latest
      
      # Deploy with Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Initialize Terraform
        run: |
          cd admin-interface/terraform
          terraform init
          
      - name: Create Terraform variables file
        run: |
          cd admin-interface/terraform
          cat > terraform.tfvars <<EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          region = "us-central1"
          env = "dev"
          api_url = "https://ai-orchestra-admin-backend-dev-${{ secrets.GCP_PROJECT_ID }}.a.run.app"
          EOF
      
      - name: Apply Terraform
        run: |
          cd admin-interface/terraform
          terraform apply -auto-approve
      
      - name: Get deployment URLs
        id: get-urls
        run: |
          cd admin-interface/terraform
          FRONTEND_URL=$(terraform output -raw admin_frontend_url)
          BACKEND_URL=$(terraform output -raw admin_backend_url)
          echo "Frontend URL: $FRONTEND_URL"
          echo "Backend URL: $BACKEND_URL"

      - name: Create GitHub Deployment Status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GH_FINE_GRAINED_TOKEN }}
          state: "success"
          deployment-id: ${{ github.run_id }}
          environment-url: $(terraform output -raw admin_frontend_url)
          description: "Admin interface deployed successfully"