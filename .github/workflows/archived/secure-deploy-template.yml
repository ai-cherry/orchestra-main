# AI Orchestra Secure Deployment Workflow
# This template enforces Workload Identity Federation for GCP authentication
# Version: 1.0.0

name: Secure Cloud Run Deployment

on:
  push:
    branches: [main]
    paths:
      - 'ai-orchestra/**'  # Customize this path for your service
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      service_path:
        description: 'Path to service directory'
        required: false
        default: 'ai-orchestra'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  PROJECT_NUMBER: ${{ secrets.GCP_PROJECT_NUMBER }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ai-orchestra-api  # Customize this for your service

jobs:
  validate-and-deploy:
    name: Validate and Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      contents: read
      id-token: write  # Required for requesting the JWT for WIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        working-directory: ${{ github.event.inputs.service_path || 'ai-orchestra' }}
        run: |
          poetry install --no-interaction

      - name: Run tests
        working-directory: ${{ github.event.inputs.service_path || 'ai-orchestra' }}
        run: |
          poetry run pytest tests/ -v

      # Google Cloud Authentication with Workload Identity Federation
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
      
      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta,gke-gcloud-auth-plugin'
      
      # Configure Docker to use gcloud credentials
      - name: Configure Docker
        run: gcloud auth configure-docker gcr.io
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ github.event.inputs.service_path || 'ai-orchestra' }}
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          build-args: |
            PROJECT_ID=${{ env.PROJECT_ID }}
            ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
      
      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          env_vars: |
            ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          secrets: |
            GOOGLE_APPLICATION_CREDENTIALS=projects/${{ env.PROJECT_NUMBER }}/secrets/cherry-ai-credentials:latest
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=80
            --timeout=600s
      
      # Show the deployed service URL
      - name: Show deployment information
        run: |
          echo "‚úÖ Service deployed successfully!"
          echo "üåê Service URL: ${{ steps.deploy.outputs.url }}"
          echo "üìù Revision: ${{ steps.deploy.outputs.revision }}"
          echo "üîÑ Traffic split updated: All traffic routed to new revision"

      # Log deployment to monitoring services
      - name: Log deployment
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          DEPLOY_DATA=$(cat << EOF
          {
            "service": "${{ env.SERVICE_NAME }}",
            "environment": "${{ github.event.inputs.environment || 'dev' }}",
            "revision": "${{ steps.deploy.outputs.revision }}",
            "commit": "${{ github.sha }}",
            "timestamp": "$TIMESTAMP",
            "deployer": "${{ github.actor }}"
          }
          EOF
          )
          
          # Store deployment information in Cloud Storage
          echo "$DEPLOY_DATA" | gcloud storage cp - gs://${{ env.PROJECT_ID }}-deployments/logs/${{ env.SERVICE_NAME }}/$TIMESTAMP.json