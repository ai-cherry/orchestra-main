name: Direct Deploy Orchestra

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  PROJECT_ID: cherry-ai-project
  REGION: us-west4
  IMAGE_NAME: orchestra-api

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction --no-root
    
    - name: Run tests
      run: |
        poetry run pytest
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Authenticate to Google Cloud
      id: auth
      run: |
        # Write service account key to file
        echo '${{ secrets.GCP_MASTER_SERVICE_JSON }}' > /tmp/service-account.json
        chmod 600 /tmp/service-account.json
        
        # Authenticate with gcloud
        gcloud auth activate-service-account --key-file=/tmp/service-account.json
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/region ${{ env.REGION }}
        
        # Verify authentication
        gcloud auth list
    
    - name: Set environment-specific variables
      id: env-vars
      run: |
        ENV=${{ github.event.inputs.environment || 'dev' }}
        echo "ENV=$ENV" >> $GITHUB_ENV
        echo "IMAGE_TAG=${ENV}-$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
        echo "FULL_IMAGE_NAME=gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${ENV}-$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
    
    - name: Build and push Docker image
      run: |
        # Build the Docker image
        gcloud builds submit \
          --tag ${{ env.FULL_IMAGE_NAME }} \
          --timeout=30m \
          --machine-type=e2-highcpu-8 \
          .
        
        # Also tag as latest for the environment
        gcloud container images add-tag \
          ${{ env.FULL_IMAGE_NAME }} \
          gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.ENV }}-latest \
          --quiet
    
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        # Deploy to Cloud Run with performance optimizations
        gcloud run deploy ${{ env.IMAGE_NAME }}-${{ env.ENV }} \
          --image ${{ env.FULL_IMAGE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --memory 4Gi \
          --cpu 2 \
          --concurrency 80 \
          --min-instances 1 \
          --max-instances 10 \
          --set-env-vars="ENV=${{ env.ENV }}" \
          --set-env-vars="PYTHON_UNBUFFERED=1" \
          --allow-unauthenticated
        
        # Get the URL of the deployed service
        SERVICE_URL=$(gcloud run services describe ${{ env.IMAGE_NAME }}-${{ env.ENV }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format="value(status.url)")
        
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "::set-output name=url::$SERVICE_URL"
    
    - name: Verify deployment
      run: |
        # Wait for the service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Check if the service is responding
        if curl -s -o /dev/null -w "%{http_code}" ${{ env.SERVICE_URL }} | grep -q "200"; then
          echo "✅ Service is responding"
        else
          echo "❌ Service is not responding"
          exit 1
        fi
        
        # Check health endpoint if it exists
        if curl -s -o /dev/null -w "%{http_code}" ${{ env.SERVICE_URL }}/health | grep -q "200"; then
          echo "✅ Health check passed"
        else
          echo "⚠️ Health endpoint not available or not returning 200"
        fi
    
    - name: Clean up
      if: always()
      run: |
        # Remove service account key
        rm -f /tmp/service-account.json
    
    - name: Deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "* **Environment:** ${{ env.ENV }}" >> $GITHUB_STEP_SUMMARY
        echo "* **Image:** ${{ env.FULL_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "* **Service URL:** ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "* **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY