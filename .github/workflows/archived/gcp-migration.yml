name: GCP Project Migration (with Poetry)

# This workflow handles secure migration of GCP projects using Workload Identity Federation
# and deploys the required infrastructure using Terraform
# 
# Security features:
# - No service account keys stored in GitHub
# - Short-lived credentials via Workload Identity Federation
# - Approval gates for critical operations
# - Automated validation
# - Slack notifications for errors
# - Audit logging of all steps

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID to migrate'
        required: true
        type: string
      target_org_id:
        description: 'Target Organization ID'
        required: true
        type: string
      approve_migration:
        description: 'Migration requires explicit approval'
        required: true
        type: boolean
        default: true
      deploy_infrastructure:
        description: 'Deploy Infrastructure after migration'
        type: boolean
        default: true

env:
  PROJECT_ID: ${{ github.event.inputs.project_id }}
  TARGET_ORG_ID: ${{ github.event.inputs.target_org_id }}
  SERVICE_ACCOUNT: vertex-agent@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com
  TF_VAR_project_id: ${{ github.event.inputs.project_id }}
  TF_VAR_org_id: ${{ github.event.inputs.target_org_id }}

jobs:
  # Validate inputs and repository
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs and repository structure
        id: validate
        run: |
          # Validate Project ID format
          if ! [[ "$PROJECT_ID" =~ ^[a-z][a-z0-9-]{4,28}[a-z0-9]$ ]]; then
            echo "❌ Invalid project ID format: $PROJECT_ID"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate Organization ID format (numeric)
          if ! [[ "$TARGET_ORG_ID" =~ ^[0-9]+$ ]]; then
            echo "❌ Invalid organization ID format: $TARGET_ORG_ID"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for required files
          REQUIRED_FILES=(
            "sanitized_workstation_config.tf"
            "sanitized_validate_migration.sh"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file not found: $file"
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "✅ Validation successful"
          echo "proceed=true" >> $GITHUB_OUTPUT

  # Pre-migration checks (check service account, org policies, etc.)
  pre-migration-checks:
    needs: validate-inputs
    if: needs.validate-inputs.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    outputs:
      can_migrate: ${{ steps.checks.outputs.can_migrate }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          # WIF configuration temporarily commented out for initial Terraform apply
          # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # service_account: ${{ env.SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_ADMIN_SA_KEY_JSON }}
          create_credentials_file: true

      - name: Run pre-migration checks
        id: checks
        run: |
          echo "Checking if service account has required roles..."
          
          # Check organization roles
          ORG_ROLES=$(gcloud organizations get-iam-policy $TARGET_ORG_ID \
            --filter="bindings.members:$SERVICE_ACCOUNT" \
            --format="value(bindings.role)" 2>/dev/null || echo "")
          
          # Check if required roles are present
          if echo "$ORG_ROLES" | grep -q "roles/resourcemanager.projectMover" && \
             echo "$ORG_ROLES" | grep -q "roles/resourcemanager.projectCreator"; then
            echo "✅ Service account has required organization roles"
          else
            echo "❌ Service account is missing required organization roles"
            echo "Missing roles:"
            echo "roles/resourcemanager.projectMover" | grep -v "$ORG_ROLES" || true
            echo "roles/resourcemanager.projectCreator" | grep -v "$ORG_ROLES" || true
            echo "can_migrate=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if project exists and is accessible
          if gcloud projects describe $PROJECT_ID &>/dev/null; then
            echo "✅ Project $PROJECT_ID exists and is accessible"
          else
            echo "❌ Project $PROJECT_ID does not exist or is not accessible"
            echo "can_migrate=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check billing account
          BILLING_ENABLED=$(gcloud billing projects describe $PROJECT_ID \
            --format="value(billingEnabled)" 2>/dev/null || echo "false")
          
          if [ "$BILLING_ENABLED" = "true" ]; then
            echo "✅ Project has billing enabled"
          else
            echo "❌ Project does not have billing enabled"
            echo "can_migrate=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "All pre-migration checks passed!"
          echo "can_migrate=true" >> $GITHUB_OUTPUT

  # Request approval for migration
  request-approval:
    needs: [validate-inputs, pre-migration-checks]
    if: |
      needs.validate-inputs.outputs.proceed == 'true' && 
      needs.pre-migration-checks.outputs.can_migrate == 'true' && 
      github.event.inputs.approve_migration == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Request migration approval
        run: |
          echo "⚠️ Migration of project $PROJECT_ID to organization $TARGET_ORG_ID has been approved."
          echo "This is a critical operation that cannot be easily undone."

  # Perform the migration
  migrate-project:
    needs: [validate-inputs, pre-migration-checks, request-approval]
    if: |
      always() &&
      needs.validate-inputs.outputs.proceed == 'true' && 
      needs.pre-migration-checks.outputs.can_migrate == 'true' &&
      (github.event.inputs.approve_migration == 'false' || needs.request-approval.result == 'success')
    runs-on: ubuntu-latest
    outputs:
      migration_success: ${{ steps.migration.outputs.success }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          # WIF configuration temporarily commented out for initial Terraform apply
          # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # service_account: ${{ env.SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_ADMIN_SA_KEY_JSON }}
          create_credentials_file: true

      - name: Wait for IAM propagation
        run: |
          echo "Waiting for IAM roles to propagate (this is critical for successful migration)..."
          for i in {300..1}; do
            echo -ne "\rWaiting: $i seconds remaining..."
            sleep 1
          done
          echo -e "\nIAM propagation wait period completed"

      - name: Migrate project to target organization
        id: migration
        run: |
          echo "Starting project migration..."
          
          # Execute project migration
          if gcloud beta projects move $PROJECT_ID \
            --organization=$TARGET_ORG_ID \
            --billing-project=$PROJECT_ID; then
            
            echo "Project migration command completed successfully"
            
            # Verify migration
            CURRENT_ORG=$(gcloud projects describe $PROJECT_ID --format="value(parent.id)")
            
            if [ "$CURRENT_ORG" = "$TARGET_ORG_ID" ]; then
              echo "✅ Migration successful! Project is now in organization $TARGET_ORG_ID"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Migration verification failed. Project is in organization $CURRENT_ORG, not $TARGET_ORG_ID"
              echo "success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Project migration command failed"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification on failure
        if: steps.migration.outputs.success != 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "⛔ *Project Migration Failed*\n*Project:* ${{ env.PROJECT_ID }}\n*Target Org:* ${{ env.TARGET_ORG_ID }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy infrastructure if migration was successful
  deploy-infrastructure:
    needs: [migrate-project]
    if: |
      needs.migrate-project.outputs.migration_success == 'true' && 
      github.event.inputs.deploy_infrastructure == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          # WIF configuration temporarily commented out for initial Terraform apply
          # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # service_account: ${{ env.SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_ADMIN_SA_KEY_JSON }}
          create_credentials_file: true

      - name: Enable required APIs
        run: |
          echo "Enabling required APIs..."
          gcloud services enable \
            workstations.googleapis.com \
            aiplatform.googleapis.com \
            redis.googleapis.com \
            alloydb.googleapis.com \
            --project=$PROJECT_ID

      - name: Initialize Terraform
        run: |
          # Copy sanitized Terraform config
          cp sanitized_workstation_config.tf workstation_config.tf
          
          # Replace placeholders with actual values
          sed -i "s/YOUR_PROJECT_ID/$PROJECT_ID/g" workstation_config.tf
          sed -i "s/YOUR_ORGANIZATION_ID/$TARGET_ORG_ID/g" workstation_config.tf
          
          # Initialize Terraform
          terraform init -backend-config="bucket=$PROJECT_ID-terraform-state"

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  # Run validation checks after migration and infrastructure deployment
  validate-migration:
    needs: [migrate-project, deploy-infrastructure]
    if: |
      always() && 
      needs.migrate-project.outputs.migration_success == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.4.0'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1
        with:
          path: '.'
          level: medium
          confidence: medium
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          # WIF configuration temporarily commented out for initial Terraform apply
          # workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # service_account: ${{ env.SERVICE_ACCOUNT }}
          credentials_json: ${{ secrets.GCP_ADMIN_SA_KEY_JSON }}
          create_credentials_file: true

      - name: Run validation script
        run: |
          # Make validation script executable
          chmod +x sanitized_validate_migration.sh
          
          # Execute validation
          ./sanitized_validate_migration.sh
          
          # Record validation status
          VALIDATION_STATUS=$?
          
          if [ $VALIDATION_STATUS -eq 0 ]; then
            echo "✅ Migration validation successful!"
          else
            echo "❌ Migration validation failed with exit code $VALIDATION_STATUS"
            exit $VALIDATION_STATUS
          fi

      - name: Generate migration report
        run: |
          # Create report file
          cat > migration_report.md << EOL
          # GCP Migration Report
          
          ## Project Information
          - Project ID: $PROJECT_ID
          - Organization ID: $TARGET_ORG_ID
          - Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ## Migration Status
          - Migration: ✅ Successful
          - Infrastructure Deployment: ${{ github.event.inputs.deploy_infrastructure == 'true' && needs.deploy-infrastructure.result == 'success' && '✅ Successful' || '⏭️ Skipped' }}
          - Validation: ✅ Passed
          
          ## Next Steps
          1. Verify application deployments
          2. Set up monitoring and alerts
          3. Update documentation
          
          ## Support
          Contact cloud-admins@example.com for assistance
          EOL
          
          # Save report as artifact
          mkdir -p migration_artifacts
          cp migration_report.md migration_artifacts/

      - name: Upload report artifact
        uses: actions/upload-artifact@v3
        with:
          name: migration-report
          path: migration_artifacts/

      - name: Send success notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ *Project Migration Successful*\n*Project:* ${{ env.PROJECT_ID }}\n*Organization:* ${{ env.TARGET_ORG_ID }}\n*Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
