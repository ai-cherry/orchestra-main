name: AI Orchestra Mode System CI

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'config/mode_definitions.yaml'
      - 'core/mode_manager.py'
      - 'core/persistency/mode_config_persistence.py'
      - 'tools/mode_switcher.py'
      - 'scripts/setup_enhanced_mode_system.sh'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'config/mode_definitions.yaml'
      - 'core/mode_manager.py'
      - 'core/persistency/mode_config_persistence.py'
      - 'tools/mode_switcher.py'
      - 'scripts/setup_enhanced_mode_system.sh'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync configuration to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'cherry-ai-project' }}
  MODE_CONFIG_BUCKET: ${{ secrets.MODE_CONFIG_BUCKET || 'cherry-ai-project-mode-config' }}
  MODE_CONFIG_SECRET: ${{ secrets.MODE_CONFIG_SECRET || 'mode-system-config' }}
  FIRESTORE_COLLECTION: ${{ secrets.FIRESTORE_COLLECTION || 'mode_system_config' }}

jobs:
  validate-mode-config:
    name: Validate Mode System Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml google-cloud-storage google-cloud-firestore google-cloud-secretmanager colorama
      
      - name: Validate YAML syntax
        run: |
          python -c "import yaml; yaml.safe_load(open('config/mode_definitions.yaml', 'r'))"
          echo "✅ YAML syntax is valid"
      
      - name: Validate mode configuration structure
        run: |
          python - <<EOF
          import yaml
          import sys
          
          # Load configuration
          with open('config/mode_definitions.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Validate structure
          errors = []
          
          # Check if modes section exists
          if 'modes' not in config:
              errors.append("Missing 'modes' section in configuration")
          elif not isinstance(config['modes'], dict):
              errors.append("'modes' section must be a dictionary")
          else:
              # Check each mode
              for mode_slug, mode_data in config['modes'].items():
                  required_fields = ['name', 'model', 'description']
                  for field in required_fields:
                      if field not in mode_data:
                          errors.append(f"Mode '{mode_slug}' is missing required field '{field}'")
          
          # Check workflows section if present
          if 'workflows' in config:
              if not isinstance(config['workflows'], dict):
                  errors.append("'workflows' section must be a dictionary")
              else:
                  # Check each workflow
                  for workflow_slug, workflow_data in config['workflows'].items():
                      required_fields = ['name', 'description', 'steps']
                      for field in required_fields:
                          if field not in workflow_data:
                              errors.append(f"Workflow '{workflow_slug}' is missing required field '{field}'")
                      
                      # Check steps
                      if 'steps' in workflow_data:
                          if not isinstance(workflow_data['steps'], list):
                              errors.append(f"Workflow '{workflow_slug}' steps must be a list")
                          else:
                              for i, step in enumerate(workflow_data['steps']):
                                  if 'mode' not in step or 'task' not in step:
                                      errors.append(f"Step {i+1} in workflow '{workflow_slug}' is missing required field 'mode' or 'task'")
                                  
                                  # Check mode exists
                                  if 'mode' in step and step['mode'] not in config['modes']:
                                      errors.append(f"Step {i+1} in workflow '{workflow_slug}' references non-existent mode '{step['mode']}'")
          
          # Print validation results
          if errors:
              print("❌ Validation failed with the following errors:")
              for error in errors:
                  print(f"  - {error}")
              sys.exit(1)
          else:
              print("✅ Mode configuration structure is valid")
          EOF
      
      - name: Verify mode system code consistency
        run: |
          # Check required files
          missing_files=()
          
          for file in "core/mode_manager.py" "core/persistency/mode_config_persistence.py" "tools/mode_switcher.py"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "❌ The following required files are missing:"
            for file in "${missing_files[@]}"; do
              echo "  - $file"
            done
            exit 1
          else
            echo "✅ All required mode system files are present"
          fi
          
          # Verify consistency between mode definitions and code
          python - <<EOF
          import yaml
          import os
          
          # Get modes from configuration
          with open('config/mode_definitions.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Search for mode slugs in mode manager file
          with open('core/mode_manager.py', 'r') as f:
              mode_manager_content = f.read()
          
          # Check that all modes in config are referenced in code
          missing_modes = []
          for mode_slug in config.get('modes', {}).keys():
              if f'"{mode_slug}"' not in mode_manager_content:
                  missing_modes.append(mode_slug)
          
          if missing_modes:
              print(f"⚠️ Warning: Some modes in configuration aren't explicitly referenced in code: {', '.join(missing_modes)}")
              print("This may be expected if the code dynamically loads the configuration.")
          else:
              print("✅ Mode configuration and code are consistent")
          EOF

  sync-mode-config:
    name: Sync Mode Configuration
    needs: validate-mode-config
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    # Only run on push to main/master or manual trigger
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      id-token: write # Needed for Workload Identity Federation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml google-cloud-storage google-cloud-firestore google-cloud-secretmanager colorama
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Sync configuration to Secret Manager
        run: |
          # Check if secret exists
          if ! gcloud secrets describe ${{ env.MODE_CONFIG_SECRET }} 2>/dev/null; then
            echo "Creating secret ${{ env.MODE_CONFIG_SECRET }}..."
            gcloud secrets create ${{ env.MODE_CONFIG_SECRET }} \
              --replication-policy="automatic"
          fi
          
          # Add new secret version
          echo "Adding new version to secret ${{ env.MODE_CONFIG_SECRET }}..."
          gcloud secrets versions add ${{ env.MODE_CONFIG_SECRET }} \
            --data-file=config/mode_definitions.yaml
          
          echo "✅ Configuration synced to Secret Manager"
      
      - name: Sync configuration to Cloud Storage
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          BUCKET="${{ env.MODE_CONFIG_BUCKET }}"
          
          # Check if bucket exists
          if ! gsutil ls -b gs://$BUCKET 2>/dev/null; then
            echo "Creating bucket $BUCKET..."
            gsutil mb -l us-central1 gs://$BUCKET
          fi
          
          # Upload configuration
          echo "Uploading configuration to gs://$BUCKET/$ENVIRONMENT/mode_definitions.yaml..."
          gsutil cp config/mode_definitions.yaml gs://$BUCKET/$ENVIRONMENT/mode_definitions.yaml
          
          echo "✅ Configuration synced to Cloud Storage"
      
      - name: Sync configuration to Firestore
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          
          # Use the persistence manager to sync to Firestore
          python - <<EOF
          import os
          import sys
          
          # Add project root to Python path
          sys.path.append(os.getcwd())
          
          # Set environment variables
          os.environ["MODE_SYSTEM_ENVIRONMENT"] = "$ENVIRONMENT"
          os.environ["MODE_SYSTEM_PROJECT_ID"] = "${{ env.PROJECT_ID }}"
          os.environ["MODE_SYSTEM_BUCKET"] = "${{ env.MODE_CONFIG_BUCKET }}"
          os.environ["MODE_SYSTEM_SECRET"] = "${{ env.MODE_CONFIG_SECRET }}"
          os.environ["MODE_SYSTEM_COLLECTION"] = "${{ env.FIRESTORE_COLLECTION }}"
          
          try:
              # Try to import the persistence manager
              from core.persistency.mode_config_persistence import get_persistence_manager
              
              # Save configuration to persistent storage
              manager = get_persistence_manager()
              success = manager.save_mode_definitions()
              
              if success:
                  print("✅ Configuration successfully synced to Firestore")
                  sys.exit(0)
              else:
                  print("❌ Failed to sync configuration to Firestore")
                  sys.exit(1)
          except ImportError:
              print("⚠️ Could not import persistence manager, using direct Firestore API")
              
              try:
                  from google.cloud import firestore
                  import yaml
                  
                  # Read configuration
                  with open("config/mode_definitions.yaml", "r") as f:
                      content = f.read()
                  
                  # Initialize Firestore client
                  db = firestore.Client(project="${{ env.PROJECT_ID }}")
                  
                  # Save to Firestore
                  doc_ref = db.collection("${{ env.FIRESTORE_COLLECTION }}").document("mode_definitions")
                  doc_ref.set({
                      "environment": "$ENVIRONMENT",
                      "content": content,
                      "updated_at": firestore.SERVER_TIMESTAMP,
                  })
                  
                  print("✅ Configuration successfully synced to Firestore (direct API)")
                  sys.exit(0)
              except Exception as e:
                  print(f"❌ Failed to sync configuration to Firestore: {e}")
                  sys.exit(1)
          EOF
      
      - name: Verify configuration sync
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          
          # Verify Secret Manager
          echo "Verifying Secret Manager sync..."
          SECRET_VERSION=$(gcloud secrets versions list ${{ env.MODE_CONFIG_SECRET }} --limit=1 --format="value(name)")
          if [ -z "$SECRET_VERSION" ]; then
            echo "❌ Failed to verify Secret Manager sync"
            exit 1
          fi
          
          # Verify Cloud Storage
          echo "Verifying Cloud Storage sync..."
          if ! gsutil stat gs://${{ env.MODE_CONFIG_BUCKET }}/$ENVIRONMENT/mode_definitions.yaml >/dev/null 2>&1; then
            echo "❌ Failed to verify Cloud Storage sync"
            exit 1
          fi
          
          echo "✅ Configuration sync verified"

  build-and-test:
    name: Build and test with synced configuration
    needs: sync-mode-config
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      id-token: write # Needed for Workload Identity Federation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml google-cloud-storage google-cloud-firestore google-cloud-secretmanager colorama
          
          # Install project dependencies
          if [ -f pyproject.toml ]; then
            pip install poetry
            poetry install
          else
            pip install -r requirements.txt
          fi
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Test mode system integration
        run: |
          # Initialize the mode system
          echo "Initializing mode system..."
          chmod +x scripts/setup_enhanced_mode_system.sh
          ./scripts/setup_enhanced_mode_system.sh
          
          # Test mode switching
          echo "Testing mode switching..."
          python - <<EOF
          import os
          import sys
          
          # Add project root to Python path
          sys.path.append(os.getcwd())
          
          try:
              # Try to import the mode manager
              from core.mode_manager import get_mode_manager
              
              # Test mode switching
              manager = get_mode_manager()
              
              # Test switching to code mode
              success, message = manager.switch_mode("code")
              print(f"Switch to code mode: {message}")
              
              if not success:
                  print("❌ Failed to switch to code mode")
                  sys.exit(1)
              
              # Test switching to debug mode
              success, message = manager.switch_mode("debug")
              print(f"Switch to debug mode: {message}")
              
              if not success:
                  print("❌ Failed to switch to debug mode")
                  sys.exit(1)
              
              print("✅ Mode switching tests passed")
              sys.exit(0)
          except Exception as e:
              print(f"❌ Error testing mode system: {e}")
              sys.exit(1)
          EOF