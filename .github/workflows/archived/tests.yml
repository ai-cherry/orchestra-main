name: Python Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/tests.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      # Redis service for testing
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        run: |
          # Clear poetry cache to avoid dependency resolution issues
          rm -rf ~/.cache/pypoetry
          
          # Install dependencies with retry mechanism
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if poetry install --with dev --no-interaction; then
              echo "Dependencies installed successfully"
              break
            else
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "::error::Failed to install dependencies after $max_retries attempts"
                exit 1
              fi
              echo "Attempt $retry_count failed. Retrying in 30 seconds..."
              # Clear poetry cache between attempts
              rm -rf ~/.cache/pypoetry
              sleep 30
            fi
          done
      
      - name: Run tests with pytest
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PYTHONPATH: ${{ github.workspace }}
          TESTING: "true"
          GCP_PROJECT_ID: "test-project"
          GCP_REGION: "us-west4"
        run: |
          poetry run pytest tests/ -v --cov=core --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
      
      - name: Run linting
        run: |
          poetry run ruff check . --select=E,F,B,I --ignore=E203,W503
      
      - name: Run type checking
        run: |
          poetry run mypy core/
      
      - name: Check formatting
        run: |
          poetry run black --check .
  
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      # Redis service for testing
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        run: |
          # Clear poetry cache to avoid dependency resolution issues
          rm -rf ~/.cache/pypoetry
          
          # Install dependencies with retry mechanism
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if poetry install --with dev --no-interaction; then
              echo "Dependencies installed successfully"
              break
            else
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "::error::Failed to install dependencies after $max_retries attempts"
                exit 1
              fi
              echo "Attempt $retry_count failed. Retrying in 30 seconds..."
              # Clear poetry cache between attempts
              rm -rf ~/.cache/pypoetry
              sleep 30
            fi
          done
      
      - name: Set up Firestore Emulator
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: test-project
      
      - name: Install Firestore Emulator
        run: |
          gcloud components install cloud-firestore-emulator --quiet
      
      - name: Run integration tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PYTHONPATH: ${{ github.workspace }}
          TESTING: "true"
          GCP_PROJECT_ID: "test-project"
          GCP_REGION: "us-west4"
          FIRESTORE_EMULATOR_HOST: localhost:8080
          GOOGLE_CLOUD_PROJECT: test-project
        run: |
          # Start Firestore emulator in background
          gcloud beta emulators firestore start --host-port=localhost:8080 &
          # Wait for emulator to start
          sleep 10
          
          # Run integration tests
          poetry run pytest tests/integration/ -v
  
  memory-benchmark:
    name: Memory System Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      # Redis service for testing
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        run: |
          # Clear poetry cache to avoid dependency resolution issues
          rm -rf ~/.cache/pypoetry
          
          # Install dependencies with retry mechanism
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if poetry install --with dev --no-interaction; then
              echo "Dependencies installed successfully"
              break
            else
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "::error::Failed to install dependencies after $max_retries attempts"
                exit 1
              fi
              echo "Attempt $retry_count failed. Retrying in 30 seconds..."
              # Clear poetry cache between attempts
              rm -rf ~/.cache/pypoetry
              sleep 30
            fi
          done
      
      - name: Run memory system benchmark
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PYTHONPATH: ${{ github.workspace }}
          TESTING: "true"
          GCP_PROJECT_ID: "test-project"
          GCP_REGION: "us-west4"
        run: |
          # Create benchmark directory if it doesn't exist
          mkdir -p benchmark_results
          
          # Run memory system benchmark
          poetry run python tests/benchmarks/memory_benchmark.py --output benchmark_results/memory_benchmark.json
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: memory-benchmark-results
          path: benchmark_results/
          retention-days: 90