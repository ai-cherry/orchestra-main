name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/admin-api/**'
      - '.github/workflows/deploy-to-cloud-run.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'services/admin-api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      service:
        description: 'Service to deploy'
        required: true
        default: 'admin-api'
        type: choice
        options:
          - admin-api
          - agent-service
          - memory-service

# Environment variables available to all jobs
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY }}
  SERVICE_NAME: ${{ github.event.inputs.service || 'admin-api' }}

# Permission configurations for GitHub Actions
permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      service_dir: ${{ steps.set-dirs.outputs.service_dir }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set service directory
        id: set-dirs
        run: |
          SERVICE="${{ env.SERVICE_NAME }}"
          echo "service_dir=services/${SERVICE}" >> $GITHUB_OUTPUT
      
      - name: Validate Poetry configuration
        run: |
          if [ ! -f "${{ steps.set-dirs.outputs.service_dir }}/pyproject.toml" ]; then
            echo "::error::pyproject.toml not found in ${{ steps.set-dirs.outputs.service_dir }}"
            exit 1
          fi
          
          if ! grep -q "\[tool.poetry\]" "${{ steps.set-dirs.outputs.service_dir }}/pyproject.toml"; then
            echo "::error::pyproject.toml does not have [tool.poetry] section"
            exit 1
          fi
          
          echo "Poetry configuration is valid"
      
      - name: Validate Dockerfile
        run: |
          if [ ! -f "${{ steps.set-dirs.outputs.service_dir }}/Dockerfile" ]; then
            echo "::error::Dockerfile not found in ${{ steps.set-dirs.outputs.service_dir }}"
            exit 1
          fi
          echo "Dockerfile is valid"

  build:
    name: Build and Push Image
    needs: validate
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Setup Poetry cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ needs.validate.outputs.service_dir }}/.venv
            ${{ needs.validate.outputs.service_dir }}/.poetry-cache
          key: ${{ runner.os }}-poetry-${{ hashFiles(format('{0}/poetry.lock', needs.validate.outputs.service_dir)) }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      
      - name: Install dependencies
        working-directory: ${{ needs.validate.outputs.service_dir }}
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --without dev
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Authenticate Docker to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      
      - name: Build and push container
        id: build-image
        env:
          SERVICE_DIR: ${{ needs.validate.outputs.service_dir }}
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
        run: |
          # Set image name
          IMAGE_NAME="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
          
          # Build container
          cd "${SERVICE_DIR}"
          docker build -t ${IMAGE_NAME} \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            .
          
          # Push to Artifact Registry
          docker push ${IMAGE_NAME}
          
          # Output the image name for later jobs
          echo "image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Cloud Run
    needs: [validate, build]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    # Concurrency group ensures only one deployment per branch/environment
    concurrency:
      group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
      cancel-in-progress: true
    
    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ needs.build.outputs.image }}
          flags: |
            --allow-unauthenticated
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }}
            --memory=1Gi
            --cpu=1
            --concurrency=80
            --min-instances=0
            --max-instances=10
            --timeout=300
          env_vars: |
            ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
            DEBUG=false
      
      # Use Secret Manager for secure environment variables
      - name: Set up environment secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |
            DATABASE_URL:${{ env.PROJECT_ID }}/DATABASE_URL
            API_KEY:${{ env.PROJECT_ID }}/API_KEY
      
      # Update service with secrets
      - name: Update service with secrets
        run: |
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --update-secrets=DATABASE_URL=DATABASE_URL:latest,API_KEY=API_KEY:latest
      
      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
      
      - name: Verify deployment
        id: verify
        run: |
          echo "Service deployed to: ${{ steps.deploy.outputs.url }}"
          # Check if the service is healthy
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }}/health || echo "failed")
          
          if [ "$STATUS_CODE" = "200" ]; then
            echo "Deployment verified successfully!"
          else
            echo "Deployment verification failed. Status code: $STATUS_CODE"
            # Don't fail the workflow, but log the issue
            echo "::warning::Deployment verification returned non-200 status: $STATUS_CODE"
          fi

  notify:
    name: Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Set status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "deployment_status=✅ Successful" >> $GITHUB_OUTPUT
          else
            echo "deployment_status=❌ Failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Post deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}';
            const service = '${{ env.SERVICE_NAME }}';
            const status = '${{ steps.status.outputs.deployment_status }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Deployment Status: ${status}
              
              - **Environment**: ${environment}
              - **Service**: ${service}
              - **Commit**: ${context.sha.substring(0, 7)}
              - **Timestamp**: ${new Date().toISOString()}
              
              ${status.includes('Failed') ? '⚠️ Please check the workflow logs for details.' : ''}
              `
            });
        if: github.event_name == 'pull_request'