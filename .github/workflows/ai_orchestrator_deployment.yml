name: AI conductor Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'ai_components/**'
      - 'infrastructure/**'
      - '.github/workflows/ai_conductor_deployment.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PULUMI_VERSION: '3.94.0'

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate conductor configuration
        run: |
          python -m pip install pyyaml jsonschema
          python scripts/validate_config.py

      - name: Check secrets availability
        run: |
          required_secrets=(
            "POSTGRES_HOST"
            "POSTGRES_USER"
            "POSTGRES_PASSWORD"
            "WEAVIATE_URL"
            "WEAVIATE_API_KEY"
            "AIRBYTE_API_KEY"
            "VULTR_API_KEY"
          )
          
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          AIRBYTE_API_KEY: ${{ secrets.AIRBYTE_API_KEY }}
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai_components/requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run unit tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        run: |
          pytest ai_components/tests/ -v --cov=ai_components --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build Python package
        run: |
          cd ai_components
          python -m pip install build
          python -m build

      - name: Create deployment artifact
        run: |
          tar -czf ai-conductor-${{ github.sha }}.tar.gz \
            ai_components/ \
            infrastructure/ \
            scripts/ \
            config/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ai-conductor-${{ github.sha }}
          path: ai-conductor-${{ github.sha }}.tar.gz
          retention-days: 7

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Pulumi
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: ${{ env.PULUMI_VERSION }}

      - name: Configure Pulumi
        run: |
          pulumi login s3://pulumi-state-bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Deploy Vultr infrastructure
        working-directory: infrastructure
        run: |
          pip install -r requirements.txt
          pulumi stack select ${{ github.event.inputs.environment || 'production' }}
          pulumi up --yes
        env:
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Get infrastructure outputs
        id: infra
        working-directory: infrastructure
        run: |
          echo "server_ip=$(pulumi stack output server_ip)" >> $GITHUB_OUTPUT
          echo "postgres_endpoint=$(pulumi stack output postgres_endpoint)" >> $GITHUB_OUTPUT
          echo "mcp_server_url=$(pulumi stack output mcp_server_url)" >> $GITHUB_OUTPUT

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ai-conductor-${{ github.sha }}

      - name: Deploy to Vultr server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ needs.deploy-infrastructure.outputs.server_ip }}
          username: root
          key: ${{ secrets.VULTR_SSH_KEY }}
          script: |
            # Stop existing services
            systemctl stop conductor-mcp || true
            systemctl stop ai-conductor || true
            
            # Create deployment directory
            mkdir -p /opt/ai-conductor
            cd /opt/ai-conductor
            
            # Clean previous deployment
            rm -rf ai_components infrastructure scripts config
            
            # Extract new deployment
            tar -xzf /tmp/ai-conductor-${{ github.sha }}.tar.gz
            
            # Install dependencies
            cd ai_components
            pip install -r requirements.txt
            
            # Set up environment
            cat > .env << EOF
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            WEAVIATE_URL=${{ secrets.WEAVIATE_URL }}
            WEAVIATE_API_KEY=${{ secrets.WEAVIATE_API_KEY }}
            AIRBYTE_API_URL=${{ secrets.AIRBYTE_API_URL }}
            AIRBYTE_API_KEY=${{ secrets.AIRBYTE_API_KEY }}
            AIRBYTE_WORKSPACE_ID=${{ secrets.AIRBYTE_WORKSPACE_ID }}
            MCP_SERVER_URL=${{ needs.deploy-infrastructure.outputs.mcp_server_url }}
            EOF
            
            # Start services
            systemctl daemon-reload
            systemctl enable conductor-mcp
            systemctl start conductor-mcp
            systemctl enable ai-conductor
            systemctl start ai-conductor
            
            # Run post-deployment checks
            sleep 10
            systemctl is-active conductor-mcp
            systemctl is-active ai-conductor

      - name: Copy deployment artifact to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.deploy-infrastructure.outputs.server_ip }}
          username: root
          key: ${{ secrets.VULTR_SSH_KEY }}
          source: "ai-conductor-${{ github.sha }}.tar.gz"
          target: "/tmp/"

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r ai_components/requirements.txt

      - name: Run EigenCode analysis
        run: |
          # This will run once EigenCode is properly installed
          echo "Skipping EigenCode analysis - service unavailable"
          
          # Placeholder for future implementation:
          # python scripts/run_eigencode_analysis.py \
          #   --server ${{ needs.deploy-infrastructure.outputs.server_ip }} \
          #   --output eigencode_report.json

      - name: Initialize Weaviate schema
        run: |
          python scripts/initialize_weaviate.py
        env:
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}

      - name: Configure Airbyte connections
        run: |
          python scripts/configure_airbyte.py
        env:
          AIRBYTE_API_URL: ${{ secrets.AIRBYTE_API_URL }}
          AIRBYTE_API_KEY: ${{ secrets.AIRBYTE_API_KEY }}
          AIRBYTE_WORKSPACE_ID: ${{ secrets.AIRBYTE_WORKSPACE_ID }}

      - name: Run smoke tests
        run: |
          python scripts/smoke_tests.py \
            --server ${{ needs.deploy-infrastructure.outputs.server_ip }} \
            --mcp-url ${{ needs.deploy-infrastructure.outputs.mcp_server_url }}

      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'http://${{ needs.deploy-infrastructure.outputs.server_ip }}',
              description: 'AI conductor deployed successfully'
            });

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, test, build, deploy-infrastructure, deploy-application, post-deployment]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.post-deployment.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "message=AI conductor deployment completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "message=AI conductor deployment failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ steps.status.outputs.status }}
          text: ${{ steps.status.outputs.message }}
          fields: |
            repo,message,commit,author,action,eventName,ref,workflow

      - name: Create GitHub issue on failure
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment failed: ${context.sha.substring(0, 7)}`,
              body: `## Deployment Failure
              
              **Commit:** ${context.sha}
              **Branch:** ${context.ref}
              **Workflow:** ${context.workflow}
              **Run:** ${context.runNumber}
              
              [View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              Please investigate and fix the deployment issue.`,
              labels: ['deployment', 'bug', 'high-priority']
            });