name: Deploy Agent Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/modules/memory_infrastructure/**'
      - 'terraform/agent_infrastructure.tf'
      - 'terraform/variables.tf'
      - '.github/workflows/deploy-agent-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: cherry-ai-project
  REGION: us-west4
  TF_VAR_project_id: cherry-ai-project
  TF_VAR_region: us-west4
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
  TERRAFORM_DIR: terraform

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    outputs:
      storage_bucket: ${{ steps.setup-outputs.outputs.storage_bucket }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up outputs
        id: setup-outputs
        run: |
          echo "storage_bucket=${PROJECT_ID}-memory-embeddings-${{ env.TF_VAR_environment }}" >> $GITHUB_OUTPUT
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/123456789/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: orchestra-cicd@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      
      - name: Enable APIs
        run: |
          gcloud services enable redis.googleapis.com --project=${{ env.PROJECT_ID }}
          gcloud services enable firestore.googleapis.com --project=${{ env.PROJECT_ID }}
          gcloud services enable aiplatform.googleapis.com --project=${{ env.PROJECT_ID }}
          gcloud services enable secretmanager.googleapis.com --project=${{ env.PROJECT_ID }}
          gcloud services enable storage.googleapis.com --project=${{ env.PROJECT_ID }}
          gcloud services enable iam.googleapis.com --project=${{ env.PROJECT_ID }}
      
      - name: Create storage bucket if not exists
        run: |
          if ! gsutil ls -b gs://${{ steps.setup-outputs.outputs.storage_bucket }} > /dev/null 2>&1; then
            gsutil mb -l ${{ env.REGION }} gs://${{ steps.setup-outputs.outputs.storage_bucket }}
            gsutil versioning set on gs://${{ steps.setup-outputs.outputs.storage_bucket }}
          fi

  terraform:
    name: Terraform
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/123456789/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: orchestra-cicd@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      
      - name: Create service account for memory system
        run: |
          SERVICE_ACCOUNT_NAME="orchestra-memory-sa-${{ env.TF_VAR_environment }}"
          
          # Check if service account exists
          if ! gcloud iam service-accounts describe "$SERVICE_ACCOUNT_NAME@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" --project=${{ env.PROJECT_ID }} > /dev/null 2>&1; then
            # Create service account
            gcloud iam service-accounts create "$SERVICE_ACCOUNT_NAME" \
              --display-name="AI Orchestra Memory Service Account (${{ env.TF_VAR_environment }})" \
              --project=${{ env.PROJECT_ID }}
          fi
          
          # Grant roles to service account
          ROLES=(
            "roles/redis.editor"
            "roles/datastore.user"
            "roles/aiplatform.user"
            "roles/secretmanager.secretAccessor"
            "roles/storage.objectAdmin"
          )
          
          for role in "${ROLES[@]}"; do
            gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
              --member="serviceAccount:$SERVICE_ACCOUNT_NAME@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
              --role="$role"
          done
          
          # Set environment variable for Terraform
          echo "TF_VAR_service_account_email=$SERVICE_ACCOUNT_NAME@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" >> $GITHUB_ENV
      
      - name: Create Terraform variables file
        run: |
          cat > ${{ env.TERRAFORM_DIR }}/terraform.tfvars << EOF
          # Generated by GitHub Actions
          
          project_id = "${{ env.PROJECT_ID }}"
          region = "${{ env.REGION }}"
          environment = "${{ env.TF_VAR_environment }}"
          storage_bucket = "${{ needs.setup.outputs.storage_bucket }}"
          service_account_email = "${{ env.TF_VAR_service_account_email }}"
          EOF
      
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.PROJECT_ID }}-terraform-state" \
            -backend-config="prefix=agent-infrastructure/${{ env.TF_VAR_environment }}"
      
      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve tfplan

  update-secrets:
    name: Update Secrets
    needs: [setup, terraform]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/123456789/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: orchestra-cicd@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
      
      - name: Get Redis password from Secret Manager
        run: |
          REDIS_PASSWORD=$(gcloud secrets versions access latest --secret=redis-password --project=${{ env.PROJECT_ID }})
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $GITHUB_ENV
      
      - name: Update environment variables in Cloud Run
        run: |
          # Get the current Cloud Run service
          SERVICE_NAME="ai-orchestra-${{ env.TF_VAR_environment }}"
          
          # Update environment variables
          gcloud run services update $SERVICE_NAME \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --update-env-vars="REDIS_HOST=10.0.0.1,REDIS_PORT=6379,REDIS_PASSWORD=${{ env.REDIS_PASSWORD }}"
      
      - name: Update Secret Manager with memory configuration
        run: |
          # Create memory configuration JSON
          cat > memory_config.json << EOF
          {
            "redis": {
              "host": "10.0.0.1",
              "port": 6379,
              "password_secret": "redis-password"
            },
            "firestore": {
              "project_id": "${{ env.PROJECT_ID }}",
              "mid_term_collection": "orchestra_mid_term",
              "long_term_collection": "orchestra_long_term"
            },
            "vertex": {
              "project_id": "${{ env.PROJECT_ID }}",
              "region": "${{ env.REGION }}",
              "index_name": "orchestra-semantic-memory",
              "endpoint_name": "orchestra-semantic-memory-endpoint",
              "embedding_model": "textembedding-gecko@003",
              "vector_dimension": 768
            }
          }
          EOF
          
          # Check if secret exists
          if ! gcloud secrets describe memory-config --project=${{ env.PROJECT_ID }} > /dev/null 2>&1; then
            # Create secret
            gcloud secrets create memory-config \
              --project=${{ env.PROJECT_ID }} \
              --replication-policy="automatic"
          fi
          
          # Update secret
          gcloud secrets versions add memory-config \
            --project=${{ env.PROJECT_ID }} \
            --data-file=memory_config.json

  notify:
    name: Notify
    needs: [terraform, update-secrets]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check workflow status
        id: check-status
        run: |
          if [[ "${{ needs.terraform.result }}" == "success" && "${{ needs.update-secrets.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      
      - name: Notify success
        if: steps.check-status.outputs.status == 'success'
        run: |
          echo "Agent infrastructure deployment successful!"
          echo "Environment: ${{ env.TF_VAR_environment }}"
          echo "Project: ${{ env.PROJECT_ID }}"
          echo "Region: ${{ env.REGION }}"
      
      - name: Notify failure
        if: steps.check-status.outputs.status == 'failure'
        run: |
          echo "Agent infrastructure deployment failed!"
          echo "Environment: ${{ env.TF_VAR_environment }}"
          echo "Project: ${{ env.PROJECT_ID }}"
          echo "Region: ${{ env.REGION }}"