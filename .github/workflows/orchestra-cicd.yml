name: Orchestra CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root --with dev
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Test with pytest
        run: |
          poetry run pytest tests/ --cov=./ --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
  
  build-and-push:
    name: Build and Push Docker Image
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/orchestra:${{ env.BRANCH_NAME }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/orchestra:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/orchestra:buildcache,mode=max
  
  deploy:
    name: Deploy to GCP Environment
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout for deployment scripts
        uses: actions/checkout@v3
      
      - name: Set up Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_ID }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.ORG_GCP_PROJECT_ID }}
      
      - name: Configure kubectl for GKE
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ github.ref == 'refs/heads/main' && secrets.ORG_GKE_CLUSTER_PROD || secrets.ORG_GKE_CLUSTER_STAGING }}
          location: ${{ secrets.ORG_GCP_REGION }}
      
      - name: Deploy to cluster
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          ENV_NAME=$([[ "$BRANCH_NAME" == "main" ]] && echo "production" || echo "staging")
          echo "Deploying to $ENV_NAME environment"
          
          # Set Firestore credentials for memory manager
          kubectl create secret generic firestore-creds \
            --from-literal=project-id=${{ secrets.ORG_GCP_PROJECT_ID }} \
            --from-literal=credentials-path="/app/gcp-credentials.json" \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create or update the GCP service account credentials secret
          kubectl create secret generic gcp-credentials \
            --from-file=gcp-credentials.json=<(echo "${{ secrets.ORG_GCP_SERVICE_ACCOUNT_KEY }}") \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Redis credentials secret
          kubectl create secret generic redis-credentials \
            --from-literal=password="${{ secrets.ORG_REDIS_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create or update Kubernetes deployment
          cat > deployment.yaml << EOL
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: orchestra-app
            namespace: default
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: orchestra
            template:
              metadata:
                labels:
                  app: orchestra
              spec:
                containers:
                - name: orchestra-app
                  image: ${{ secrets.DOCKERHUB_USERNAME }}/orchestra:${BRANCH_NAME}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8000
                  volumeMounts:
                  - name: gcp-credentials
                    mountPath: /app/gcp-credentials.json
                    subPath: gcp-credentials.json
                    readOnly: true
                  env:
                  - name: ENVIRONMENT
                    value: "${ENV_NAME}"
                  - name: GOOGLE_APPLICATION_CREDENTIALS
                    value: "/app/gcp-credentials.json"
                  - name: GCP_PROJECT_ID
                    value: "${{ secrets.ORG_GCP_PROJECT_ID }}"
                  - name: REDIS_HOST
                    value: "${{ secrets.ORG_REDIS_HOST }}"
                  - name: REDIS_PORT
                    value: "${{ secrets.ORG_REDIS_PORT }}"
                  - name: REDIS_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: redis-credentials
                        key: password
                        optional: true
                  - name: CACHE_TTL
                    value: "3600"
                  - name: APP_ENV
                    value: "${ENV_NAME}"
                volumes:
                - name: gcp-credentials
                  secret:
                    secretName: gcp-credentials
          EOL
          kubectl apply -f deployment.yaml
          
          # Create or update service
          cat > service.yaml << EOL
          apiVersion: v1
          kind: Service
          metadata:
            name: orchestra-service
            namespace: default
          spec:
            selector:
              app: orchestra
            ports:
            - port: 80
              targetPort: 8000
            type: ClusterIP
          EOL
          kubectl apply -f service.yaml
          
          # Verify deployment
          kubectl rollout status deployment/orchestra-app

  notify:
    name: Send Deployment Notification
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Orchestra Deployment Completed! :rocket:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Orchestra Deployment Completed* :rocket:\n\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nEnvironment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
