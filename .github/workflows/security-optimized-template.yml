xaname: Security-Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# Limit permissions to only what's necessary
permissions:
  contents: read
  id-token: write  # Required for WIF
  pull-requests: read

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ai-orchestra-api

jobs:
  # Security scanning job runs in parallel with tests
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent runaway jobs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety detect-secrets
          
      - name: Scan for secrets
        id: detect-secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline || echo "No baseline found, creating new one"
          detect-secrets scan > security-secrets-report.json

      - name: Run security checks
        run: |
          bandit -r . -f json -o security-bandit-report.json || true
          poetry export -f requirements.txt --without-hashes -o requirements-security.txt || pip freeze > requirements-security.txt
          safety check -r requirements-security.txt --json > security-safety-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-*-report.json
            
  # Verify tests pass before proceeding to deployment
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: |
          poetry install
          
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=. --cov-report=xml
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          
  # Deployment job dependent on tests passing
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Authentication with preference for WIF (more secure) but fallback to SA keys
      - name: Google Auth via Workload Identity Federation
        id: auth-wif
        continue-on-error: true  # Allow fallback if WIF isn't set up
        if: "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' }}"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'
          
      - name: Google Auth via Service Account Key
        id: auth-key
        if: steps.auth-wif.outcome != 'success'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --set-env-vars=ENV=${{ github.event.inputs.environment || 'dev' }}
            --set-secrets=AI_API_KEY=ai-api-key:latest
            
      - name: Verify deployment
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
          # Perform basic health check
          curl -sf ${{ steps.deploy.outputs.url }}/health || (echo "Health check failed" && exit 1)
          
  # Separate verification job to confirm deployment success
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    timeout-minutes: 5
    
    steps:
      - name: Wait for deployment propagation
        run: sleep 30
        
      - name: Run deployment verification
        run: |
          DEPLOY_URL="${{ needs.deploy.outputs.url }}"
          echo "Verifying deployment at: $DEPLOY_URL"
          
          # Check service health
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $DEPLOY_URL/health)
          if [ "$HEALTH_STATUS" -ne 200 ]; then
            echo "Health check failed with status: $HEALTH_STATUS"
            exit 1
          fi
          
          # Verify environment configuration
          ENV_CHECK=$(curl -s $DEPLOY_URL/config | grep -c "${{ github.event.inputs.environment || 'dev' }}")
          if [ "$ENV_CHECK" -eq 0 ]; then
            echo "Environment configuration verification failed"
            exit 1
          fi
          
          echo "Deployment verification successful"