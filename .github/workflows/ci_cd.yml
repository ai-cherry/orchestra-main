# Placeholder for GitHub Actions CI/CD workflow 

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read
  id-token: write # Required for Workload Identity Federation

env:
  PROJECT_ID: "YOUR_GCP_PROJECT_ID" # TODO: Replace with your GCP Project ID
  GCP_REGION: "us-central1" # TODO: Choose your preferred GCP region
  GAR_LOCATION: "us-central1" # Artifact Registry location (e.g., us-central1, europe-west1)
  WORKLOAD_IDENTITY_PROVIDER: "projects/YOUR_GCP_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID" # TODO: Replace
  SERVICE_ACCOUNT: "your-service-account-email@${PROJECT_ID}.iam.gserviceaccount.com" # TODO: Replace with your CI/CD Service Account email
  PULUMI_STACK_DEV: "dev"
  PULUMI_STACK_PROD: "prod"
  AGENT_DOCKER_REPO: "agent-docker" # As defined in Pulumi
  DASHBOARD_DOCKER_REPO: "dashboard-docker" # TODO: Ensure this Artifact Registry repo exists or create it via Pulumi/manual
  AGENT_IMAGE_NAME: "agent"
  DASHBOARD_IMAGE_NAME: "dashboard"
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  POETRY_VERSION: '1.8.2' # Or your desired version

jobs:
  lint_and_test:
    name: Lint and Test
    runs-on: ubuntu-latest
    services:
      firestore-emulator: # For Python tests needing Firestore
        image: mtlynch/firestore-emulator:latest
        ports:
          - 8080:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1 # Or abatilo/actions-poetry@v3 if preferred
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true # Recommended

      - name: Install root dependencies (for linters, pytest etc.)
        run: poetry install --with dev # Assumes linters are in root pyproject.toml dev group

      - name: Run Flake8
        run: poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics # Example from infra.yml

      - name: Run Black (Check mode)
        run: poetry run black --check . --diff # Example from infra.yml

      - name: Run Ruff (if configured in poetry/scripts)
        run: |
          echo "TODO: Add Ruff command if configured"
          # poetry run ruff check .

      - name: Run Bandit security scan
        uses: mdegis/bandit-action@v1.1 # From python-tests.yml
        with:
          path: '.'
          level: medium # Or your preferred level
          confidence: medium # Or your preferred level
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yamllint and actionlint
        run: |
          pip install yamllint actionlint # Install directly if not in poetry dev deps

      - name: Lint all workflow YAMLs
        run: |
          yamllint .github/workflows/
          actionlint # Automatically finds workflows

      - name: Run Python Unit Tests (pytest)
        run: poetry run pytest tests/ # Adjust path to your tests
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080 # For tests using Firestore emulator

      - name: TODO - Lint and Test Dashboard
        run: |
          echo "TODO: Add steps to install Node.js, dashboard dependencies, run ESLint, Prettier, and dashboard tests"
          echo "Example: cd dashboard && npm ci && npm run lint && npm run test"

  build_and_push_agent:
    name: Build and Push Agent Image
    runs-on: ubuntu-latest
    needs: lint_and_test
    outputs:
      image_tag: ${{ github.sha }}
      agent_image_url: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Agent Docker image
        id: build_agent
        run: |
          IMAGE_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}"
          docker build -t "${IMAGE_URL}:${{ github.sha }}" \
                       -t "${IMAGE_URL}:latest" \
                       ./agent # Assumes Dockerfile is in ./agent
          docker push "${IMAGE_URL}:${{ github.sha }}"
          docker push "${IMAGE_URL}:latest"

  build_and_push_dashboard:
    name: Build and Push Dashboard Image
    runs-on: ubuntu-latest
    needs: lint_and_test
    outputs:
      image_tag: ${{ github.sha }} # Redundant if agent also outputs, but fine
      dashboard_image_url: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up Node.js for Dashboard build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }} # Match dashboard Dockerfile

      - name: Build and Push Dashboard Docker image
        id: build_dashboard
        run: |
          IMAGE_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}"
          # cd dashboard # If Dockerfile is inside dashboard/ and context is dashboard/
          docker build -t "${IMAGE_URL}:${{ github.sha }}" \
                       -t "${IMAGE_URL}:latest" \
                       ./dashboard # Assumes Dockerfile is in ./dashboard
          docker push "${IMAGE_URL}:${{ github.sha }}"
          docker push "${IMAGE_URL}:latest"
          # cd .. # Go back if cd dashboard was used

  deploy_dev:
    name: Deploy to Development
    needs: [build_and_push_agent, build_and_push_dashboard]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: ${{ steps.pulumi_up.outputs.agent_service_url }} # Example output
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (for Pulumi)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Pulumi
        uses: pulumi/actions@v5

      - name: Deploy to Dev Stack
        id: pulumi_up
        working-directory: ./infra
        run: |
          pulumi login
          pulumi select ${{ env.PULUMI_STACK_DEV }}
          pulumi config set agentImageUrl ${{ needs.build_and_push_agent.outputs.agent_image_url }}
          pulumi config set dashboardImageUrl ${{ needs.build_and_push_dashboard.outputs.dashboard_image_url }}
          pulumi up --yes
          # Capture an output, e.g., agent service URL for environment URL
          # Adjust the output name based on your Pulumi program's exports
          echo "agent_service_url=$(pulumi stack output agentServiceUrl)" >> $GITHUB_OUTPUT # Example output name
          # echo "dashboard_service_url=$(pulumi stack output dashboardServiceUrl)" >> $GITHUB_OUTPUT

  deploy_prod:
    name: Deploy to Production
    needs: [build_and_push_agent, build_and_push_dashboard]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.pulumi_up.outputs.agent_service_url }} # Example output
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (for Pulumi)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Pulumi
        uses: pulumi/actions@v5

      - name: Deploy to Prod Stack
        id: pulumi_up
        working-directory: ./infra
        run: |
          pulumi login
          pulumi select ${{ env.PULUMI_STACK_PROD }}
          pulumi config set agentImageUrl ${{ needs.build_and_push_agent.outputs.agent_image_url }}
          pulumi config set dashboardImageUrl ${{ needs.build_and_push_dashboard.outputs.dashboard_image_url }}
          pulumi up --yes
          echo "agent_service_url=$(pulumi stack output agentServiceUrl)" >> $GITHUB_OUTPUT # Example output name
          # echo "dashboard_service_url=$(pulumi stack output dashboardServiceUrl)" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build, Test, and Push Images
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up Python for Agent tests
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Match agent Dockerfile

      - name: Install Agent test dependencies and run tests
        working-directory: ./agent
        run: |
          pip install -r requirements.txt
          # pip install pytest # If not in requirements.txt
          # TODO: Create actual tests in agent/tests/
          # pytest tests/ # Or your specific test command
          echo "Skipping agent tests - no tests found or configured yet"

      - name: Build and Push Agent Docker image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}:latest \
                       ./agent
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.AGENT_DOCKER_REPO }}/${{ env.AGENT_IMAGE_NAME }}:latest

      - name: Set up Node.js for Dashboard build
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Match dashboard Dockerfile

      - name: Build and Push Dashboard Docker image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}:latest \
                       ./dashboard
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DASHBOARD_DOCKER_REPO }}/${{ env.DASHBOARD_IMAGE_NAME }}:latest 