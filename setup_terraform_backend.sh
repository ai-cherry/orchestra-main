#!/bin/bash
# Setup Terraform Backend in Google Cloud Storage
# This script creates a GCS bucket for Terraform state storage and enables versioning

set -e  # Exit on any error

# Text styling
BOLD="\033[1m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
NC="\033[0m"  # No Color

# Print section header
section() {
    echo ""
    echo -e "${BOLD}${BLUE}==== $1 ====${NC}"
    echo ""
}

# Print success message
success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Print warning message
warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

# Print error message
error() {
    echo -e "${RED}❌ $1${NC}"
}

# Variables
PROJECT_ID="cherry-ai-project"
REGION="us-west4"
BUCKET_NAME="orchestra-terraform-state"
FORCE_CREATE=${FORCE_CREATE:-false}

section "Terraform Backend Setup"

# Check for gcloud CLI
if ! command -v gcloud &> /dev/null; then
    error "gcloud CLI not found. Please install it first."
    exit 1
fi

# Check if logged in
ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null || echo "")
if [[ -z "$ACCOUNT" ]]; then
    error "You are not logged in to gcloud. Please run 'gcloud auth login' first."
    exit 1
fi

echo "Currently authenticated as: $ACCOUNT"
echo "Project ID: $PROJECT_ID"
echo "Region: $REGION"
echo "Bucket Name: $BUCKET_NAME"

# Set the project
echo "Setting project to $PROJECT_ID..."
gcloud config set project $PROJECT_ID

# Enable required APIs
section "Enabling required APIs"
echo "Enabling Storage API..."
gcloud services enable storage.googleapis.com

# Check if bucket already exists
BUCKET_EXISTS=$(gcloud storage ls --project=$PROJECT_ID gs://$BUCKET_NAME 2>/dev/null || echo "")

if [[ -n "$BUCKET_EXISTS" ]]; then
    if [[ "$FORCE_CREATE" == "true" ]]; then
        warning "Bucket $BUCKET_NAME already exists, but FORCE_CREATE is true. Recreating..."
        gcloud storage rm --recursive gs://$BUCKET_NAME
    else
        warning "Bucket $BUCKET_NAME already exists. Skipping creation."
        echo "To force recreation, run with FORCE_CREATE=true"
        
        # Check if versioning is enabled
        VERSIONING=$(gcloud storage buckets describe gs://$BUCKET_NAME --format="value(versioning.enabled)")
        if [[ "$VERSIONING" != "True" ]]; then
            echo "Enabling versioning on existing bucket..."
            gcloud storage buckets update gs://$BUCKET_NAME --versioning
            success "Versioning enabled on existing bucket"
        else
            success "Versioning already enabled on bucket"
        fi
        
        exit 0
    fi
fi

# Create the bucket
section "Creating Terraform state bucket"
echo "Creating bucket $BUCKET_NAME in $REGION..."
gcloud storage buckets create gs://$BUCKET_NAME \
    --project=$PROJECT_ID \
    --location=$REGION \
    --uniform-bucket-level-access

# Enable versioning
echo "Enabling versioning on bucket..."
gcloud storage buckets update gs://$BUCKET_NAME --versioning

success "Terraform state bucket created and configured"

# Create backend.tf file if it doesn't exist
section "Creating Terraform backend configuration"

for DIR in terraform terraform-example; do
    if [ -d "$DIR" ]; then
        BACKEND_FILE="$DIR/backend.tf"
        
        if [ -f "$BACKEND_FILE" ]; then
            warning "Backend configuration already exists at $BACKEND_FILE"
            echo "Backing up existing file to ${BACKEND_FILE}.bak"
            cp "$BACKEND_FILE" "${BACKEND_FILE}.bak"
        fi
        
        echo "Creating backend configuration at $BACKEND_FILE..."
        cat > "$BACKEND_FILE" << EOF
# Terraform backend configuration
# Generated by setup_terraform_backend.sh

terraform {
  backend "gcs" {
    bucket = "$BUCKET_NAME"
    prefix = "terraform/state"
  }
}
EOF
        
        success "Backend configuration created at $BACKEND_FILE"
    fi
done

section "Setup Complete"
echo "Terraform backend is now configured to use GCS bucket: $BUCKET_NAME"
echo "You can now run 'terraform init' to initialize your Terraform configuration"
echo ""
echo "To use different workspaces for environments:"
echo "  - terraform workspace new dev"
echo "  - terraform workspace new prod"
echo ""
echo "Remember to update your CI/CD pipelines to use this backend"