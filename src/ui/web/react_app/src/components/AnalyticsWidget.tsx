import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../store/store';
import { ChartBarIcon, ClockIcon, UserIcon, CpuChipIcon, BoltIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

export const AnalyticsWidget: React.FC = () => {
  const { analytics, totalMessages } = useSelector((state: RootState) => state.chat);
  const { metrics, services, isConnected } = useSelector((state: RootState) => state.system);
  const { metrics: agentMetrics } = useSelector((state: RootState) => state.agent);
  
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    
    return () => clearInterval(timer);
  }, []);

  const formatUptime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  const getHealthScore = () => {
    const onlineServices = services.filter(s => s.status === 'online').length;
    const totalServices = services.length;
    const serviceScore = (onlineServices / totalServices) * 40;
    
    const cpuScore = Math.max(0, (100 - metrics.cpu) * 0.3);
    const memoryScore = Math.max(0, (100 - metrics.memory.percentage) * 0.3);
    
    return Math.round(serviceScore + cpuScore + memoryScore);
  };

  const getPersonaUsageData = () => {
    return [
      { name: 'Cherry', percentage: 45, color: '#D32F2F' },
      { name: 'Sophia', percentage: 35, color: '#FFD700' },
      { name: 'Karen', percentage: 20, color: '#388E3C' },
    ];
  };

  const getRecentActivities = () => {
    return [
      { time: '2 min ago', activity: 'Image generated by Cherry', type: 'generation' },
      { time: '5 min ago', activity: 'Business report completed by Sophia', type: 'completion' },
      { time: '8 min ago', activity: 'File uploaded and processed', type: 'upload' },
      { time: '12 min ago', activity: 'Agent team created', type: 'team' },
      { time: '15 min ago', activity: 'System health check passed', type: 'system' },
    ];
  };

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'generation': return 'üé®';
      case 'completion': return '‚úÖ';
      case 'upload': return 'üìÅ';
      case 'team': return 'üë•';
      case 'system': return 'üîß';
      default: return 'üìä';
    }
  };

  const healthScore = getHealthScore();
  const personaData = getPersonaUsageData();
  const activities = getRecentActivities();

  return (
    <div className="w-full bg-white/5 backdrop-blur-lg rounded-3xl p-6 border border-white/10">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-white">Analytics Dashboard</h2>
        <div className="flex items-center gap-2 text-white/70 text-sm">
          <ClockIcon className="w-4 h-4" />
          {currentTime.toLocaleTimeString()}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* System Health Overview */}
        <div className="lg:col-span-1">
          <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">System Health</h3>
              <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'} animate-pulse`}></div>
            </div>
            
            {/* Health Score Circle */}
            <div className="flex items-center justify-center mb-6">
              <div className="relative w-32 h-32">
                <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="rgba(255,255,255,0.2)"
                    strokeWidth="8"
                    fill="none"
                  />
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="#4ecdc4"
                    strokeWidth="8"
                    fill="none"
                    strokeLinecap="round"
                    strokeDasharray={`${healthScore * 2.51} 251`}
                    className="transition-all duration-1000 ease-out"
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-2xl font-bold text-white">{healthScore}%</span>
                </div>
              </div>
            </div>

            {/* System Metrics */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-white/70 text-sm flex items-center gap-2">
                  <CpuChipIcon className="w-4 h-4" />
                  CPU Usage
                </span>
                <span className="text-white font-medium">{metrics.cpu}%</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-white/70 text-sm flex items-center gap-2">
                  <BoltIcon className="w-4 h-4" />
                  Memory
                </span>
                <span className="text-white font-medium">{metrics.memory.percentage}%</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-white/70 text-sm flex items-center gap-2">
                  <UserIcon className="w-4 h-4" />
                  Active Sessions
                </span>
                <span className="text-white font-medium">{metrics.activeSessions}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Usage Statistics */}
        <div className="lg:col-span-2">
          <div className="bg-white/5 rounded-2xl p-6 border border-white/10">
            <h3 className="text-lg font-semibold text-white mb-6">Usage Statistics</h3>
            
            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <div className="text-center p-4 bg-white/5 rounded-xl">
                <div className="text-2xl font-bold text-cherry-400">{totalMessages}</div>
                <div className="text-sm text-white/70">Total Messages</div>
              </div>
              <div className="text-center p-4 bg-white/5 rounded-xl">
                <div className="text-2xl font-bold text-sophia-400">{agentMetrics.tasksCompleted}</div>
                <div className="text-sm text-white/70">Tasks Completed</div>
              </div>
              <div className="text-center p-4 bg-white/5 rounded-xl">
                <div className="text-2xl font-bold text-karen-400">{agentMetrics.activeAgents}</div>
                <div className="text-sm text-white/70">Active Agents</div>
              </div>
              <div className="text-center p-4 bg-white/5 rounded-xl">
                <div className="text-2xl font-bold text-blue-400">{metrics.responseTime}ms</div>
                <div className="text-sm text-white/70">Avg Response</div>
              </div>
            </div>

            {/* Persona Usage Chart */}
            <div className="mb-6">
              <h4 className="text-white font-medium mb-3">Persona Usage Distribution</h4>
              <div className="space-y-3">
                {personaData.map((persona) => (
                  <div key={persona.name} className="flex items-center gap-3">
                    <div className="w-16 text-sm text-white/70">{persona.name}</div>
                    <div className="flex-1 bg-white/10 rounded-full h-3 overflow-hidden">
                      <div
                        className="h-full rounded-full transition-all duration-1000 ease-out"
                        style={{
                          width: `${persona.percentage}%`,
                          backgroundColor: persona.color,
                        }}
                      />
                    </div>
                    <div className="w-12 text-sm text-white font-medium text-right">
                      {persona.percentage}%
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Performance Trends */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="p-4 bg-white/5 rounded-xl">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                  <span className="text-sm text-white/70">Response Time Trend</span>
                </div>
                <div className="text-xl font-bold text-green-400">-12ms</div>
                <div className="text-xs text-white/50">vs last hour</div>
              </div>
              
              <div className="p-4 bg-white/5 rounded-xl">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                  <span className="text-sm text-white/70">Uptime</span>
                </div>
                <div className="text-xl font-bold text-blue-400">
                  {formatUptime(metrics.uptime)}
                </div>
                <div className="text-xs text-white/50">current session</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity Feed */}
      <div className="mt-6 bg-white/5 rounded-2xl p-6 border border-white/10">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-white">Recent Activity</h3>
          <button className="text-white/70 hover:text-white text-sm transition-colors">
            View All
          </button>
        </div>
        
        <div className="space-y-3 max-h-48 overflow-y-auto">
          {activities.map((activity, index) => (
            <div key={index} className="flex items-center gap-3 p-3 bg-white/5 rounded-lg hover:bg-white/10 transition-colors">
              <div className="text-lg">{getActivityIcon(activity.type)}</div>
              <div className="flex-1">
                <div className="text-white text-sm">{activity.activity}</div>
                <div className="text-white/50 text-xs">{activity.time}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="mt-6 flex flex-wrap gap-3">
        <button className="px-4 py-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-colors text-sm">
          <ChartBarIcon className="w-4 h-4 inline mr-2" />
          View Detailed Analytics
        </button>
        <button className="px-4 py-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30 transition-colors text-sm">
          Export Data
        </button>
        <button className="px-4 py-2 bg-purple-500/20 text-purple-400 rounded-lg hover:bg-purple-500/30 transition-colors text-sm">
          Generate Report
        </button>
      </div>

      {/* Warning for issues */}
      {services.some(s => s.status !== 'online') && (
        <div className="mt-4 p-3 bg-amber-500/10 border border-amber-500/30 rounded-lg flex items-center gap-2">
          <ExclamationTriangleIcon className="w-5 h-5 text-amber-400" />
          <span className="text-amber-400 text-sm">
            Some services are experiencing issues. Check system monitor for details.
          </span>
        </div>
      )}
    </div>
  );
}; 