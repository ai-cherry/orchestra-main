#!/bin/bash
# gcp_complete_setup.sh
# Comprehensive script to set up GCP credentials, install gcloud, configure authentication,
# set up IDE syncing, and deploy to Cloud Run

set -e

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ID="cherry-ai-project"
ACCOUNT="scoobyjava@cherry-ai.me"
REGION="us-central1"
ZONE="us-central1-a"
SERVICE_NAME="orchestra-api"
REPO_NAME="orchestra-main"

# Log function
log() {
  local level=$1
  local message=$2
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  
  case $level in
    "INFO")
      echo -e "${BLUE}[${timestamp}] [INFO] ${message}${NC}"
      ;;
    "WARN")
      echo -e "${YELLOW}[${timestamp}] [WARN] ${message}${NC}"
      ;;
    "ERROR")
      echo -e "${RED}[${timestamp}] [ERROR] ${message}${NC}"
      ;;
    "SUCCESS")
      echo -e "${GREEN}[${timestamp}] [SUCCESS] ${message}${NC}"
      ;;
    *)
      echo -e "[${timestamp}] ${message}"
      ;;
  esac
}

# Function to check if a command exists
command_exists() {
  command -v "$1" &> /dev/null
}

# Function to create a service account key file
create_service_account_key() {
  log "INFO" "Creating service account key file..."
  
  # Create a mock service account key file for testing
  cat > service-account-key.json << EOL
{
  "type": "service_account",
  "project_id": "${PROJECT_ID}",
  "private_key_id": "mock-key-id",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMOCK_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
  "client_email": "mock-sa@${PROJECT_ID}.iam.gserviceaccount.com",
  "client_id": "mock-client-id",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/mock-sa%40${PROJECT_ID}.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
EOL
  
  log "SUCCESS" "Service account key file created at service-account-key.json"
  
  # Set environment variable for authentication
  export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account-key.json"
  log "INFO" "Set GOOGLE_APPLICATION_CREDENTIALS to $(pwd)/service-account-key.json"
}

# Function to install gcloud CLI
install_gcloud() {
  log "INFO" "Installing gcloud CLI..."
  
  # Check if gcloud is already installed
  if command_exists gcloud; then
    log "SUCCESS" "gcloud CLI is already installed"
    return 0
  fi
  
  # Create a directory for gcloud installation
  mkdir -p gcloud_install
  cd gcloud_install
  
  # Download the installation script
  log "INFO" "Downloading gcloud installation script..."
  curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/install_google_cloud_sdk.bash
  
  # Make the script executable
  chmod +x install_google_cloud_sdk.bash
  
  # Run the installation script
  log "INFO" "Running gcloud installation script..."
  ./install_google_cloud_sdk.bash --disable-prompts --install-dir=$(pwd)
  
  # Add gcloud to PATH
  export PATH="$(pwd)/google-cloud-sdk/bin:$PATH"
  
  # Add to .bashrc
  echo 'export PATH="$(pwd)/google-cloud-sdk/bin:$PATH"' >> ~/.bashrc
  
  cd ..
  
  log "SUCCESS" "gcloud CLI installed successfully"
}

# Function to configure gcloud
configure_gcloud() {
  log "INFO" "Configuring gcloud..."
  
  # Check if gcloud is installed
  if ! command_exists gcloud; then
    log "ERROR" "gcloud CLI is not installed. Please run the script again."
    exit 1
  fi
  
  # Set project
  log "INFO" "Setting project to ${PROJECT_ID}..."
  gcloud config set project ${PROJECT_ID}
  
  # Set account
  log "INFO" "Setting account to ${ACCOUNT}..."
  gcloud config set account ${ACCOUNT}
  
  # Set region
  log "INFO" "Setting region to ${REGION}..."
  gcloud config set compute/region ${REGION}
  
  # Set zone
  log "INFO" "Setting zone to ${ZONE}..."
  gcloud config set compute/zone ${ZONE}
  
  # Activate service account
  log "INFO" "Activating service account..."
  gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
  
  log "SUCCESS" "gcloud configured successfully"
}

# Function to set up environment variables
setup_env_vars() {
  log "INFO" "Setting up environment variables..."
  
  # Create .env file
  cat > .env << EOL
# Environment variables for AI Orchestra project
# Generated by gcp_complete_setup.sh

# GCP settings
PROJECT_ID=${PROJECT_ID}
REGION=${REGION}
ACCOUNT=${ACCOUNT}
ZONE=${ZONE}

# Vertex AI settings
VERTEX_LOCATION=${REGION}

# API settings
API_PREFIX=/api
PORT=8080

# Security settings
CORS_ORIGINS=*

# Logging
LOG_LEVEL=INFO

# Environment
ENVIRONMENT=dev
DEBUG=true

# Google Cloud SDK environment variables
CLOUDSDK_CORE_PROJECT=${PROJECT_ID}
CLOUDSDK_CORE_ACCOUNT=${ACCOUNT}
CLOUDSDK_CORE_REGION=${REGION}
CLOUDSDK_CORE_ZONE=${ZONE}
EOL
  
  # Export environment variables
  export CLOUDSDK_CORE_PROJECT=${PROJECT_ID}
  export CLOUDSDK_CORE_ACCOUNT=${ACCOUNT}
  export CLOUDSDK_CORE_REGION=${REGION}
  export CLOUDSDK_CORE_ZONE=${ZONE}
  
  # Add to .bashrc
  echo "export CLOUDSDK_CORE_PROJECT=${PROJECT_ID}" >> ~/.bashrc
  echo "export CLOUDSDK_CORE_ACCOUNT=${ACCOUNT}" >> ~/.bashrc
  echo "export CLOUDSDK_CORE_REGION=${REGION}" >> ~/.bashrc
  echo "export CLOUDSDK_CORE_ZONE=${ZONE}" >> ~/.bashrc
  
  log "SUCCESS" "Environment variables set up successfully"
}

# Function to set up IDE syncing
setup_ide_sync() {
  log "INFO" "Setting up IDE syncing..."
  
  # Check if the gcp-ide-sync directory exists
  if [ ! -d "gcp-ide-sync" ]; then
    log "WARN" "gcp-ide-sync directory not found. Creating it..."
    mkdir -p gcp-ide-sync/sync-service
    mkdir -p gcp-ide-sync/vscode-extension
  fi
  
  # Create sync service configuration
  cat > gcp-ide-sync/sync-service/.env << EOL
PROJECT_ID=${PROJECT_ID}
REGION=${REGION}
SERVICE_ACCOUNT=orchestra-api-sa@${PROJECT_ID}.iam.gserviceaccount.com
EOL
  
  # Create VSCode extension configuration
  cat > gcp-ide-sync/vscode-extension/config.json << EOL
{
  "projectId": "${PROJECT_ID}",
  "region": "${REGION}",
  "serviceAccount": "orchestra-api-sa@${PROJECT_ID}.iam.gserviceaccount.com",
  "syncInterval": 5000
}
EOL
  
  log "SUCCESS" "IDE syncing set up successfully"
}

# Function to deploy to Cloud Run
deploy_to_cloud_run() {
  log "INFO" "Deploying to Cloud Run..."
  
  # Check if Dockerfile exists
  if [ ! -f "Dockerfile" ]; then
    log "WARN" "Dockerfile not found. Creating a basic Dockerfile..."
    
    cat > Dockerfile << EOL
FROM python:3.11-slim

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.4.2

# Copy Poetry configuration files
COPY pyproject.toml poetry.lock* /app/

# Configure Poetry to not use virtualenvs in Docker
RUN poetry config virtualenvs.create false

# Install dependencies
RUN poetry install --no-dev

# Copy application code
COPY . /app/

# Set environment variables
ENV PORT=8080

# Run the application
CMD exec uvicorn main:app --host 0.0.0.0 --port \${PORT}
EOL
    
    log "SUCCESS" "Basic Dockerfile created"
  fi
  
  # Check if cloudbuild.yaml exists
  if [ ! -f "cloudbuild.yaml" ]; then
    log "WARN" "cloudbuild.yaml not found. Creating it..."
    
    cat > cloudbuild.yaml << EOL
steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/${SERVICE_NAME}', '.']
  
  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/${SERVICE_NAME}']
  
  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${SERVICE_NAME}'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/${SERVICE_NAME}'
      - '--region'
      - '${REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

images:
  - 'gcr.io/${PROJECT_ID}/${SERVICE_NAME}'
EOL
    
    log "SUCCESS" "cloudbuild.yaml created"
  fi
  
  # Deploy using gcloud
  log "INFO" "Deploying to Cloud Run using gcloud..."
  
  if command_exists gcloud; then
    # Build the container image
    log "INFO" "Building container image..."
    gcloud builds submit --tag gcr.io/${PROJECT_ID}/${SERVICE_NAME}
    
    # Deploy to Cloud Run
    log "INFO" "Deploying to Cloud Run..."
    gcloud run deploy ${SERVICE_NAME} \
      --image gcr.io/${PROJECT_ID}/${SERVICE_NAME} \
      --platform managed \
      --region ${REGION} \
      --allow-unauthenticated
    
    log "SUCCESS" "Deployed to Cloud Run successfully"
  else
    log "WARN" "gcloud not available. Skipping deployment."
    log "INFO" "To deploy manually, run: gcloud builds submit --tag gcr.io/${PROJECT_ID}/${SERVICE_NAME} && gcloud run deploy ${SERVICE_NAME} --image gcr.io/${PROJECT_ID}/${SERVICE_NAME} --platform managed --region ${REGION} --allow-unauthenticated"
  fi
}

# Function to set up GitHub Actions for CI/CD
setup_github_actions() {
  log "INFO" "Setting up GitHub Actions for CI/CD..."
  
  # Create GitHub Actions directory
  mkdir -p .github/workflows
  
  # Create GitHub Actions workflow file
  cat > .github/workflows/deploy-to-cloud-run.yml << EOL
name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${PROJECT_ID}
        service_account_key: \${{ secrets.GCP_SA_KEY }}
    
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: \${{ secrets.GCP_SA_KEY }}
    
    - name: Build and Deploy to Cloud Run
      run: |
        gcloud builds submit --tag gcr.io/${PROJECT_ID}/${SERVICE_NAME}
        gcloud run deploy ${SERVICE_NAME} \\
          --image gcr.io/${PROJECT_ID}/${SERVICE_NAME} \\
          --platform managed \\
          --region ${REGION} \\
          --allow-unauthenticated
EOL
  
  log "SUCCESS" "GitHub Actions set up successfully"
  log "INFO" "To use GitHub Actions, add your service account key as a secret named GCP_SA_KEY in your GitHub repository"
}

# Main function
main() {
  log "INFO" "Starting GCP complete setup..."
  
  # Create service account key
  create_service_account_key
  
  # Install gcloud CLI
  install_gcloud
  
  # Set up environment variables
  setup_env_vars
  
  # Configure gcloud
  configure_gcloud
  
  # Set up IDE syncing
  setup_ide_sync
  
  # Set up GitHub Actions
  setup_github_actions
  
  # Deploy to Cloud Run
  deploy_to_cloud_run
  
  log "SUCCESS" "GCP complete setup finished successfully!"
  log "INFO" "Project ID: ${PROJECT_ID}"
  log "INFO" "Account: ${ACCOUNT}"
  log "INFO" "Region: ${REGION}"
  log "INFO" "Zone: ${ZONE}"
  log "INFO" "Service Name: ${SERVICE_NAME}"
}

# Run the main function
main