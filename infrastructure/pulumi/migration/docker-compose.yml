version: '3.8'

services:
  # Pulumi Migration Framework
  pulumi-migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: pulumi-migration:latest
    container_name: pulumi-migration
    environment:
      # Pulumi configuration
      PULUMI_ACCESS_TOKEN: ${PULUMI_ACCESS_TOKEN}
      PULUMI_CONFIG_PASSPHRASE: ${PULUMI_CONFIG_PASSPHRASE:-}
      PULUMI_BACKEND_URL: ${PULUMI_BACKEND_URL:-file://~/.pulumi}
      
      # Vultr configuration
      VULTR_CREDENTIALS_PATH: /app/credentials/Vultr-key.json
      Vultr_PROJECT_ID: ${Vultr_PROJECT_ID}
      Vultr_REGION: ${Vultr_REGION:-us-central1}
      
      # Migration configuration
      MIGRATION_ENVIRONMENT: ${MIGRATION_ENVIRONMENT:-dev}
      MIGRATION_DRY_RUN: ${MIGRATION_DRY_RUN:-false}
      MIGRATION_PARALLELISM: ${MIGRATION_PARALLELISM:-5}
      MIGRATION_LOG_LEVEL: ${MIGRATION_LOG_LEVEL:-info}
      
      # Performance tuning
      NODE_OPTIONS: "--max-old-space-size=4096"
      UV_THREADPOOL_SIZE: 128
    volumes:
      # Mount credentials
      - ${Vultr_CREDENTIALS_PATH:-./credentials}:/app/credentials:ro
      
      # Mount Pulumi state (for file backend)
      - ${PULUMI_HOME:-~/.pulumi}:/root/.pulumi
      
      # Mount migration state
      - ./migration-state:/app/.pulumi-migration
      
      # Mount reports
      - ./reports:/app/reports
      
      # Mount custom configuration
      - ./config:/app/config:ro
    networks:
      - pulumi-network
    restart: unless-stopped
    mem_limit: 4g
    mem_reservation: 2g
    cpus: 2
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Local state storage (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: pulumi-postgres
    environment:
      POSTGRES_DB: pulumi_migration
      POSTGRES_USER: pulumi
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pulumi123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pulumi-network
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pulumi -d pulumi_migration"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: pulumi-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - pulumi-network
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pulumi-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pulumi-network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pulumi-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    networks:
      - pulumi-network
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  pulumi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local