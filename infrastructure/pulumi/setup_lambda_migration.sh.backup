#!/bin/bash
set -e

# Lambda Labs Infrastructure Migration Setup Script
# This script helps configure and test the unified Lambda Labs infrastructure

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check for required environment variables
if [ -z "${PULUMI_ACCESS_TOKEN:-}" ]; then
    echo "‚ùå Error: PULUMI_ACCESS_TOKEN environment variable not set"
    echo "üí° Set it with: export PULUMI_ACCESS_TOKEN=your_token_here"
    exit 1
fi

# Configuration
PERPLEXITY_API_KEY="${PERPLEXITY_API_KEY}"

# Set up environment
export PATH=$PATH:$HOME/.pulumi/bin

echo -e "${BLUE}Step 1: Verifying Pulumi installation...${NC}"
if ! command -v pulumi &> /dev/null; then
    echo -e "${RED}‚ùå Pulumi not found in PATH${NC}"
    exit 1
fi

pulumi version
echo -e "${GREEN}‚úÖ Pulumi is installed and accessible${NC}"

echo -e "\n${BLUE}Step 2: Checking current stack status...${NC}"
pulumi stack ls

echo -e "\n${BLUE}Step 3: Configuring API keys...${NC}"

# Configure Perplexity API key
echo "Setting Perplexity API key..."
pulumi config set --secret perplexity_api_key "$PERPLEXITY_API_KEY"
echo -e "${GREEN}‚úÖ Perplexity API key configured${NC}"

# Check for Lambda Labs API key
echo -e "\n${YELLOW}‚ö†Ô∏è  Lambda Labs API Key Required${NC}"
echo "Please provide your Lambda Labs API key:"
echo "You can find it at: https://cloud.lambdalabs.com/api-keys"
read -s -p "Lambda Labs API Key: " LAMBDA_API_KEY
echo

if [ -z "$LAMBDA_API_KEY" ]; then
    echo -e "${RED}‚ùå Lambda Labs API key is required${NC}"
    exit 1
fi

pulumi config set --secret lambda_api_key "$LAMBDA_API_KEY"
echo -e "${GREEN}‚úÖ Lambda Labs API key configured${NC}"

# Check for SSH key ID
echo -e "\n${YELLOW}‚ö†Ô∏è  Lambda Labs SSH Key ID Required${NC}"
echo "Please provide your Lambda Labs SSH key ID:"
echo "You can find it at: https://cloud.lambdalabs.com/ssh-keys"
read -p "SSH Key ID: " SSH_KEY_ID

if [ -z "$SSH_KEY_ID" ]; then
    echo -e "${RED}‚ùå SSH Key ID is required${NC}"
    exit 1
fi

pulumi config set lambda_ssh_key_id "$SSH_KEY_ID"
echo -e "${GREEN}‚úÖ SSH Key ID configured${NC}"

echo -e "\n${BLUE}Step 4: Setting default configuration values...${NC}"

# Set default values
pulumi config set lambda_instance_type "gpu_1x_a10"
pulumi config set lambda_region "us-west-1"
pulumi config set lambda_instance_name "orchestra-dev"
pulumi config set sync_enabled "true"
pulumi config set sync_local_path "/Users/lynnmusil/orchestra-dev"
pulumi config set sync_remote_path "/home/ubuntu/orchestra-main"
pulumi config set ssh_private_key_path "~/.ssh/id_rsa"

echo -e "${GREEN}‚úÖ Default configuration values set${NC}"

echo -e "\n${BLUE}Step 5: Verifying configuration...${NC}"
pulumi config

echo -e "\n${BLUE}Step 6: Testing Lambda Labs API connectivity...${NC}"

# Test Lambda Labs API
echo "Testing Lambda Labs API connection..."
LAMBDA_TEST=$(curl -s -H "Authorization: Bearer $LAMBDA_API_KEY" \
    https://cloud.lambdalabs.com/api/v1/instances || echo "FAILED")

if [[ "$LAMBDA_TEST" == *"FAILED"* ]]; then
    echo -e "${RED}‚ùå Lambda Labs API test failed${NC}"
    echo "Please check your API key and network connection"
    exit 1
else
    echo -e "${GREEN}‚úÖ Lambda Labs API connection successful${NC}"
fi

echo -e "\n${BLUE}Step 7: Checking SSH key...${NC}"

# Check if SSH key exists
SSH_KEY_PATH="$HOME/.ssh/id_rsa"
if [ ! -f "$SSH_KEY_PATH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  SSH key not found at $SSH_KEY_PATH${NC}"
    echo "Please ensure your SSH private key is available"
    read -p "Enter path to your SSH private key: " CUSTOM_SSH_PATH
    if [ -f "$CUSTOM_SSH_PATH" ]; then
        pulumi config set ssh_private_key_path "$CUSTOM_SSH_PATH"
        echo -e "${GREEN}‚úÖ Custom SSH key path configured${NC}"
    else
        echo -e "${RED}‚ùå SSH key not found at specified path${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ SSH key found at $SSH_KEY_PATH${NC}"
fi

echo -e "\n${BLUE}Step 8: Creating backup of current state...${NC}"

# Create backup
BACKUP_DIR="../legacy/backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Export current stack state if it exists
if pulumi stack export --file "$BACKUP_DIR/stack-state.json" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Stack state backed up to $BACKUP_DIR/stack-state.json${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No existing stack state to backup${NC}"
fi

echo -e "\n${BLUE}Step 9: Preview infrastructure changes...${NC}"
echo "Running Pulumi preview to show what will be created..."

if pulumi preview; then
    echo -e "${GREEN}‚úÖ Preview completed successfully${NC}"
else
    echo -e "${RED}‚ùå Preview failed${NC}"
    echo "Please check the configuration and try again"
    exit 1
fi

echo -e "\n${GREEN}üéâ Setup completed successfully!${NC}"
echo "=========================================="
echo -e "${BLUE}Next steps:${NC}"
echo "1. Review the preview output above"
echo "2. Run: ${YELLOW}pulumi up${NC} to deploy the infrastructure"
echo "3. After deployment, use the generated scripts:"
echo "   - ${YELLOW}./sync_to_lambda.sh${NC} - Sync files to Lambda"
echo "   - ${YELLOW}./lambda_dev_shortcuts.sh ssh${NC} - SSH to instance"
echo "   - ${YELLOW}./lambda_dev_shortcuts.sh code${NC} - Open VS Code"
echo "   - ${YELLOW}./check_lambda_health.sh${NC} - Check instance health"
echo ""
echo -e "${BLUE}Configuration summary:${NC}"
echo "- Instance Type: $(pulumi config get lambda_instance_type)"
echo "- Region: $(pulumi config get lambda_region)"
echo "- Sync Enabled: $(pulumi config get sync_enabled)"
echo "- Local Path: $(pulumi config get sync_local_path)"
echo "- Remote Path: $(pulumi config get sync_remote_path)"
echo ""
echo -e "${GREEN}Ready to deploy! Run 'pulumi up' when ready.${NC}" 
