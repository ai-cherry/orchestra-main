# Lambda Labs Infrastructure Migration Plan
## Local Development with Lambda Sync

### Current State Analysis

**Scattered Infrastructure Files:**
- `legacy/infra/dev/` - Original Lambda Labs Pulumi setup with `pulumi_lambdalabs` provider
- `infrastructure/lambda_labs_infrastructure.py` - API-based Lambda Labs management
- `infrastructure/pulumi/__main__.py` - Mixed AWS/Lambda infrastructure
- Multiple configuration files across different directories

**Issues Identified:**
1. **Provider Inconsistency**: Using both `pulumi_lambdalabs` (legacy) and API calls (current)
2. **Configuration Drift**: Multiple Pulumi.yaml files with different schemas
3. **Code Duplication**: Similar Lambda Labs logic in multiple files
4. **Local/Remote Sync**: No clear strategy for local development with Lambda deployment

### Migration Strategy

#### Phase 1: Consolidate Infrastructure (Immediate)

**1.1 Create Unified Lambda Labs Component**
```python
# infrastructure/pulumi/components/lambda_labs_component.py
class LambdaLabsComponent(pulumi.ComponentResource):
    """Unified Lambda Labs instance management with local sync support"""
    
    def __init__(self, name: str, args: LambdaLabsArgs, opts=None):
        # Support both API-based and provider-based deployment
        # Include local development sync capabilities
        # Standardized configuration management
```

**1.2 Standardize Configuration Schema**
```yaml
# infrastructure/pulumi/Pulumi.yaml (Updated)
name: orchestra-ai-infrastructure
runtime: python
description: Orchestra AI unified infrastructure with Lambda Labs

config:
  # Lambda Labs Configuration
  lambda:api_key:
    type: string
    secret: true
  lambda:ssh_key_id:
    type: string
  lambda:instance_type:
    type: string
    default: gpu_1x_a10
  lambda:region:
    type: string
    default: us-west-1
  
  # Local Development Sync
  sync:enabled:
    type: boolean
    default: true
  sync:local_path:
    type: string
    default: /Users/lynnmusil/orchestra-dev
  sync:remote_path:
    type: string
    default: /home/ubuntu/orchestra-main
```

**1.3 Create Migration Scripts**
- Backup existing configurations
- Migrate stack state
- Update environment variables
- Test connectivity

#### Phase 2: Local Development Integration

**2.1 Sync Mechanism**
```bash
# scripts/sync_to_lambda.sh
#!/bin/bash
# Intelligent sync with exclusions and conflict resolution
rsync -avz --exclude-from=.lambdasync-ignore \
  /Users/lynnmusil/orchestra-dev/ \
  ubuntu@$LAMBDA_IP:/home/ubuntu/orchestra-main/
```

**2.2 Development Workflow**
1. **Local Development**: Code locally in `/Users/lynnmusil/orchestra-dev`
2. **Automatic Sync**: File watcher syncs changes to Lambda instance
3. **Remote Execution**: Run tests/services on Lambda GPU instance
4. **Bidirectional Sync**: Pull logs/results back to local

**2.3 VS Code Integration**
```json
// .vscode/settings.json
{
  "remote.SSH.remotePlatform": {
    "lambda-instance": "linux"
  },
  "files.watcherExclude": {
    "**/.git/**": true,
    "**/node_modules/**": true,
    "**/__pycache__/**": true
  }
}
```

#### Phase 3: Infrastructure Cleanup

**3.1 File Consolidation**
```
infrastructure/
├── pulumi/
│   ├── Pulumi.yaml                    # Unified configuration
│   ├── __main__.py                    # Main stack orchestration
│   ├── requirements.txt               # Updated dependencies
│   ├── components/
│   │   ├── lambda_labs_component.py   # Unified Lambda Labs management
│   │   ├── sync_component.py          # Local/remote sync management
│   │   └── monitoring_component.py    # Health checks and monitoring
│   └── stacks/
│       ├── development.py             # Dev environment
│       ├── staging.py                 # Staging environment
│       └── production.py              # Production environment
├── sync/
│   ├── sync_to_lambda.sh              # Sync script
│   ├── .lambdasync-ignore             # Sync exclusions
│   └── sync_monitor.py                # File watcher
└── legacy/                            # Archive old files
    └── infra/                         # Moved from root
```

**3.2 Remove Deprecated Files**
- `legacy/infra/dev/__main__.py` → Archive
- `infrastructure/lambda_labs_infrastructure.py` → Refactor into component
- Duplicate configuration files → Consolidate

### Implementation Steps

#### Step 1: Backup and Archive (Today)
```bash
# Create backup of current state
mkdir -p infrastructure/legacy/backup-$(date +%Y%m%d)
cp -r legacy/infra/ infrastructure/legacy/backup-$(date +%Y%m%d)/
cp infrastructure/lambda_labs_infrastructure.py infrastructure/legacy/backup-$(date +%Y%m%d)/

# Export current Pulumi state
pulumi stack export --file infrastructure/legacy/backup-$(date +%Y%m%d)/stack-state.json
```

#### Step 2: Create Unified Component (Today)
```python
# infrastructure/pulumi/components/lambda_labs_component.py
class LambdaLabsComponent(pulumi.ComponentResource):
    """Production-ready Lambda Labs component with local sync"""
    
    def __init__(self, name: str, args: LambdaLabsArgs, opts=None):
        super().__init__("orchestra:LambdaLabs", name, None, opts)
        
        # Instance management (API-based for reliability)
        self._create_instance(args)
        
        # Local sync setup
        if args.sync_enabled:
            self._setup_sync(args)
        
        # Monitoring and health checks
        self._setup_monitoring()
        
        # Development tools
        self._setup_dev_tools(args)
```

#### Step 3: Update Main Stack (Today)
```python
# infrastructure/pulumi/__main__.py
from components.lambda_labs_component import LambdaLabsComponent, LambdaLabsArgs

# Create Lambda Labs instance with sync
lambda_instance = LambdaLabsComponent(
    "orchestra-lambda",
    LambdaLabsArgs(
        instance_type=config.get("lambda:instance_type"),
        region=config.get("lambda:region"),
        api_key=config.require_secret("lambda:api_key"),
        ssh_key_id=config.require("lambda:ssh_key_id"),
        sync_enabled=config.get_bool("sync:enabled"),
        local_path=config.get("sync:local_path"),
        remote_path=config.get("sync:remote_path")
    )
)
```

#### Step 4: Configure API Keys (Today)
```bash
# Set Pulumi configuration
export PATH=$PATH:$HOME/.pulumi/bin
export PULUMI_ACCESS_TOKEN="your_pulumi_token_here"

pulumi config set --secret lambda:api_key "YOUR_LAMBDA_API_KEY"
pulumi config set --secret perplexity:api_key "YOUR_PERPLEXITY_API_KEY"
pulumi config set lambda:ssh_key_id "YOUR_SSH_KEY_ID"
pulumi config set sync:enabled true
pulumi config set sync:local_path "/Users/lynnmusil/orchestra-dev"
```

#### Step 5: Test Migration (Today)
```bash
# Preview changes
pulumi preview

# Deploy with monitoring
pulumi up --yes

# Test sync functionality
./infrastructure/sync/sync_to_lambda.sh

# Verify remote connectivity
ssh ubuntu@$(pulumi stack output ip_address) "ls -la /home/ubuntu/orchestra-main"
```

### Benefits of This Approach

1. **Unified Infrastructure**: Single source of truth for Lambda Labs resources
2. **Local Development**: Code locally with full IDE support
3. **GPU Execution**: Run ML/AI workloads on Lambda GPU instances
4. **Automatic Sync**: Seamless file synchronization
5. **Cost Optimization**: Only pay for Lambda instances when needed
6. **Version Control**: All infrastructure as code
7. **Monitoring**: Built-in health checks and logging

### Risk Mitigation

1. **State Backup**: Full Pulumi state backup before migration
2. **Gradual Migration**: Phase-by-phase implementation
3. **Rollback Plan**: Ability to revert to legacy setup
4. **Testing**: Comprehensive testing at each phase
5. **Documentation**: Complete migration documentation

### Next Actions

1. **Execute Step 1**: Create backups and archive legacy files
2. **Execute Step 2**: Implement unified Lambda Labs component
3. **Execute Step 3**: Update main Pulumi stack
4. **Execute Step 4**: Configure API keys and secrets
5. **Execute Step 5**: Test and validate migration

This migration will provide a clean, maintainable infrastructure setup optimized for local development with Lambda Labs GPU instances. 