# Granting Service Account Access for Workload Identity Federation

Now that you've set up the Workload Identity Federation provider, the next step is to grant access to a service account. This involves:

1. Creating a service account (if you don't already have one)
2. Granting the service account necessary permissions
3. Allowing GitHub Actions to impersonate this service account

## Step 1: Create a Service Account

If you don't already have a service account for GitHub Actions, create one:

```bash
gcloud iam service-accounts create github-actions-sa \
  --project=cherry-ai-project \
  --description="Service account for GitHub Actions" \
  --display-name="GitHub Actions Service Account"
```

## Step 2: Grant Necessary Permissions

Grant the service account the permissions it needs to deploy to Cloud Run and access other GCP resources:

```bash
# Grant Cloud Run Admin role
gcloud projects add-iam-policy-binding cherry-ai-project \
  --member="serviceAccount:github-actions-sa@cherry-ai-project.iam.gserviceaccount.com" \
  --role="roles/run.admin"

# Grant Storage Admin role (for pushing to Container Registry)
gcloud projects add-iam-policy-binding cherry-ai-project \
  --member="serviceAccount:github-actions-sa@cherry-ai-project.iam.gserviceaccount.com" \
  --role="roles/storage.admin"

# Grant Service Account User role (to act as the service account)
gcloud projects add-iam-policy-binding cherry-ai-project \
  --member="serviceAccount:github-actions-sa@cherry-ai-project.iam.gserviceaccount.com" \
  --role="roles/iam.serviceAccountUser"
```

## Step 3: Allow GitHub Actions to Impersonate the Service Account

This is the critical step that connects your GitHub repository to the service account:

```bash
gcloud iam service-accounts add-iam-policy-binding \
  github-actions-sa@cherry-ai-project.iam.gserviceaccount.com \
  --project=cherry-ai-project \
  --role="roles/iam.workloadIdentityUser" \
  --member="principalSet://iam.googleapis.com/projects/525398941159/locations/global/workloadIdentityPools/github-wif-pool/attribute.repository/ai-cherry/orchestra-main"
```

Make sure to replace:
- `github-actions-sa` with your actual service account name
- `cherry-ai-project` with your actual GCP project ID
- `525398941159` with your actual GCP project number
- `github-wif-pool` with your actual Workload Identity Pool name
- `ai-cherry/orchestra-main` with your actual GitHub organization/username and repository name

## Step 4: Update GitHub Actions Workflow

Finally, update your GitHub Actions workflow to use Workload Identity Federation:

```yaml
- id: auth
  name: Authenticate to Google Cloud
  uses: google-github-actions/auth@v1
  with:
    token_format: 'access_token'
    workload_identity_provider: 'projects/525398941159/locations/global/workloadIdentityPools/github-wif-pool/providers/github-actions'
    service_account: 'github-actions-sa@cherry-ai-project.iam.gserviceaccount.com'
```

## Step 5: Add GitHub Secrets

Add these secrets to your GitHub repository:
- `GCP_PROJECT_ID`: Your GCP project ID (e.g., "cherry-ai-project")
- `GCP_REGION`: Your GCP region (e.g., "us-central1")
- `GCP_WORKLOAD_IDENTITY_PROVIDER`: The full resource name of your Workload Identity Provider (e.g., "projects/525398941159/locations/global/workloadIdentityPools/github-wif-pool/providers/github-actions")
- `GCP_SERVICE_ACCOUNT`: The email of your service account (e.g., "github-actions-sa@cherry-ai-project.iam.gserviceaccount.com")