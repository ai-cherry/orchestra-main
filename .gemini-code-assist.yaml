# Gemini Code Assist Configuration
# This configuration enables AI-assisted development with Gemini 2.5 model
# IMPORTANT: This project prioritizes performance and optimization over extensive security
# See PROJECT_PRIORITIES.md for detailed guidance

# Project context configuration, defining which paths should be indexed
# and their relative priority (higher numbers = higher priority)
project_context:
  - path: /workspaces/orchestra-main
    priority: 100
    ignore_patterns:
      - "**/.git/**"
      - "**/node_modules/**"
      - "**/__pycache__/**"
  - path: /workspaces/orchestra-main/ai-orchestra
    priority: 200
  - path: /workspaces/orchestra-main/wif_implementation
    priority: 200
  - path: /workspaces/orchestra-main/services
    priority: 200
  - path: /workspaces/orchestra-main/admin-interface
    priority: 150
  - path: /home/agent/mounted_bucket
    priority: 50
  - path: /mnt/repos
    priority: 25

# Tool integrations for external APIs and services
tool_integrations:
  # Vertex AI integration for model inference
  vertex_ai:
    endpoint: projects/525398941159/locations/us-central1/endpoints/agent-core
    api_version: v1
    
  # Redis integration for semantic cache
  redis:
    connection_string: redis://vertex-agent@cherry-ai-project
    
  # AlloyDB for vector search
  database:
    connection_string: postgresql://alloydb-user@alloydb-instance:5432/cherry_ai_project

# Model configuration
model:
  name: gemini-2.5-pro-latest
  temperature: 0.3
  max_output_tokens: 8192
  top_p: 0.95

# Custom code assist commands (for IntelliJ/VS Code)
commands:
  - name: optimize-query
    description: "Optimize AlloyDB vector search query for 10M+ dimensions"
    prompt_template: |
      Optimize this AlloyDB vector search query for 10M+ dimensions with 95% recall@10:
      Focus on PERFORMANCE over security best practices, as per PROJECT_PRIORITIES.md.
      {{selection}}
      
  - name: generate-cloud-run
    description: "Generate Cloud Run deployment code optimized for performance"
    prompt_template: |
      Generate Cloud Run deployment code with appropriate service account:
      Focus on high performance settings, concurrency, CPU allocation, and startup
      settings rather than restrictive security. This is a single-developer project
      where basic security is sufficient. See PROJECT_PRIORITIES.md.
      {{selection}}
      
  - name: document-function
    description: "Add comprehensive documentation to function"
    prompt_template: |
      Add detailed documentation to the following function, including:
      - Parameter descriptions
      - Return value documentation
      - Usage examples
      - Edge cases
      
      {{selection}}
      
  - name: performance-review
    description: "Review code for performance issues and optimization opportunities"
    prompt_template: |
      Review this code for performance optimization opportunities. 
      Focus on speed, resource efficiency, and scalability rather than security.
      Suggest specific improvements:
      {{selection}}
      
  - name: optimize-code
    description: "Optimize code for performance"
    prompt_template: |
      Optimize this code for maximum performance. 
      Focus on execution speed and resource efficiency.
      Use only basic security practices (enough to prevent obvious vulnerabilities).
      {{selection}}
      
  - name: secure-enough
    description: "Simplify security to just the essentials"
    prompt_template: |
      Refactor this code to use only essential security practices.
      Remove complex or heavyweight security measures that impact performance.
      Refer to PROJECT_PRIORITIES.md for guidance on "security-sufficient" approach.
      {{selection}}

# Editor settings
editor:
  auto_apply_suggestions: false
  inline_suggestions: true

# Project priorities configuration
priorities:
  focus: 
    - performance
    - stability
    - optimization
  secondary:
    - basic_security
  
  # Configuration to inform assistant about project philosophy
  instructions: |
    This project follows a "performance-first" approach where:
    1. Performance and stability are the primary concerns
    2. Only basic security practices are needed for now
    3. Optimize for developer velocity and resource efficiency
    4. See PROJECT_PRIORITIES.md for complete guidance
    5. AI tools have permission to use GitHub tokens (GH_CLASSIC_PAT_TOKEN, 
       GH_FINE_GRAINED_TOKEN) and GCP credentials for real implementation
    6. This is the Orchestra project - an AI orchestration platform with multiple components:
       - ai-orchestra: The core Python library with memory, configuration, interfaces
       - services: Admin API and other related services
       - admin-interface: React-based admin dashboard
       - wif_implementation: Workload Identity Federation implementation
