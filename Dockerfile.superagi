# Multi-stage Dockerfile for SuperAGI with Orchestra Integration
# Stage 1: Build stage
FROM python:3.13.4-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements first for better caching
COPY requirements/superagi.txt requirements.txt
RUN pip install --no-cache-dir --user -r requirements.txt

# Clone SuperAGI repository
RUN git clone https://github.com/TransformerOptimus/SuperAGI.git /build/superagi

# Copy Orchestra integration code
COPY core/orchestrator/src /build/orchestra
COPY packages/agents /build/agents
COPY shared /build/shared

# Stage 2: Runtime stage
FROM python:3.13.4-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

RUN useradd -m -u 1000 superagi

# Set working directory
WORKDIR /app

# Copy Python packages from builder

# Copy SuperAGI code
COPY --from=builder /build/superagi /app/superagi

# Copy Orchestra integration
COPY --from=builder /build/orchestra /app/orchestra
COPY --from=builder /build/agents /app/agents
COPY --from=builder /build/shared /app/shared

# Copy integration scripts
COPY scripts/superagi_integration.py /app/
COPY scripts/orchestra_adapter.py /app/

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/config && \
    chown -R superagi:superagi /app

USER superagi

# Add local bin to PATH
ENV PATH=/home/superagi/.local/bin:$PATH

# Environment variables
ENV PYTHONPATH=/app:$PYTHONPATH
ENV SUPERAGI_HOME=/app/data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Run SuperAGI with Orchestra integration
CMD ["python", "/app/superagi_integration.py"]


