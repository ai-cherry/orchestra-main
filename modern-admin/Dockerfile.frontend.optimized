# Optimized Multi-stage build for Orchestra AI Frontend
# Based on optimal IaC workflow architecture recommendations

# Build stage - Install dependencies and build application
FROM node:20-alpine AS builder

# Set build arguments for optimization
ARG BUILDKIT_INLINE_CACHE=1
ARG NODE_ENV=production

# Set working directory
WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && ln -sf python3 /usr/bin/python

# Copy package files for optimal layer caching
COPY package*.json ./
COPY pnpm-lock.yaml* ./

# Install pnpm for faster dependency management
RUN npm install -g pnpm@latest

# Install dependencies with optimization
RUN pnpm install --frozen-lockfile --prod=false

# Copy source code
COPY . .

# Build application with optimizations
RUN pnpm run build && \
    pnpm prune --prod

# Production stage - Optimized nginx with security
FROM nginx:1.25-alpine AS production

# Set production labels
LABEL maintainer="Orchestra AI Team"
LABEL version="2.0"
LABEL description="Orchestra AI Frontend - Optimized Production Build"

# Install security updates and curl for health checks
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001 -G nginx-app

# Copy optimized nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application with proper ownership
COPY --from=builder --chown=nginx-app:nginx-app /app/dist /usr/share/nginx/html

# Copy environment configuration script
COPY env.sh /docker-entrypoint.d/env.sh
RUN chmod +x /docker-entrypoint.d/env.sh && \
    chown nginx-app:nginx-app /docker-entrypoint.d/env.sh

# Set proper permissions for nginx directories
RUN chown -R nginx-app:nginx-app /var/cache/nginx && \
    chown -R nginx-app:nginx-app /var/log/nginx && \
    chown -R nginx-app:nginx-app /etc/nginx/conf.d

# Create nginx PID directory with proper permissions
RUN mkdir -p /var/run/nginx && \
    chown -R nginx-app:nginx-app /var/run/nginx

# Switch to non-root user
USER nginx-app

# Enhanced health check with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:8080/health || \
        curl -f http://localhost:8080/ || exit 1

# Expose port (using 8080 for non-root user)
EXPOSE 8080

# Optimized nginx startup with proper signal handling
CMD ["nginx", "-g", "daemon off;"]

