# Enhanced Continue Configuration for Orchestra AI Ecosystem
# Optimized for cross-tool integration with Roo and Cursor

{
  "models": [
    {
      "title": "UI-GPT-4o (Experimental)",
      "provider": "openai",
      "model": "gpt-4o-2024-11-20",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are an expert UI/UX developer specializing in React, TypeScript, and Tailwind CSS for the Orchestra AI ecosystem. Focus on creating sophisticated, accessible components for Cherry (life companion), Sophia (business intelligence), and Karen (healthcare) personas.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.1,
        "topP": 0.95,
        "presencePenalty": 0.1,
        "frequencyPenalty": 0.1
      }
    },
    {
      "title": "GPT-4o Standard",
      "provider": "openai", 
      "model": "gpt-4o",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are an expert developer for the Orchestra AI ecosystem. Follow Python 3.10 standards, use type hints, and maintain AI-agent friendly code. Integrate with MCP servers for data operations.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.2,
        "topP": 0.9
      }
    },
    {
      "title": "GPT-4o Mini (Fast)",
      "provider": "openai",
      "model": "gpt-4o-mini",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are a fast coding assistant for quick iterations and simple tasks in the Orchestra AI ecosystem.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.3,
        "topP": 0.9
      }
    }
  ],
  "customCommands": [
    {
      "name": "ui",
      "prompt": "Generate a sophisticated React/TypeScript component for the Orchestra AI ecosystem. Use Tailwind CSS for styling, implement proper TypeScript interfaces, ensure accessibility, and follow the design system for {Cherry: red accents, Sophia: blue accents, Karen: green accents}. Include proper error handling and loading states.",
      "description": "Generate UI components with UI-GPT-4o"
    },
    {
      "name": "persona",
      "prompt": "Develop features specific to the Orchestra AI personas: Cherry (life companion - personal, wellness, ranch management), Sophia (business intelligence - financial analysis, data processing), or Karen (healthcare - clinical research, medical operations). Consider persona-specific requirements and user experience patterns.",
      "description": "Create persona-specific features and interfaces"
    },
    {
      "name": "mcp",
      "prompt": "Optimize this code for MCP (Model Context Protocol) integration. Ensure proper async/await patterns, error handling, and integration with the Orchestra MCP servers: enhanced-memory, code-intelligence, git-intelligence, infrastructure-manager, weaviate-direct, web-scraping, cherry-domain, sophia-payready.",
      "description": "Optimize code for MCP server integration"
    },
    {
      "name": "review",
      "prompt": "Review this code for Orchestra AI ecosystem best practices: Python 3.10 compatibility, type hints, Google-style docstrings, AI-agent friendliness, performance optimization, MCP integration, and persona-specific considerations. Provide specific improvement suggestions.",
      "description": "Comprehensive code review for Orchestra standards"
    }
  ],
  "contextProviders": [
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "folder",
      "params": {
        "folders": [
          "core",
          "admin-interface", 
          "production-api",
          "docs",
          ".roo",
          ".continue"
        ]
      }
    },
    {
      "name": "codebase",
      "params": {
        "nRetrieve": 25,
        "nFinal": 10,
        "useReranking": true
      }
    },
    {
      "name": "git",
      "params": {}
    },
    {
      "name": "orchestra-unified",
      "params": {
        "serverName": "orchestra-unified",
        "capabilities": ["context_sharing", "task_routing"]
      }
    }
  ],
  "slashCommands": [
    {
      "name": "edit",
      "description": "Edit selected code with AI assistance"
    },
    {
      "name": "comment",
      "description": "Add comprehensive comments and docstrings"
    },
    {
      "name": "share",
      "description": "Share context with Roo and Cursor via unified MCP"
    },
    {
      "name": "route",
      "description": "Route task to optimal tool (Cursor/Roo/Continue)"
    }
  ],
  "embeddingsProvider": {
    "provider": "openai",
    "model": "text-embedding-3-small",
    "apiKey": "${OPENAI_API_KEY}",
    "maxChunkSize": 512,
    "maxChunks": 100
  },
  "reranker": {
    "name": "cohere",
    "params": {
      "model": "rerank-english-v2.0",
      "apiKey": "your-cohere-api-key-here"
    }
  },
  "tabAutocompleteModel": {
    "title": "GPT-4o Autocomplete",
    "provider": "openai",
    "model": "gpt-4o",
    "apiKey": "${OPENAI_API_KEY}",
    "contextLength": 8192,
    "completionOptions": {
      "temperature": 0.2,
      "maxTokens": 1000
    }
  },
  "experimental": {
    "modelRoles": {
      "inlineEdit": "UI-GPT-4o (Experimental)",
      "applyCodeBlock": "GPT-4o Standard", 
      "summarize": "GPT-4o Mini (Fast)"
    },
    "contextLength": 200000,
    "useChunking": true,
    "useTools": true
  },
  "ui": {
    "fontSize": 14,
    "displayRawMarkdown": false,
    "showChatScrollbar": true
  },
  "analytics": {
    "enabled": false,
    "url": ""
  }
}

