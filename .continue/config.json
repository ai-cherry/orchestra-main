{
  "models": [
    {
      "title": "UI-GPT-4O-Latest",
      "provider": "openai",
      "model": "gpt-4o-2024-11-20",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are an expert UI/UX developer specializing in React, TypeScript, Tailwind CSS, and modern web development for the Orchestra AI ecosystem. Focus on creating clean, accessible, responsive components with excellent user experience. Prioritize: Cherry (red accents), Sophia (blue accents), Karen (green accents) persona-specific design patterns.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.1,
        "topP": 0.95,
        "presencePenalty": 0.1,
        "frequencyPenalty": 0.1,
        "maxTokens": 4000
      }
    },
    {
      "title": "UI-GPT-4O-Fast",
      "provider": "openai",
      "model": "gpt-4o-mini",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are a rapid UI prototyping assistant for Orchestra AI. Create quick, functional React components with TypeScript and Tailwind CSS. Focus on speed and functionality for rapid iteration.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.2,
        "topP": 0.9,
        "maxTokens": 2000
      }
    },
    {
      "title": "GPT-4o Standard",
      "provider": "openai", 
      "model": "gpt-4o",
      "apiKey": "${OPENAI_API_KEY}",
      "systemMessage": "You are an expert developer for the Orchestra AI ecosystem. Follow Python 3.10 standards, use type hints, and maintain AI-agent friendly code. Integrate with MCP servers for data operations.",
      "contextLength": 128000,
      "completionOptions": {
        "temperature": 0.2,
        "topP": 0.9,
        "maxTokens": 4000
      }
    }
  ],
  "customCommands": [
    {
      "name": "ui",
      "prompt": "Generate a sophisticated React/TypeScript component for the Orchestra AI ecosystem using gpt-4o-2024-11-20. Use Tailwind CSS for styling, implement proper TypeScript interfaces, ensure accessibility (ARIA labels, keyboard navigation), and follow the design system: Cherry (red-500 accents), Sophia (blue-500 accents), Karen (green-500 accents). Include proper error handling, loading states, and responsive design (mobile-first). Use shadcn/ui components when appropriate.",
      "description": "Generate UI components with UI-GPT-4O Latest"
    },
    {
      "name": "prototype",
      "prompt": "Create a rapid prototype React component using gpt-4o-mini for quick iteration. Focus on functional MVP with basic Tailwind styling. Include TypeScript interfaces and basic error handling. Optimize for development speed.",
      "description": "Rapid prototyping with UI-GPT-4O Fast"
    },
    {
      "name": "persona",
      "prompt": "Develop features specific to the Orchestra AI personas using gpt-4o-2024-11-20: Cherry (life companion - personal, wellness, ranch management, warm red theme), Sophia (business intelligence - financial analysis, data processing, professional blue theme), or Karen (healthcare - clinical research, medical operations, clinical green theme). Consider persona-specific UI patterns, data visualization needs, and user experience requirements.",
      "description": "Create persona-specific features and interfaces"
    },
    {
      "name": "mcp",
      "prompt": "Optimize this code for MCP (Model Context Protocol) integration with Orchestra AI servers. Ensure proper async/await patterns, error handling, and integration with: enhanced-memory, code-intelligence, git-intelligence, infrastructure-manager, weaviate-direct, web-scraping, cherry-domain, sophia-payready. Include proper TypeScript types for MCP responses.",
      "description": "Optimize code for MCP server integration"
    },
    {
      "name": "review",
      "prompt": "Review this code for Orchestra AI ecosystem best practices: Python 3.10 compatibility, type hints, Google-style docstrings, AI-agent friendliness, performance optimization, MCP integration, accessibility (WCAG 2.1 AA), responsive design, and persona-specific considerations. Provide specific improvement suggestions with code examples.",
      "description": "Comprehensive code review for Orchestra standards"
    },
    {
      "name": "admin",
      "prompt": "Generate or improve admin interface components for Orchestra AI using gpt-4o-2024-11-20. Focus on data tables, forms, dashboards, and management interfaces. Include proper TypeScript types, error handling, loading states, and admin-specific UX patterns. Use professional, efficient design.",
      "description": "Admin interface development"
    }
  ],
  "contextProviders": [
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "folder",
      "params": {
        "folders": [
          "admin-interface",
          "production-api", 
          "src",
          "core",
          "docs",
          ".roo",
          ".continue"
        ]
      }
    },
    {
      "name": "codebase",
      "params": {
        "nRetrieve": 30,
        "nFinal": 15,
        "useReranking": true
      }
    },
    {
      "name": "git",
      "params": {}
    },
    {
      "name": "mcp",
      "params": {
        "serverName": "orchestra-unified",
        "capabilities": ["context_sharing", "task_routing", "ui_optimization"]
      }
    }
  ],
  "slashCommands": [
    {
      "name": "edit",
      "description": "Edit selected code with AI assistance"
    },
    {
      "name": "comment",
      "description": "Add comprehensive comments and docstrings"
    },
    {
      "name": "share",
      "description": "Share context with Roo and Cursor via unified MCP (100% integrated)"
    },
    {
      "name": "route",
      "description": "Route task to optimal tool (Cursor/Roo/Continue)"
    },
    {
      "name": "optimize",
      "description": "Optimize code for performance and UI/UX"
    }
  ],
  "embeddingsProvider": {
    "provider": "openai",
    "model": "text-embedding-3-small",
    "apiKey": "${OPENAI_API_KEY}",
    "maxChunkSize": 512,
    "maxChunks": 100
  },
  "reranker": {
    "name": "cohere",
    "params": {
      "model": "rerank-english-v2.0",
      "apiKey": "${COHERE_API_KEY}"
    }
  },
  "tabAutocompleteModel": {
    "title": "UI-Autocomplete",
    "provider": "openai",
    "model": "gpt-4o-mini",
    "apiKey": "${OPENAI_API_KEY}",
    "contextLength": 8192,
    "completionOptions": {
      "temperature": 0.2,
      "maxTokens": 1000
    }
  },
  "experimental": {
    "modelRoles": {
      "inlineEdit": "UI-GPT-4O-Latest",
      "applyCodeBlock": "UI-GPT-4O-Latest", 
      "summarize": "UI-GPT-4O-Fast"
    },
    "contextLength": 200000,
    "useChunking": true,
    "useTools": true,
    "enableUIOptimization": true
  },
  "ui": {
    "fontSize": 14,
    "displayRawMarkdown": false,
    "showChatScrollbar": true,
    "theme": "orchestra"
  },
  "analytics": {
    "enabled": false,
    "url": ""
  },
  "apiKeyConfiguration": {
    "openai": {
      "required": true,
      "envVar": "OPENAI_API_KEY",
      "models": ["gpt-4o-2024-11-20", "gpt-4o", "gpt-4o-mini"],
      "description": "Required for UI-GPT-4O and all AI development features"
    },
    "cohere": {
      "required": false,
      "envVar": "COHERE_API_KEY", 
      "description": "Optional: Improves search result ranking"
    }
  }
}

