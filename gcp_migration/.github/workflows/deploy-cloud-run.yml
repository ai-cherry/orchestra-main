name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# Environment variables available to all jobs
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY }}
  SERVICE_NAME: ${{ github.event.repository.name }}-api

# Permission configurations
permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    # Set environment based on branch or input
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    # Concurrency group ensures only one deployment per branch/environment
    concurrency:
      group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
      cancel-in-progress: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi --no-root
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Authenticate Docker to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      
      - name: Build and push container
        env:
          IMAGE_NAME: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        run: |
          # Build container
          docker build -t $IMAGE_NAME .
          
          # Push to Artifact Registry
          docker push $IMAGE_NAME
      
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }}
            --memory=1Gi
            --cpu=1
            --concurrency=80
            --min-instances=0
            --max-instances=10
            --timeout=300
          env_vars: |
            ENVIRONMENT=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
            DEBUG=false
      
      # Use Secret Manager for secure environment variables
      - name: Set up environment secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |
            DATABASE_URL:${{ env.PROJECT_ID }}/DATABASE_URL
            API_KEY:${{ env.PROJECT_ID }}/API_KEY
      
      # Update service with secrets
      - name: Update service with secrets
        run: |
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --update-secrets=DATABASE_URL=DATABASE_URL:latest,API_KEY=API_KEY:latest
      
      - name: Show deployment URL
        run: |
          echo "Service deployed to: ${{ steps.deploy.outputs.url }}"
      
      # Optional: Run post-deployment verification
      - name: Verify deployment
        run: |
          echo "Verifying deployment at ${{ steps.deploy.outputs.url }}"
          # Add health check or other verification commands here
          curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }}/health | grep 200