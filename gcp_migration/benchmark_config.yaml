# Performance Benchmark Configuration for AI Orchestra GCP Migration
# This configuration defines performance targets and test scenarios

# Global benchmark settings
settings:
  # Number of iterations for each test
  iterations: 5
  
  # Warm-up runs before recording metrics
  warmup_runs: 2
  
  # Output format (json, csv, console)
  output_format: "json"
  
  # Output file for detailed results
  output_file: "benchmark_results.json"
  
  # Whether to include detailed timing for each operation
  detailed_timing: true
  
  # Percentiles to report (50th, 95th, 99th)
  percentiles: [50, 95, 99]

# Performance targets (milliseconds)
targets:
  # Memory system targets
  memory:
    # Vector search latency (milliseconds)
    vector_search_latency: 30
    
    # Memory retrieval time (milliseconds)
    retrieval_time: 50
    
    # Synchronization throughput (records per second)
    sync_throughput: 1500
  
  # API targets
  api:
    # Response time for simple requests (milliseconds)
    simple_response_time: 100
    
    # Response time for complex requests with vector operations (milliseconds)
    complex_response_time: 250
    
    # Maximum cold start latency (milliseconds) - should be near zero with warm instances
    cold_start_latency: 100
  
  # Workstation targets
  workstation:
    # Workstation startup time (seconds)
    startup_time: 180
    
    # IDE responsiveness (milliseconds)
    ide_responsiveness: 50

# Test scenarios
scenarios:
  # Memory system benchmark scenarios
  memory_benchmarks:
    # Vector similarity search
    vector_search:
      description: "Test vector similarity search performance with optimized indices"
      vector_dimension: 1536
      dataset_size: 10000
      query_count: 100
      top_k: 5
    
    # Hybrid search (vector + metadata)
    hybrid_search:
      description: "Test hybrid search with vector similarity and metadata filtering"
      vector_dimension: 1536
      dataset_size: 10000
      query_count: 100
      top_k: 5
      filter_attributes: ["created_at", "type", "source"]
    
    # Memory synchronization
    memory_sync:
      description: "Test memory synchronization throughput"
      batch_sizes: [100, 500, 1000]
      total_records: 10000
      debounce_intervals: [0.1, 0.5, 1.0]
  
  # API performance scenarios
  api_benchmarks:
    # Simple API requests
    simple_requests:
      description: "Test simple API request performance"
      endpoint: "/api/v1/status"
      method: "GET"
      request_count: 1000
      concurrency: [10, 50, 100]
    
    # Complex API requests with vector operations
    complex_requests:
      description: "Test complex API requests with vector operations"
      endpoint: "/api/v1/query"
      method: "POST"
      request_count: 500
      concurrency: [10, 30, 60]
      payload_template: {
        "query": "What is the architecture of AI Orchestra?",
        "top_k": 5,
        "filters": {
          "created_after": "2025-01-01",
          "type": "document"
        }
      }
    
    # Cold start testing
    cold_start:
      description: "Test cold start performance with min instances"
      endpoint: "/api/v1/status"
      method: "GET"
      idle_time: 600
      request_count: 10
  
  # Workstation benchmarks
  workstation_benchmarks:
    # Startup time
    startup:
      description: "Test workstation startup time"
      machine_types: ["n2d-standard-32"]
      gpu_configs: ["2xT4"]
      
    # IDE operations
    ide_operations:
      description: "Test IDE operations performance"
      operations: [
        "file_open", 
        "search",
        "intellisense",
        "build",
        "debug"
      ]
      file_sizes: ["small", "medium", "large"]
    
    # Gemini Code Assist performance
    gemini_code_assist:
      description: "Test Gemini Code Assist performance"
      prompt_types: [
        "code_completion",
        "function_generation",
        "explanation"
      ]
      context_sizes: ["small", "medium", "large"]

# Circuit breaker test configuration
circuit_breaker_tests:
  # Failure scenarios
  failure_scenarios:
    - name: "database_connection_failure"
      component: "database"
      failure_type: "connection_timeout"
      duration_seconds: 30
    
    - name: "high_latency"
      component: "vector_search"
      failure_type: "high_latency"
      latency_ms: 500
      duration_seconds: 60
  
  # Success criteria
  success_criteria:
    # Maximum allowed error rate during failure
    max_error_rate: 0.05
    
    # Maximum allowed degradation in throughput
    max_throughput_degradation: 0.5
    
    # Maximum time to recover after failure resolves
    recovery_time_seconds: 10