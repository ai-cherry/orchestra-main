# Ultra-optimized multi-stage build for AI Orchestra
# Prioritizing performance, stability, and efficient resource usage
# With improved security, dependency pinning, optimized GCP CLI installation,
# and multi-architecture support for ARM64/AMD64

# Build arguments with defaults
ARG PYTHON_VERSION=3.11.7
ARG POETRY_VERSION=1.6.1
ARG TARGETPLATFORM=linux/amd64

# Stage 1: Build dependencies
FROM --platform=${TARGETPLATFORM} python:${PYTHON_VERSION}-slim-bullseye AS builder

WORKDIR /app

# Install system dependencies required for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for optimized pip and Python
ENV PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    POETRY_VERSION=${POETRY_VERSION}

# Install Poetry with version pinning
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 - --version ${POETRY_VERSION} && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# Copy Poetry configuration files
COPY pyproject.toml poetry.lock* ./

# Configure Poetry - using system Python to avoid virtualenv
RUN poetry config virtualenvs.create false

# Install dependencies with optimized settings
RUN poetry install --only main --no-interaction --no-ansi

# Stage 2: Runtime environment
FROM --platform=${TARGETPLATFORM} python:${PYTHON_VERSION}-slim-bullseye

WORKDIR /app

# Set environment variables for optimized Python runtime
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONOPTIMIZE=2 \
    PYTHONPATH=/app \
    PORT=8000 \
    ENVIRONMENT=staging \
    USE_RECOVERY_MODE=false \
    STANDARD_MODE=true \
    VSCODE_DISABLE_WORKSPACE_TRUST=true \
    DISABLE_WORKSPACE_TRUST=true \
    GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account-key.json

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    gnupg \
    tini \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Google Cloud CLI (minimal installation with only essential components)
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update && apt-get install -y --no-install-recommends \
    google-cloud-cli-core \
    google-cloud-cli-auth \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy installed packages from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Create directories for credentials and temporary files
RUN mkdir -p /tmp /app/data /app/logs /app/health

# Add an optimized startup script with health check and WIF support
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Function for error handling\n\
handle_error() {\n\
    echo "Error: $1"\n\
    exit 1\n\
}\n\
\n\
# Function to validate secret format\n\
validate_secret() {\n\
    local secret_value="$1"\n\
    local pattern="$2"\n\
    local error_msg="$3"\n\
    \n\
    if [[ ! "$secret_value" =~ $pattern ]]; then\n\
        handle_error "$error_msg"\n\
    fi\n\
}\n\
\n\
# Configure GCP authentication based on environment\n\
if [ -n "$GCP_WORKLOAD_IDENTITY_PROVIDER" ] && [ -n "$GCP_SERVICE_ACCOUNT" ]; then\n\
    echo "Using Workload Identity Federation for authentication"\n\
    \n\
    # Validate WIF provider format\n\
    validate_secret "$GCP_WORKLOAD_IDENTITY_PROVIDER" "^projects/[0-9]+/locations/global/workloadIdentityPools/.+/providers/.+$" "Invalid WIF provider format"\n\
    \n\
    # Validate service account format\n\
    validate_secret "$GCP_SERVICE_ACCOUNT" "^.+@.+\\.iam\\.gserviceaccount\\.com$" "Invalid service account format"\n\
    \n\
    # Use WIF credentials\n\
    gcloud iam workload-identity-pools create-cred-config \\\n\
        "$GCP_WORKLOAD_IDENTITY_PROVIDER" \\\n\
        --service-account="$GCP_SERVICE_ACCOUNT" \\\n\
        --output-file=/tmp/wif.json \\\n\
        --quiet || handle_error "Failed to create WIF credentials"\n\
    \n\
    export GOOGLE_APPLICATION_CREDENTIALS=/tmp/wif.json\n\
    gcloud auth login --cred-file=/tmp/wif.json --quiet || handle_error "Failed to authenticate with WIF credentials"\n\
elif [ -n "$SECRET_MANAGER_KEY" ]; then\n\
    echo "Using Secret Manager for authentication"\n\
    \n\
    # Validate secret format\n\
    validate_secret "$SECRET_MANAGER_KEY" "^secret-management-key-" "Invalid SECRET_MANAGER_KEY format"\n\
    \n\
    # Fetch credentials from Secret Manager\n\
    echo "$SECRET_MANAGER_KEY" > $GOOGLE_APPLICATION_CREDENTIALS\n\
    chmod 600 $GOOGLE_APPLICATION_CREDENTIALS || handle_error "Failed to set permissions on credentials file"\n\
elif [ -n "$LOCAL_DEVELOPMENT" ]; then\n\
    echo "Using local development credentials"\n\
else\n\
    echo "No authentication method specified, attempting to use default credentials"\n\
fi\n\
\n\
# Force standard mode with all required environment variables\n\
export USE_RECOVERY_MODE=false\n\
export STANDARD_MODE=true\n\
export VSCODE_DISABLE_WORKSPACE_TRUST=true\n\
export DISABLE_WORKSPACE_TRUST=true\n\
\n\
# Create standard mode marker file\n\
touch /app/.standard_mode\n\
\n\
# Configure resource limits based on environment variables\n\
if [ -n "$MEMORY_LIMIT" ]; then\n\
    echo "Setting memory limit to $MEMORY_LIMIT"\n\
    # Apply memory optimization settings\n\
    export PYTHONMALLOC=malloc\n\
fi\n\
\n\
# Create health check endpoint\n\
echo "OK" > /app/health/index.html\n\
\n\
# Start the application with optimized settings\n\
echo "Starting AI Orchestra in $ENVIRONMENT environment"\n\
exec python3 -m orchestrator.main\n\
' > /app/startup.sh

# Make the startup script executable
RUN chmod +x /app/startup.sh

# Expose port for the application
EXPOSE ${PORT}

# Set resource constraints for the container
ENV MEMORY_LIMIT=1024M
ENV CPU_LIMIT=2

# Use a non-root user for better security
RUN groupadd -r orchestra && useradd -r -g orchestra orchestra
RUN chown -R orchestra:orchestra /app /tmp
USER orchestra

# Health check configuration
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Use tini as init system to handle signals properly
ENTRYPOINT ["/usr/bin/tini", "--"]

# Run the application with the startup script
CMD ["/app/startup.sh"]