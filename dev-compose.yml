version: '3.8'

services:
  # Traefik reverse proxy to eliminate port conflicts
  traefik:
    image: traefik:v3.0
    container_name: orchestra-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    ports:
      - "${TRAEFIK_PORT:-8080}:8080"  # Traefik dashboard
      - "${HTTP_PORT:-80}:80"         # HTTP
      - "${HTTPS_PORT:-443}:443"      # HTTPS
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
    networks:
      - orchestra-network

  # FastAPI MCP Server example
  mcp-server:
    build:
      context: ./legacy/mcp_server
      dockerfile: Dockerfile
    container_name: orchestra-mcp-server
    restart: unless-stopped
    environment:
      - PORT=8000
      - ENV=${ENV:-development}
      - DATABASE_URL=postgresql://orchestra:orchestrapass@postgres:5432/orchestra
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./legacy/mcp_server:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp.rule=Host(`mcp.localhost`) || PathPrefix(`/api`)"
      - "traefik.http.routers.mcp.entrypoints=web"
      - "traefik.http.services.mcp.loadbalancer.server.port=8000"
    depends_on:
      - postgres
      - redis
    networks:
      - orchestra-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: orchestra-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=orchestra
      - POSTGRES_PASSWORD=orchestrapass
      - POSTGRES_DB=orchestra
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestra"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestra-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: orchestra-redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orchestra-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: orchestra-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - orchestra-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:

networks:
  orchestra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 