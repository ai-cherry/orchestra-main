---
description:
globs:
alwaysApply: false
---
# Temporary File & Documentation Prevention

## Forbidden File Creations
- **No README.md files** unless explicitly requested and they replace existing docs
- **No CHANGELOG.md, NOTES.md, TODO.md** or similar meta-documentation
- **No temporary scripts** in root directory or `/tmp/` locations
- **No .backup, .old, .temp file extensions** 
- **No standalone utility scripts** without integration into existing modules
- **No "documentation for documentation's sake"**

## Before Creating ANY File:
1. **Ask**: "Does this file serve a specific, ongoing purpose?"
2. **Check**: "Can this functionality integrate into existing modules?"
3. **Verify**: "Is there already a file that serves this purpose?"
4. **Confirm**: "Will this file be actively maintained and referenced?"

## Allowed File Types ONLY:
- **Code files** (.py, .ts, .js) that integrate into existing architecture
- **Configuration files** (.json, .yaml, .toml) for services that need them
- **Data files** (.sql, .csv) with specific business purposes and clear ownership

## Temporary File Lifecycle (If Absolutely Necessary):
- Must use `@transient_file` decorator with explicit lifetime
- Must register in `.cleanup_registry.json`
- Default max lifetime: 24 hours
- Must document purpose and auto-cleanup trigger

## Auto-Cleanup Triggers:
- Files without clear purpose after 72 hours → DELETE
- Documentation files not referenced by code → DELETE  
- Scripts not called by other modules → DELETE
- Backup files older than 7 days → DELETE

## Examples of BANNED Patterns:
```bash
# DON'T CREATE THESE:
touch README.md
touch INSTALL.md  
touch troubleshooting-guide.md
touch backup-script.sh
touch temp-data-processor.py
touch .env.backup
```

## Emergency Exception Process:
If file creation is truly necessary, prefix with `TEMP_` and add deletion date:
```bash
TEMP_migration_script_DELETE_2024_01_15.py
```
