---
description:
globs:
alwaysApply: false
---
**Docker Best Practices:**

1.  **Use Specific Base Image Versions:** Always pin base images to a specific version (e.g., `python:3.11-slim-bullseye`) instead of using `latest` or broad tags like `python:3.11`. This ensures reproducible builds.
2.  **Multi-Stage Builds:** Utilize multi-stage builds to keep production images small and secure. For example, have a build stage with all build-time dependencies (compilers, dev libraries) and a final runtime stage that only copies necessary artifacts and runtime dependencies.
3.  **Minimize Layers:** Each `RUN`, `COPY`, and `ADD` instruction creates a layer. Consolidate commands where possible (e.g., use `&&` in `RUN` instructions to combine package installs and cleanup in a single layer).
4.  **Non-Root User:** Run applications with a non-root user inside the container for enhanced security. Create a dedicated user and group, and use the `USER` instruction. Example:
    ```Dockerfile
    # ...
    RUN groupadd --system appuser && useradd --system --gid appuser appuser
    # ... copy application files and set permissions ...
    USER appuser
    # ... CMD or ENTRYPOINT ...
    ```
5.  **Optimize Layer Caching:** Order Dockerfile instructions from least frequently changing to most frequently changing to leverage Docker's build cache effectively. For example, copy dependency files (`requirements.txt`, `pyproject.toml`) and install dependencies *before* copying your application source code.
6.  **.dockerignore:** Always use a `.dockerignore` file to exclude unnecessary files and directories (e.g., `.git`, `.venv`, `__pycache__`, `*.pyc`, `README.md`, local development configs) from the build context. This speeds up builds and reduces image size.
7.  **Security Scanning:** Integrate security scanning tools (e.g., Trivy, Snyk, or GCP's Artifact Registry scanning) into your CI/CD pipeline to check for vulnerabilities in your Docker images.
8.  **Health Checks for Cloud Run:** While not strictly a Dockerfile rule, remember that for Cloud Run, the container must listen for HTTP requests on the port defined by the `PORT` environment variable (default 8080). The application within the container needs to handle this. Ensure your Dockerfile's `EXPOSE` instruction and application configuration align.
