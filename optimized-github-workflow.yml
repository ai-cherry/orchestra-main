# Optimized GitHub Actions workflow for AI Orchestra
# This workflow includes enhanced caching, performance testing, and optimized Docker builds

name: AI Orchestra CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - "ai-orchestra/**"
      - "mcp_server/**"
      - "packages/**"
      - "shared/**"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      component:
        description: "Component to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - ai-orchestra
          - mcp-server

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.6.1"

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Enhanced dependency caching
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Lint with flake8
        run: |
          poetry run flake8 ai-orchestra mcp_server packages shared

      - name: Type check with mypy
        run: |
          poetry run mypy ai-orchestra mcp_server packages shared

      - name: Run tests with pytest
        run: |
          poetry run pytest --cov=ai-orchestra --cov=mcp_server --cov=packages --cov=shared tests/

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Build and push Docker images
  build:
    name: Build and Push Docker Images
    needs: lint-and-test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      contents: read
      id-token: write # Required for requesting the JWT for WIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      # Option 1: Using Workload Identity Federation (recommended)
      - name: Google Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Option 2: Using service account key (simpler but less secure)
      - name: Google Auth via Service Account Key
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER == '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Set up Docker Buildx for faster builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure Docker to use gcloud credentials
      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io

      # Determine which components to build
      - name: Set build components
        id: components
        run: |
          COMPONENT="${{ github.event.inputs.component || 'all' }}"
          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "ai-orchestra" ]]; then
            echo "build_orchestra=true" >> $GITHUB_OUTPUT
          else
            echo "build_orchestra=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "mcp-server" ]]; then
            echo "build_mcp=true" >> $GITHUB_OUTPUT
          else
            echo "build_mcp=false" >> $GITHUB_OUTPUT
          fi

      # Cache Docker layers for AI Orchestra
      - name: Cache Docker layers for AI Orchestra
        if: steps.components.outputs.build_orchestra == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-orchestra
          key: ${{ runner.os }}-buildx-orchestra-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-orchestra-

      # Build and push AI Orchestra Docker image
      - name: Build and push AI Orchestra Docker image
        if: steps.components.outputs.build_orchestra == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ai-orchestra/Dockerfile
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-${{ github.event.inputs.environment || 'dev' }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-${{ github.event.inputs.environment || 'dev' }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-orchestra
          cache-to: type=local,dest=/tmp/.buildx-cache-orchestra-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Cache Docker layers for MCP Server
      - name: Cache Docker layers for MCP Server
        if: steps.components.outputs.build_mcp == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-mcp
          key: ${{ runner.os }}-buildx-mcp-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-mcp-

      # Build and push MCP Server Docker image
      - name: Build and push MCP Server Docker image
        if: steps.components.outputs.build_mcp == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: mcp_server/Dockerfile
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/mcp-server-${{ github.event.inputs.environment || 'dev' }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/mcp-server-${{ github.event.inputs.environment || 'dev' }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-mcp
          cache-to: type=local,dest=/tmp/.buildx-cache-mcp-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Move cache for AI Orchestra
      - name: Move cache for AI Orchestra
        if: steps.components.outputs.build_orchestra == 'true'
        run: |
          rm -rf /tmp/.buildx-cache-orchestra
          mv /tmp/.buildx-cache-orchestra-new /tmp/.buildx-cache-orchestra

      # Move cache for MCP Server
      - name: Move cache for MCP Server
        if: steps.components.outputs.build_mcp == 'true'
        run: |
          rm -rf /tmp/.buildx-cache-mcp
          mv /tmp/.buildx-cache-mcp-new /tmp/.buildx-cache-mcp

  # Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      contents: read
      id-token: write # Required for requesting the JWT for WIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      # Option 1: Using Workload Identity Federation (recommended)
      - name: Google Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Option 2: Using service account key (simpler but less secure)
      - name: Google Auth via Service Account Key
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER == '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Load environment-specific configurations
      - name: Load environment configuration
        id: env_config
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"

          if [ -f "config/environments/${ENV}.env" ]; then
            source "config/environments/${ENV}.env"
            echo "memory=${MEMORY:-1Gi}" >> $GITHUB_OUTPUT
            echo "cpu=${CPU:-1}" >> $GITHUB_OUTPUT
            echo "min_instances=${MIN_INSTANCES:-0}" >> $GITHUB_OUTPUT
            echo "max_instances=${MAX_INSTANCES:-10}" >> $GITHUB_OUTPUT
          else
            echo "memory=1Gi" >> $GITHUB_OUTPUT
            echo "cpu=1" >> $GITHUB_OUTPUT
            echo "min_instances=0" >> $GITHUB_OUTPUT
            echo "max_instances=10" >> $GITHUB_OUTPUT
          fi

      # Determine which components to deploy
      - name: Set deployment components
        id: components
        run: |
          COMPONENT="${{ github.event.inputs.component || 'all' }}"
          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "ai-orchestra" ]]; then
            echo "deploy_orchestra=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_orchestra=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "mcp-server" ]]; then
            echo "deploy_mcp=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_mcp=false" >> $GITHUB_OUTPUT
          fi

      # Deploy AI Orchestra to Cloud Run
      - name: Deploy AI Orchestra to Cloud Run
        if: steps.components.outputs.deploy_orchestra == 'true'
        id: deploy_orchestra
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ai-orchestra-${{ github.event.inputs.environment || 'dev' }}
          image: gcr.io/${{ env.PROJECT_ID }}/ai-orchestra-${{ github.event.inputs.environment || 'dev' }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=${{ steps.env_config.outputs.memory }}
            --cpu=${{ steps.env_config.outputs.cpu }}
            --min-instances=${{ steps.env_config.outputs.min_instances }}
            --max-instances=${{ steps.env_config.outputs.max_instances }}
            --concurrency=80
            --timeout=300s
            --set-env-vars=ENV=${{ github.event.inputs.environment || 'dev' }},PROJECT_ID=${{ env.PROJECT_ID }}

      # Deploy MCP Server to Cloud Run
      - name: Deploy MCP Server to Cloud Run
        if: steps.components.outputs.deploy_mcp == 'true'
        id: deploy_mcp
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: mcp-server-${{ github.event.inputs.environment || 'dev' }}
          image: gcr.io/${{ env.PROJECT_ID }}/mcp-server-${{ github.event.inputs.environment || 'dev' }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --allow-unauthenticated
            --memory=${{ steps.env_config.outputs.memory }}
            --cpu=${{ steps.env_config.outputs.cpu }}
            --min-instances=${{ steps.env_config.outputs.min_instances }}
            --max-instances=${{ steps.env_config.outputs.max_instances }}
            --concurrency=80
            --timeout=300s
            --set-env-vars=ENV=${{ github.event.inputs.environment || 'dev' }},PROJECT_ID=${{ env.PROJECT_ID }}

  # Performance testing
  performance-test:
    name: Performance Testing
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.environment == 'prod' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xz
          sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin

      - name: Install dependencies
        run: |
          pip install locust

      # Determine which components to test
      - name: Set test components
        id: components
        run: |
          COMPONENT="${{ github.event.inputs.component || 'all' }}"
          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "ai-orchestra" ]]; then
            echo "test_orchestra=true" >> $GITHUB_OUTPUT
          else
            echo "test_orchestra=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "mcp-server" ]]; then
            echo "test_mcp=true" >> $GITHUB_OUTPUT
          else
            echo "test_mcp=false" >> $GITHUB_OUTPUT
          fi

      # Create k6 test script for AI Orchestra
      - name: Create k6 test script for AI Orchestra
        if: steps.components.outputs.test_orchestra == 'true'
        run: |
          cat > ai-orchestra-load-test.js << 'EOF'
          import http from 'k6/http';
          import { sleep } from 'k6';

          export const options = {
            vus: 10,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<500'],
            },
          };

          export default function () {
            http.get('${{ needs.deploy.outputs.url || 'https://ai-orchestra-dev-abcdefghij-uc.a.run.app' }}/health');
            sleep(1);
          }
          EOF

      # Run k6 load test for AI Orchestra
      - name: Run k6 load test for AI Orchestra
        if: steps.components.outputs.test_orchestra == 'true'
        run: |
          k6 run ai-orchestra-load-test.js

      # Create k6 test script for MCP Server
      - name: Create k6 test script for MCP Server
        if: steps.components.outputs.test_mcp == 'true'
        run: |
          cat > mcp-server-load-test.js << 'EOF'
          import http from 'k6/http';
          import { sleep } from 'k6';

          export const options = {
            vus: 10,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<500'],
            },
          };

          export default function () {
            http.get('${{ needs.deploy.outputs.url || 'https://mcp-server-dev-abcdefghij-uc.a.run.app' }}/health');
            sleep(1);
          }
          EOF

      # Run k6 load test for MCP Server
      - name: Run k6 load test for MCP Server
        if: steps.components.outputs.test_mcp == 'true'
        run: |
          k6 run mcp-server-load-test.js

  # Monitoring
  monitoring:
    name: Setup Monitoring
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: github.event.inputs.environment == 'prod' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      id-token: write # Required for requesting the JWT for WIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      # Option 1: Using Workload Identity Federation (recommended)
      - name: Google Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Option 2: Using service account key (simpler but less secure)
      - name: Google Auth via Service Account Key
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER == '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Determine which components to monitor
      - name: Set monitoring components
        id: components
        run: |
          COMPONENT="${{ github.event.inputs.component || 'all' }}"
          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "ai-orchestra" ]]; then
            echo "monitor_orchestra=true" >> $GITHUB_OUTPUT
          else
            echo "monitor_orchestra=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$COMPONENT" == "all" || "$COMPONENT" == "mcp-server" ]]; then
            echo "monitor_mcp=true" >> $GITHUB_OUTPUT
          else
            echo "monitor_mcp=false" >> $GITHUB_OUTPUT
          fi

      # Create monitoring dashboard for AI Orchestra
      - name: Create monitoring dashboard for AI Orchestra
        if: steps.components.outputs.monitor_orchestra == 'true'
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          SERVICE_NAME="ai-orchestra-${ENV}"

          cat > ${SERVICE_NAME}-dashboard.json << EOF
          {
            "displayName": "${SERVICE_NAME} Dashboard",
            "gridLayout": {
              "columns": "2",
              "widgets": [
                {
                  "title": "CPU Utilization",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/container/cpu/utilization\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_MEAN"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Memory Utilization",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/container/memory/utilization\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_MEAN"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Request Count",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/request_count\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_RATE"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Response Latencies",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/request_latencies\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_PERCENTILE_99"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
          EOF

          gcloud monitoring dashboards create --config-from-file=${SERVICE_NAME}-dashboard.json

      # Create monitoring dashboard for MCP Server
      - name: Create monitoring dashboard for MCP Server
        if: steps.components.outputs.monitor_mcp == 'true'
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          SERVICE_NAME="mcp-server-${ENV}"

          cat > ${SERVICE_NAME}-dashboard.json << EOF
          {
            "displayName": "${SERVICE_NAME} Dashboard",
            "gridLayout": {
              "columns": "2",
              "widgets": [
                {
                  "title": "CPU Utilization",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/container/cpu/utilization\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_MEAN"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Memory Utilization",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/container/memory/utilization\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_MEAN"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Request Count",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/request_count\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_RATE"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Response Latencies",
                  "xyChart": {
                    "dataSets": [
                      {
                        "timeSeriesQuery": {
                          "timeSeriesFilter": {
                            "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"${SERVICE_NAME}\" AND metric.type=\"run.googleapis.com/request_latencies\"",
                            "aggregation": {
                              "alignmentPeriod": "60s",
                              "perSeriesAligner": "ALIGN_PERCENTILE_99"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
          EOF

          gcloud monitoring dashboards create --config-from-file=${SERVICE_NAME}-dashboard.json

      # Create alerting policies
      - name: Create alerting policies
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"

          # High error rate alert
          if [[ "${{ steps.components.outputs.monitor_orchestra }}" == "true" ]]; then
            gcloud alpha monitoring policies create --policy-from-file=- << EOF
            {
              "displayName": "AI Orchestra High Error Rate",
              "conditions": [
                {
                  "displayName": "Error rate > 5%",
                  "conditionThreshold": {
                    "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"ai-orchestra-${ENV}\" AND metric.type=\"run.googleapis.com/request_count\" AND metric.labels.response_code_class=\"4xx\"",
                    "aggregations": [
                      {
                        "alignmentPeriod": "60s",
                        "perSeriesAligner": "ALIGN_RATE"
                      }
                    ],
                    "comparison": "COMPARISON_GT",
                    "thresholdValue": 0.05,
                    "duration": "60s",
                    "trigger": {
                      "count": 1
                    }
                  }
                }
              ],
              "alertStrategy": {
                "autoClose": "604800s"
              },
              "notificationChannels": []
            }
            EOF
          fi

          if [[ "${{ steps.components.outputs.monitor_mcp }}" == "true" ]]; then
            gcloud alpha monitoring policies create --policy-from-file=- << EOF
            {
              "displayName": "MCP Server High Error Rate",
              "conditions": [
                {
                  "displayName": "Error rate > 5%",
                  "conditionThreshold": {
                    "filter": "resource.type=\"cloud_run_revision\" AND resource.labels.service_name=\"mcp-server-${ENV}\" AND metric.type=\"run.googleapis.com/request_count\" AND metric.labels.response_code_class=\"4xx\"",
                    "aggregations": [
                      {
                        "alignmentPeriod": "60s",
                        "perSeriesAligner": "ALIGN_RATE"
                      }
                    ],
                    "comparison": "COMPARISON_GT",
                    "thresholdValue": 0.05,
                    "duration": "60s",
                    "trigger": {
                      "count": 1
                    }
                  }
                }
              ],
              "alertStrategy": {
                "autoClose": "604800s"
              },
              "notificationChannels": []
            }
            EOF
          fi
