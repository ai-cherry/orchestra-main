core/orchestrator/src/memory/lifecycle/progressive_summarizer.py:130:            aiplatform.init(project=project, location=location)
core/orchestrator/src/memory/lifecycle/progressive_summarizer.py:135:                self.openai_client = aiplatform.Endpoint(endpoint_name)
core/orchestrator/src/memory/lifecycle/progressive_summarizer.py:139:                self.openai_client = aiplatform.TextGenerationModel.from_pretrained(
core/orchestrator/src/memory/lifecycle/progressive_summarizer.py:146:                "google-cloud-aiplatform package not installed. Falling back to rule-based summarization."
core/orchestrator/src/memory/retrieval/query_classifier.py:14:from optional_integrations import aiplatform  # Optional integration
core/orchestrator/src/memory/retrieval/query_classifier.py:21:    import aiplatform
core/orchestrator/src/memory/retrieval/query_classifier.py:23:    aiplatform = None
core/orchestrator/src/memory/retrieval/query_classifier.py:183:            aiplatform.init(project=project, location=location)
core/orchestrator/src/memory/retrieval/query_classifier.py:188:                self.openai_client = aiplatform.Endpoint(endpoint_name)
core/orchestrator/src/memory/retrieval/query_classifier.py:192:                self.openai_client = aiplatform.TextEmbeddingModel.from_pretrained(
core/orchestrator/src/memory/retrieval/query_classifier.py:201:                "google-cloud-aiplatform package not installed. Falling back to rule-based classification."
core/orchestrator/src/memory/layered_memory_manager.py:20:from optional_integrations import mongodb, aiplatform  # Optional integrations
core/orchestrator/src/memory/layered_memory_manager.py:491:        endpoint = aiplatform.MatchingEngineIndexEndpoint(
shared/vertex_ai/bridge.py:354:            # Initialize aiplatform
shared/vertex_ai/bridge.py:355:            aiplatform.init(project=self.project_id, location=self.location)
shared/vertex_ai/bridge.py:357:            # Client is initialized through aiplatform.init()
shared/vertex_ai/bridge.py:522:                vertex_model = aiplatform.GenerativeModel(model.value)
shared/vertex_ai/bridge.py:541:                # The aiplatform.PredictionService approach
shared/vertex_ai/bridge.py:552:                endpoint = aiplatform.Endpoint(
shared/vertex_ai/bridge.py:644:            model = aiplatform.TextEmbeddingModel.from_pretrained(model_name)
packages/vertex_client/requirements.txt:4:google-cloud-aiplatform>=1.30.0
packages/vertex_client/README.md:33:- Google Cloud libraries (aiplatform, pubsub, run, secretmanager)
packages/agents/src/routing.py:77:            aiplatform.init(project=project_id, location=self.location)
packages/agents/src/routing.py:82:                self.matching_engine_endpoint = aiplatform.MatchingEngineIndexEndpoint(
packages/agents/src/routing.py:396:                # filter_str = f'resource.type="aiplatform.googleapis.com/Agent" AND resource.labels.agent_id="{agent_id}"'
