name: Deploy MCP Server

on:
  push:
    branches: [main]
    paths:
      - "mcp_server/**"
      - ".github/workflows/deploy.yml"
  pull_request:
    branches: [main]
    paths:
      - "mcp_server/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: ${{ secrets.Vultr_PROJECT_ID }}
  SERVICE_NAME: mcp-server
  REGION: us-central1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis/redis-stack:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: mcp_server/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd mcp_server
          poetry install --no-interaction

      - name: Run tests
        run: |
          cd mcp_server
          poetry run pytest -v

      - name: Run linters
        run: |
          cd mcp_server
          poetry run black . --check
          poetry run isort . --check
          poetry run flake8 .
          poetry run mypy .

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi
          echo "IMAGE_NAME=registry.vultr.com/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Authenticate to Vultr
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./mcp_server
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }},${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}

      - name: Save image name and tag
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

  deploy:
    name: Deploy to Cloud Run
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Vultr
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

          # Set environment-specific variables
          if [ "${{ env.ENVIRONMENT }}" == "prod" ]; then
            echo "MIN_INSTANCES=2" >> $GITHUB_ENV
            echo "MAX_INSTANCES=100" >> $GITHUB_ENV
            echo "CPU=2" >> $GITHUB_ENV
            echo "MEMORY=2Gi" >> $GITHUB_ENV
            echo "CONCURRENCY=80" >> $GITHUB_ENV
          elif [ "${{ env.ENVIRONMENT }}" == "staging" ]; then
            echo "MIN_INSTANCES=1" >> $GITHUB_ENV
            echo "MAX_INSTANCES=10" >> $GITHUB_ENV
            echo "CPU=1" >> $GITHUB_ENV
            echo "MEMORY=1Gi" >> $GITHUB_ENV
            echo "CONCURRENCY=40" >> $GITHUB_ENV
          else
            echo "MIN_INSTANCES=0" >> $GITHUB_ENV
            echo "MAX_INSTANCES=5" >> $GITHUB_ENV
            echo "CPU=1" >> $GITHUB_ENV
            echo "MEMORY=512Mi" >> $GITHUB_ENV
            echo "CONCURRENCY=20" >> $GITHUB_ENV
          fi

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }}
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          region: ${{ env.REGION }}
          flags: |
            --cpu=${{ env.CPU }}
            --memory=${{ env.MEMORY }}
            --concurrency=${{ env.CONCURRENCY }}
            --min-instances=${{ env.MIN_INSTANCES }}
            --max-instances=${{ env.MAX_INSTANCES }}
            --timeout=300s
            --set-secrets=REDIS_CREDENTIALS=redis-credentials:latest
            --vpc-connector=projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}/connectors/vpc-connector
            --allow-unauthenticated

      - name: Show Output
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"

      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GH_FINE_GRAINED_PAT_TOKEN }}
          environment: ${{ env.ENVIRONMENT }}
          initial-status: success
          description: "Deployed MCP Server to ${{ env.ENVIRONMENT }}"
          ref: ${{ github.sha }}
          transient-environment: ${{ env.ENVIRONMENT != 'prod' }}
          production-environment: ${{ env.ENVIRONMENT == 'prod' }}
          auto-inactive: true
          log-url: ${{ steps.deploy.outputs.url }}

  notify:
    name: Notify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Set status
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "STATUS=success" >> $GITHUB_ENV
            echo "ICON=✅" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "ICON=❌" >> $GITHUB_ENV
          fi

      - name: Create GitHub Issue on Failure
        if: env.STATUS == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_CLASSIC_PAT_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Deployment to ${process.env.ENVIRONMENT} failed`,
              body: `Deployment of MCP Server to ${process.env.ENVIRONMENT} failed.\n\nCommit: ${context.sha}\nWorkflow: ${context.workflow}\nRun: ${context.runId}\n\nPlease check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`,
              labels: ['deployment', 'bug', 'priority']
            });
            console.log(`Created issue #${issue.data.number}`);

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ env.ICON }} MCP Server Deployment to ${{ env.ENVIRONMENT }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ env.ICON }} MCP Server Deployment to ${{ env.ENVIRONMENT }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ env.STATUS }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:* ${{ env.ENVIRONMENT }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* ${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:* ${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
