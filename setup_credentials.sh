#!/bin/bash
# Orchestra Credentials Setup Script
# This script helps set up all necessary credentials for the Orchestra environment

set -e

# Color configuration
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Script header
echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}          Orchestra Credentials Setup Assistant             ${NC}"
echo -e "${BLUE}============================================================${NC}"
echo -e "This script will help you configure all the necessary credentials"
echo -e "for your Orchestra environment."
echo -e ""

# Check for .env file and create backup if it exists
if [ -f .env ]; then
    echo -e "${YELLOW}Found existing .env file. Creating backup...${NC}"
    cp .env .env.backup.$(date +%Y%m%d%H%M%S)
    echo -e "${GREEN}Backup created successfully.${NC}"
    echo -e ""
else
    echo -e "${YELLOW}No existing .env file found. Will create a new one.${NC}"
    echo -e ""
fi

# Initialize .env content
cat > .env << EOF
# Orchestra environment configuration
# Generated by setup_credentials.sh on $(date)

# Environment settings
APP_ENV=development
ENVIRONMENT=development

EOF

echo -e "${GREEN}Generated base .env file.${NC}"

# Function to prompt for a value with optional default
prompt_value() {
    local prompt="$1"
    local var_name="$2"
    local default_value="$3"
    local is_secret="${4:-false}"
    local value=""
    
    # Display prompt with default if provided
    if [ -n "$default_value" ]; then
        prompt_text="${prompt} [default: ${default_value}]: "
    else
        prompt_text="${prompt}: "
    fi
    
    # Read input, using -s flag if it's a secret
    if [ "$is_secret" = true ]; then
        read -p "$prompt_text" -s value
        echo # Add newline after hidden input
    else
        read -p "$prompt_text" value
    fi
    
    # Use default if no input provided
    if [ -z "$value" ] && [ -n "$default_value" ]; then
        value="$default_value"
    fi
    
    # Save to .env file
    if [ -n "$value" ]; then
        echo "${var_name}=${value}" >> .env
        echo -e "${GREEN}✓ ${var_name} set${NC}"
    else
        echo -e "${YELLOW}⚠ ${var_name} skipped${NC}"
    fi
}

# Function to create a section header in the .env file
add_section() {
    local section_name="$1"
    echo "" >> .env
    echo "# $section_name" >> .env
}

# 1. GCP Authentication
add_section "GCP Authentication"
echo -e "${BLUE}GCP Authentication${NC}"
echo -e "Setting up GCP authentication for Firestore, Redis, and other GCP services"

# Get existing values from the .env file if it exists
EXISTING_GCP_PROJECT_ID=$(grep "^GCP_PROJECT_ID=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "cherry-ai-project")
EXISTING_GCP_SA_PATH=$(grep "^GCP_SA_KEY_PATH=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "/tmp/vertex-agent-key.json")

prompt_value "GCP Project ID" "GCP_PROJECT_ID" "$EXISTING_GCP_PROJECT_ID"
echo "GOOGLE_CLOUD_PROJECT=${GCP_PROJECT_ID}" >> .env

prompt_value "GCP Service Account Key Path" "GCP_SA_KEY_PATH" "$EXISTING_GCP_SA_PATH"
echo "GOOGLE_APPLICATION_CREDENTIALS=${GCP_SA_KEY_PATH}" >> .env

# 2. Redis Configuration
add_section "Redis Configuration"
echo -e "${BLUE}Redis Configuration${NC}"
echo -e "Setting up Redis connection details"

EXISTING_REDIS_HOST=$(grep "^REDIS_HOST=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "localhost")
EXISTING_REDIS_PORT=$(grep "^REDIS_PORT=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "6379")
EXISTING_REDIS_SECRET=$(grep "^REDIS_PASSWORD_SECRET_NAME=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "redis-auth-dev")

prompt_value "Redis Host" "REDIS_HOST" "$EXISTING_REDIS_HOST"
prompt_value "Redis Port" "REDIS_PORT" "$EXISTING_REDIS_PORT"
prompt_value "Redis Password Secret Name" "REDIS_PASSWORD_SECRET_NAME" "$EXISTING_REDIS_SECRET"

# 3. LLM Provider Configuration
add_section "LLM Provider Configuration"
echo -e "${BLUE}LLM Provider Configuration${NC}"
echo -e "Setting up LLM provider credentials"

# Portkey API Key (for gateway)
EXISTING_PORTKEY_API_KEY=$(grep "^PORTKEY_API_KEY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
prompt_value "Portkey API Key" "PORTKEY_API_KEY" "$EXISTING_PORTKEY_API_KEY" true
echo "PREFERRED_LLM_PROVIDER=portkey" >> .env

# Portkey Admin Key (for managing virtual keys)
EXISTING_PORTKEY_ADMIN_KEY=$(grep "^MASTER_PORTKEY_ADMIN_KEY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
prompt_value "Portkey Admin API Key (for managing virtual keys)" "MASTER_PORTKEY_ADMIN_KEY" "$EXISTING_PORTKEY_ADMIN_KEY" true

# Native LLM API Keys
add_section "Native LLM API Keys (required by Portkey for headers)"
echo -e "${BLUE}Native LLM API Keys${NC}"
echo -e "These keys are required by Portkey for authentication headers"

EXISTING_OPENAI_KEY=$(grep "^OPENAI_API_KEY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
EXISTING_ANTHROPIC_KEY=$(grep "^ANTHROPIC_API_KEY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
EXISTING_OPENROUTER_KEY=$(grep "^OPENROUTER_API_KEY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")

prompt_value "OpenAI API Key" "OPENAI_API_KEY" "$EXISTING_OPENAI_KEY" true
prompt_value "Anthropic API Key" "ANTHROPIC_API_KEY" "$EXISTING_ANTHROPIC_KEY" true
prompt_value "OpenRouter API Key" "OPENROUTER_API_KEY" "$EXISTING_OPENROUTER_KEY" true

# Portkey Virtual Keys
add_section "Portkey Virtual Keys"
echo -e "${BLUE}Portkey Virtual Keys${NC}"
echo -e "These are virtual keys created in Portkey that reference provider keys"

EXISTING_OPENAI_VK=$(grep "^PORTKEY_VIRTUAL_KEY_OPENAI=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
EXISTING_ANTHROPIC_VK=$(grep "^PORTKEY_VIRTUAL_KEY_ANTHROPIC=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
EXISTING_OPENROUTER_VK=$(grep "^PORTKEY_VIRTUAL_KEY_OPENROUTER=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")

prompt_value "Portkey Virtual Key for OpenAI" "PORTKEY_VIRTUAL_KEY_OPENAI" "$EXISTING_OPENAI_VK"
prompt_value "Portkey Virtual Key for Anthropic" "PORTKEY_VIRTUAL_KEY_ANTHROPIC" "$EXISTING_ANTHROPIC_VK"
prompt_value "Portkey Virtual Key for OpenRouter" "PORTKEY_VIRTUAL_KEY_OPENROUTER" "$EXISTING_OPENROUTER_VK"

# Portkey Gateway Configuration
add_section "Portkey Gateway Configuration"
echo -e "${BLUE}Portkey Gateway Configuration${NC}"
echo -e "Gateway configuration for routing and fallbacks"

EXISTING_CONFIG_ID=$(grep "^PORTKEY_CONFIG_ID=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "")
EXISTING_STRATEGY=$(grep "^PORTKEY_STRATEGY=" .env.backup* 2>/dev/null | head -n1 | cut -d= -f2 || echo "fallback")

prompt_value "Portkey Gateway Config ID" "PORTKEY_CONFIG_ID" "$EXISTING_CONFIG_ID"
prompt_value "Portkey Routing Strategy" "PORTKEY_STRATEGY" "$EXISTING_STRATEGY"
echo 'PORTKEY_CACHE_ENABLED=true' >> .env

# 4. Salesforce Credentials (if needed)
echo -e "${BLUE}Salesforce Credentials${NC}"
echo -e "These are needed if you plan to use the Salesforce integration"
echo -e "Press Enter to skip if not needed"

add_section "Salesforce Credentials (optional)"
prompt_value "Salesforce Username" "SALESFORCE_USERNAME" ""
prompt_value "Salesforce Password" "SALESFORCE_PASSWORD" "" true
prompt_value "Salesforce Security Token" "SALESFORCE_SECURITY_TOKEN" "" true

# 5. Memory System Configuration
add_section "Memory System Configuration"
echo -e "${BLUE}Memory System Configuration${NC}"
echo -e "Configuration for the memory system"

echo 'MEMORY_ENVIRONMENT=dev' >> .env
echo 'MEMORY_ENABLE_DEV_NOTES=true' >> .env
echo 'MEMORY_DEFAULT_PRIVACY_LEVEL=standard' >> .env
echo 'MEMORY_ENFORCE_PRIVACY=false' >> .env

# Control for Run Settings
add_section "Run Settings"
echo "RUN_INTEGRATION_TESTS=true" >> .env

echo -e "${GREEN}Credentials setup complete!${NC}"
echo -e ""
echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}                 Next Steps                                ${NC}"
echo -e "${BLUE}============================================================${NC}"
echo -e "1. Review the generated .env file"
echo -e "2. If you don't have Portkey virtual keys yet, create them with:"
echo -e "   ${YELLOW}python scripts/manage_portkey_keys.py create-key --name \"OpenAI-Dev\" --provider openai --key \"YOUR_OPENAI_KEY\"${NC}"
echo -e "   ${YELLOW}python scripts/manage_portkey_keys.py create-key --name \"Anthropic-Dev\" --provider anthropic --key \"YOUR_ANTHROPIC_KEY\"${NC}"
echo -e "3. Verify GCP authentication with:"
echo -e "   ${YELLOW}python validate_memory_fixes.py${NC}"
echo -e "4. Test LLM integration with:"
echo -e "   ${YELLOW}python -m packages.llm.src.test_phidata_integration${NC}"
echo -e ""
echo -e "Would you like to automatically create missing Portkey virtual keys? (y/n)"
read -p "> " create_keys

if [[ "$create_keys" == "y" ]]; then
    echo -e "${BLUE}Setting up Portkey virtual keys...${NC}"
    
    # Check if we have the necessary credentials
    if [[ -z "$MASTER_PORTKEY_ADMIN_KEY" ]]; then
        echo -e "${RED}Error: MASTER_PORTKEY_ADMIN_KEY is not set. Cannot create virtual keys.${NC}"
        exit 1
    fi
    
    # Export the admin key so the script can use it
    export MASTER_PORTKEY_ADMIN_KEY
    
    # Check if we need to create an OpenAI virtual key
    if [[ -z "$PORTKEY_VIRTUAL_KEY_OPENAI" && -n "$OPENAI_API_KEY" ]]; then
        echo -e "Creating OpenAI virtual key..."
        python scripts/manage_portkey_keys.py create-key --name "OpenAI-Dev" --provider openai --key "$OPENAI_API_KEY"
    fi
    
    # Check if we need to create an Anthropic virtual key
    if [[ -z "$PORTKEY_VIRTUAL_KEY_ANTHROPIC" && -n "$ANTHROPIC_API_KEY" ]]; then
        echo -e "Creating Anthropic virtual key..."
        python scripts/manage_portkey_keys.py create-key --name "Anthropic-Dev" --provider anthropic --key "$ANTHROPIC_API_KEY"
    fi
    
    # Check if we need to create an OpenRouter virtual key
    if [[ -z "$PORTKEY_VIRTUAL_KEY_OPENROUTER" && -n "$OPENROUTER_API_KEY" ]]; then
        echo -e "Creating OpenRouter virtual key..."
        python scripts/manage_portkey_keys.py create-key --name "OpenRouter-Dev" --provider openrouter --key "$OPENROUTER_API_KEY"
    fi
    
    echo -e "${GREEN}Virtual key setup complete!${NC}"
    echo -e "Please update your .env file with the virtual key IDs from the output above."
fi

echo -e ""
echo -e "Would you like to verify the credentials now? (y/n)"
read -p "> " verify_creds

if [[ "$verify_creds" == "y" ]]; then
    echo -e "${BLUE}Verifying credentials...${NC}"
    
    # Source the .env file to load the environment variables
    source .env
    
    # Verify GCP authentication
    echo -e "Testing GCP authentication and memory system..."
    if python validate_memory_fixes.py; then
        echo -e "${GREEN}✓ Memory system verification passed${NC}"
    else
        echo -e "${RED}✗ Memory system verification failed${NC}"
    fi
    
    # Test LLM integration
    echo -e "Testing LLM integration with Portkey..."
    if python -m packages.llm.src.test_phidata_integration; then
        echo -e "${GREEN}✓ LLM integration verification passed${NC}"
    else
        echo -e "${RED}✗ LLM integration verification failed${NC}"
    fi
    
    # Test tool integration
    echo -e "Testing tool integration..."
    if python -m packages.tools.src.test_phidata_integration; then
        echo -e "${GREEN}✓ Tool integration verification passed${NC}"
    else
        echo -e "${RED}✗ Tool integration verification failed${NC}"
    fi
    
    echo -e "${BLUE}Verification complete!${NC}"
fi

echo -e ""
echo -e "${GREEN}All credentials have been set up. Happy coding!${NC}"
