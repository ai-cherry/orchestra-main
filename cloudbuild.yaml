# Cloud Build configuration for deploying to Cloud Run and syncing hybrid IDE environments

steps:
  # 1. Ensure asdf-managed tools are available
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if ! command -v asdf &>/dev/null; then
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
          . "/root/.asdf/asdf.sh"
        fi
        asdf plugin add python || true
        asdf plugin add terraform || true
        asdf plugin add nodejs || true
        asdf install --all

  # 2. Install Python application dependencies
  - name: "python:3.11"
    entrypoint: "pip"
    args: ["install", "-r", "requirements.txt"]

  # 3. Run pre-commit checks
  - name: "python:3.11"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Install pre-commit and development dependencies that hooks might need
        pip install pre-commit
        # Install any Python-based tools that pre-commit hooks might require
        pip install black isort ruff mypy types-requests types-PyYAML
        pre-commit run --all-files

  # 4. Build main Orchestra Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build-Main
    args: [
      'build',
      '-t', 'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/orchestra-main:$COMMIT_SHA',
      '.'
    ]

  # 5. Build Web Scraping Agents Docker image  
  - name: 'gcr.io/cloud-builders/docker'
    id: Build-WebScraping
    args: [
      'build',
      '-f', 'Dockerfile.webscraping',
      '-t', 'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/web-scraping-agents:$COMMIT_SHA',
      '.'
    ]

  # 6. Push main Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push-Main
    args: [
      'push',
      'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/orchestra-main:$COMMIT_SHA'
    ]

  # 7. Push web scraping Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push-WebScraping
    args: [
      'push',
      'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/web-scraping-agents:$COMMIT_SHA'
    ]

  # 8. Deploy main Orchestra service to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy-Main
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'ai-orchestra-minimal'
      - '--image=us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/orchestra-main:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-secrets=OPENAI_API_KEY=projects/cherry-ai-project/secrets/OPENAI_API_KEY:latest,PORTKEY_API_KEY=projects/cherry-ai-project/secrets/PORTKEY_API_KEY:latest,PERPLEXITY_API_KEY=projects/cherry-ai-project/secrets/PERPLEXITY_API_KEY:latest,ANTHROPIC_API_KEY=projects/cherry-ai-project/secrets/ANTHROPIC_API_KEY:latest,GOOGLE_API_KEY=projects/cherry-ai-project/secrets/GOOGLE_API_KEY:latest,VERTEX_API_KEY=projects/cherry-ai-project/secrets/VERTEX_API_KEY:latest,GITHUB_TOKEN=projects/cherry-ai-project/secrets/GITHUB_TOKEN:latest,SLACK_BOT_TOKEN=projects/cherry-ai-project/secrets/SLACK_BOT_TOKEN:latest,REDIS_PASSWORD=projects/cherry-ai-project/secrets/REDIS_PASSWORD:latest,DATABASE_URL=projects/cherry-ai-project/secrets/DATABASE_URL:latest,DRAGONFLY_PASSWORD=projects/cherry-ai-project/secrets/DRAGONFLY_PASSWORD:latest,DRAGONFLY_HOST=projects/cherry-ai-project/secrets/DRAGONFLY_HOST:latest,DRAGONFLY_PORT=projects/cherry-ai-project/secrets/DRAGONFLY_PORT:latest,DRAGONFLY_CONNECTION_URI=projects/cherry-ai-project/secrets/DRAGONFLY_CONNECTION_URI:latest'

  # 9. Deploy Web Scraping Agents service to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy-WebScraping
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'web-scraping-agents'
      - '--image=us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/web-scraping-agents:$COMMIT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--memory=8Gi'
      - '--cpu=4'
      - '--min-instances=1'
      - '--max-instances=20'
      - '--concurrency=40'
      - '--timeout=900'
      - '--set-secrets=ZENROWS_API_KEY=projects/cherry-ai-project/secrets/ZENROWS_API_KEY:latest,APIFY_API_KEY=projects/cherry-ai-project/secrets/APIFY_API_KEY:latest,PHANTOMBUSTER_API_KEY=projects/cherry-ai-project/secrets/PHANTOMBUSTER_API_KEY:latest,OPENAI_API_KEY=projects/cherry-ai-project/secrets/OPENAI_API_KEY:latest,REDIS_HOST=projects/cherry-ai-project/secrets/REDIS_HOST:latest,REDIS_PASSWORD=projects/cherry-ai-project/secrets/REDIS_PASSWORD:latest,DRAGONFLY_HOST=projects/cherry-ai-project/secrets/DRAGONFLY_HOST:latest,DRAGONFLY_PASSWORD=projects/cherry-ai-project/secrets/DRAGONFLY_PASSWORD:latest'
      - '--set-env-vars=GOOGLE_CLOUD_PROJECT=cherry-ai-project,SEARCH_AGENTS=3,SCRAPER_AGENTS=5,ANALYZER_AGENTS=3,REDIS_PORT=6379'

images:
  - 'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/orchestra-main:$COMMIT_SHA'
  - 'us-central1-docker.pkg.dev/cherry-ai-project/orchestra-images/web-scraping-agents:$COMMIT_SHA'

timeout: 2400s  # Increased for multiple builds

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: "E2_HIGHCPU_8"
  env:
    - "PYTHONUNBUFFERED=1"

serviceAccount: "projects/cherry-ai-project/serviceAccounts/vertex-agent@cherry-ai-project.iam.gserviceaccount.com"

artifacts:
  objects:
    location: "gs://cherry-ai-me-cloudbuild-artifacts/"
    paths: ["scan-results.json"]
