#!/bin/bash

# 🔄 Orchestra AI - Intelligent Lambda Labs Sync Script
# Syncs local development with Lambda Labs GPU instance

set -euo pipefail

# Colors

# Check for required environment variables
if [ -z "${PULUMI_ACCESS_TOKEN:-}" ]; then
    echo "❌ Error: PULUMI_ACCESS_TOKEN environment variable not set"
    echo "💡 Set it with: export PULUMI_ACCESS_TOKEN=your_token_here"
    exit 1
fi

readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

# Configuration
readonly LOCAL_DIR="/Users/lynnmusil/orchestra-dev"
readonly REMOTE_DIR="/home/ubuntu/orchestra-main"
readonly LAMBDA_IP_FILE="/tmp/lambda_ip.txt"
readonly SYNC_LOG="/tmp/lambda_sync.log"

# Logging functions
log_info() { echo -e "${BLUE}$1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️ $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }
log_sync() { echo -e "${CYAN}🔄 $1${NC}"; }

# Get Lambda Labs IP
get_lambda_ip() {
    if [ -f "$LAMBDA_IP_FILE" ]; then
        cat "$LAMBDA_IP_FILE"
    else
        # Try to get from Pulumi
        cd "$LOCAL_DIR/infrastructure/pulumi"
        export PATH=$PATH:$HOME/.pulumi/bin
        export PULUMI_ACCESS_TOKEN="${PULUMI_ACCESS_TOKEN}"
        pulumi stack output ip_address 2>/dev/null || echo ""
    fi
}

# Check SSH connectivity
check_ssh() {
    local lambda_ip="$1"
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no ubuntu@$lambda_ip "echo 'SSH test'" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Intelligent sync with exclusions
sync_to_remote() {
    local lambda_ip="$1"
    local direction="$2"  # push, pull, or both
    
    log_sync "Starting intelligent sync ($direction)..."
    
    # Create rsync exclusion patterns
    local exclude_patterns=(
        "--exclude=.git/"
        "--exclude=__pycache__/"
        "--exclude=*.pyc"
        "--exclude=*.pyo"
        "--exclude=.env"
        "--exclude=.env.local"
        "--exclude=venv/"
        "--exclude=node_modules/"
        "--exclude=.DS_Store"
        "--exclude=*.log"
        "--exclude=tmp/"
        "--exclude=.cursor/"
        "--exclude=.vscode/"
        "--exclude=infrastructure/legacy/"
        "--exclude=*.backup"
        "--exclude=*.tmp"
    )
    
    # Common rsync options
    local rsync_opts=(
        "-avz"
        "--progress"
        "--delete"
        "--compress-level=6"
        "${exclude_patterns[@]}"
    )
    
    case "$direction" in
        "push")
            log_sync "Pushing local changes to Lambda Labs..."
            rsync "${rsync_opts[@]}" \
                "$LOCAL_DIR/" \
                "ubuntu@$lambda_ip:$REMOTE_DIR/" \
                2>&1 | tee "$SYNC_LOG"
            ;;
        "pull")
            log_sync "Pulling changes from Lambda Labs..."
            rsync "${rsync_opts[@]}" \
                "ubuntu@$lambda_ip:$REMOTE_DIR/" \
                "$LOCAL_DIR/" \
                2>&1 | tee "$SYNC_LOG"
            ;;
        "both")
            log_sync "Bidirectional sync (pull first, then push)..."
            # Pull first to get remote changes
            rsync "${rsync_opts[@]}" \
                "ubuntu@$lambda_ip:$REMOTE_DIR/" \
                "$LOCAL_DIR/" \
                2>&1 | tee "$SYNC_LOG"
            
            # Then push local changes
            rsync "${rsync_opts[@]}" \
                "$LOCAL_DIR/" \
                "ubuntu@$lambda_ip:$REMOTE_DIR/" \
                2>&1 | tee -a "$SYNC_LOG"
            ;;
        *)
            log_error "Invalid sync direction: $direction"
            return 1
            ;;
    esac
    
    log_success "Sync completed successfully"
}

# Show sync status
show_sync_status() {
    local lambda_ip="$1"
    
    log_info "📊 Sync Status Report:"
    echo
    
    # Check last sync time
    if [ -f "$SYNC_LOG" ]; then
        local last_sync=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$SYNC_LOG" 2>/dev/null || echo "Unknown")
        log_info "Last sync: $last_sync"
    else
        log_warning "No previous sync found"
    fi
    
    # Check file differences
    log_info "Checking for differences..."
    
    # Count local files
    local local_files=$(find "$LOCAL_DIR" -type f \
        ! -path "*/.git/*" \
        ! -path "*/__pycache__/*" \
        ! -path "*/venv/*" \
        ! -path "*/node_modules/*" \
        ! -path "*/.cursor/*" \
        ! -path "*/.vscode/*" \
        | wc -l | tr -d ' ')
    
    log_info "Local files: $local_files"
    
    # Check remote files (if accessible)
    if check_ssh "$lambda_ip"; then
        local remote_files=$(ssh ubuntu@$lambda_ip "find $REMOTE_DIR -type f 2>/dev/null | wc -l" 2>/dev/null || echo "0")
        log_info "Remote files: $remote_files"
        
        # Quick diff check
        local diff_count=$(rsync -avz --dry-run --delete \
            --exclude=.git/ --exclude=__pycache__/ --exclude=*.pyc \
            --exclude=venv/ --exclude=node_modules/ --exclude=.cursor/ \
            "$LOCAL_DIR/" "ubuntu@$lambda_ip:$REMOTE_DIR/" 2>/dev/null | grep -c "^>" || echo "0")
        
        if [ "$diff_count" -gt 0 ]; then
            log_warning "Found $diff_count differences"
        else
            log_success "Local and remote are in sync"
        fi
    else
        log_warning "Cannot check remote status (SSH not available)"
    fi
}

# Watch for file changes and auto-sync
watch_and_sync() {
    local lambda_ip="$1"
    
    log_sync "Starting file watcher for auto-sync..."
    log_info "Watching: $LOCAL_DIR"
    log_info "Target: ubuntu@$lambda_ip:$REMOTE_DIR"
    log_info "Press Ctrl+C to stop watching"
    
    # Use fswatch if available, otherwise fall back to basic monitoring
    if command -v fswatch >/dev/null 2>&1; then
        fswatch -o "$LOCAL_DIR" \
            --exclude="\.git/" \
            --exclude="__pycache__/" \
            --exclude="\.pyc$" \
            --exclude="venv/" \
            --exclude="node_modules/" \
            --exclude="\.cursor/" \
            --exclude="\.vscode/" \
            | while read num; do
                log_sync "File changes detected, syncing..."
                sync_to_remote "$lambda_ip" "push"
                sleep 2  # Debounce
            done
    else
        log_warning "fswatch not found, install with: brew install fswatch"
        log_info "Falling back to manual sync mode"
        return 1
    fi
}

# Main function
main() {
    local action="${1:-status}"
    
    echo "🔄 Orchestra AI - Lambda Labs Sync"
    echo "=================================="
    
    # Get Lambda Labs IP
    local lambda_ip=$(get_lambda_ip)
    if [ -z "$lambda_ip" ] || [ "$lambda_ip" = "null" ]; then
        log_error "Lambda Labs IP not found"
        log_info "Make sure Lambda Labs infrastructure is deployed:"
        log_info "  cd infrastructure/pulumi && pulumi up"
        exit 1
    fi
    
    log_info "Lambda Labs IP: $lambda_ip"
    
    # Check SSH connectivity
    if ! check_ssh "$lambda_ip"; then
        log_error "Cannot connect to Lambda Labs instance"
        log_info "Check if the instance is running and SSH is configured"
        exit 1
    fi
    
    log_success "SSH connectivity verified"
    
    # Execute action
    case "$action" in
        "push")
            sync_to_remote "$lambda_ip" "push"
            ;;
        "pull")
            sync_to_remote "$lambda_ip" "pull"
            ;;
        "both"|"sync")
            sync_to_remote "$lambda_ip" "both"
            ;;
        "status")
            show_sync_status "$lambda_ip"
            ;;
        "watch")
            watch_and_sync "$lambda_ip"
            ;;
        "help"|"-h"|"--help")
            echo
            echo "Usage: $0 [action]"
            echo
            echo "Actions:"
            echo "  push    - Push local changes to Lambda Labs"
            echo "  pull    - Pull changes from Lambda Labs"
            echo "  both    - Bidirectional sync (pull then push)"
            echo "  sync    - Same as 'both'"
            echo "  status  - Show sync status and differences"
            echo "  watch   - Watch for file changes and auto-sync"
            echo "  help    - Show this help message"
            echo
            echo "Examples:"
            echo "  $0 push          # Push local changes"
            echo "  $0 pull          # Pull remote changes"
            echo "  $0 sync          # Full bidirectional sync"
            echo "  $0 status        # Check sync status"
            echo "  $0 watch         # Auto-sync on file changes"
            ;;
        *)
            log_error "Unknown action: $action"
            log_info "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 
