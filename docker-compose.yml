version: '3.8'

services:
  # Main Orchestra API service
  orchestra-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=development
    image: us-central1-docker.pkg.dev/cherry-ai.me/orchestra/api:latest
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Force standard mode and disable recovery mode
      - USE_RECOVERY_MODE=false
      - STANDARD_MODE=true
      - VSCODE_DISABLE_WORKSPACE_TRUST=true
      - DISABLE_WORKSPACE_TRUST=true
      # Optional Agno configuration - will be used only if Agno is installed
      - AGNO_API_KEY=${AGNO_API_KEY:-}
      - AGNO_PROJECT_ID=${AGNO_PROJECT_ID:-orchestra}
      - GCP_PROJECT_ID=cherry-ai.me
      - GOOGLE_CLOUD_PROJECT=cherry-ai.me
      - GOOGLE_APPLICATION_CREDENTIALS=/tmp/vertex-agent-key.json
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=8000
      - PROJECT_ID=cherry-ai.me
      - REGION=us-central1
    volumes:
      - ./core:/app/core
      - ./packages:/app/packages
      - .:/app
      - ${GOOGLE_APPLICATION_CREDENTIALS:-~/.config/gcloud/application_default_credentials.json}:/tmp/vertex-agent-key.json:ro
    networks:
      - orchestra-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: ["/app/startup.sh"]

  # Phidata Agent UI service (formerly Agno UI)
  phidata-ui:
    image: phidata/agno-ui:latest
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://orchestra-api:8000
      - MCP_ENABLED=true
      - MEMORY_ENABLED=true
      - STANDARD_MODE=true
      - USE_RECOVERY_MODE=false
      - VSCODE_DISABLE_WORKSPACE_TRUST=true
      - DISABLE_WORKSPACE_TRUST=true
    networks:
      - orchestra-network
    depends_on:
      - orchestra-api
    restart: unless-stopped

  # LLM Testing service - for validating different providers
  llm-test-service:
    build:
      context: .
      dockerfile: Dockerfile.llm-test
    image: us-central1-docker.pkg.dev/cherry-ai.me/orchestra/llm:latest
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PROJECT_ID=cherry-ai.me
      - REGION=us-central1
      - GOOGLE_CLOUD_PROJECT=cherry-ai.me
      - USE_RECOVERY_MODE=false
      - STANDARD_MODE=true
      - VSCODE_DISABLE_WORKSPACE_TRUST=true
      - DISABLE_WORKSPACE_TRUST=true
    networks:
      - orchestra-network
    depends_on:
      - redis
    volumes:
      - .:/app
    restart: unless-stopped
    command: ["python", "-m", "tools.llm_test_server.main"]

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - orchestra-network
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for medium-term memory storage
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=orchestra
      - POSTGRES_PASSWORD=orchestrapass
      - POSTGRES_DB=orchestradb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - orchestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orchestra"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring service with Prometheus & Grafana
  monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - orchestra-network
    depends_on:
      - orchestra-api
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    networks:
      - orchestra-network
    depends_on:
      - monitoring
    restart: unless-stopped

  # Data Sync service
  data-sync:
    build:
      context: .
      dockerfile: Dockerfile.data-sync
    image: us-central1-docker.pkg.dev/cherry-ai.me/orchestra/data-sync:latest
    environment:
      - PROJECT_ID=cherry-ai.me
      - REGION=us-central1
      - GOOGLE_CLOUD_PROJECT=cherry-ai.me
      - USE_RECOVERY_MODE=false
      - STANDARD_MODE=true
      - VSCODE_DISABLE_WORKSPACE_TRUST=true
      - DISABLE_WORKSPACE_TRUST=true
    volumes:
      - .:/app
    networks:
      - orchestra-network
    restart: unless-stopped
    command: ["python", "data_sync.py"]

  # Simplified app service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PROJECT_ID=cherry-ai.me
      - GOOGLE_CLOUD_PROJECT=cherry-ai.me
      - USE_RECOVERY_MODE=false
      - STANDARD_MODE=true
      - VSCODE_DISABLE_WORKSPACE_TRUST=true
      - DISABLE_WORKSPACE_TRUST=true
    volumes:
      - .:/app
    restart: unless-stopped
    command: ["/app/startup.sh"]

volumes:
  redis-data:
  postgres-data:
  redis_data:

networks:
  orchestra-network:
    driver: bridge
