// This file is for use with Gemini Code Assist in VS Code/Codespaces
// To use, install Gemini Code Assist extension, then use the comment prompt below

/**
 * Migration script to move cherry-ai-project project to organization 873291114285
 * Handles permissions, IAM bindings, and verification
 * 
 * To generate with Gemini Code Assist, use:
 * /generate migration script that moves cherry-ai-project to organization 873291114285
 */

// The script below will be generated by Gemini Code Assist when prompted
// This is a template for what it should look like:

/**
 * GCP Project Migration Script
 * Migrates cherry-ai-project to organization 873291114285
 */

// Shell script to be saved as migrate_project.sh
const migrationScript = `#!/bin/bash
# migrate_project.sh
# 
# Migrates cherry-ai-project project to organization 873291114285
# Handles permissions, validation, and verification

set -e

# Configuration
PROJECT_ID="cherry-ai-project"
ORG_ID="873291114285"
CURRENT_USER=$(gcloud config get-value account)

echo "===== GCP Project Migration ====="
echo "Project: $PROJECT_ID"
echo "Target Organization: $ORG_ID"
echo "User: $CURRENT_USER"

# Step 1: Grant necessary permissions
echo "\\nStep 1: Granting necessary permissions..."

# Grant owner on project
gcloud projects add-iam-policy-binding "$PROJECT_ID" \\
  --member="user:$CURRENT_USER" \\
  --role="roles/owner" || {
    echo "Warning: Failed to grant owner role. May already exist or insufficient permissions."
}

# Grant organizationAdmin on organization
gcloud organizations add-iam-policy-binding "$ORG_ID" \\
  --member="user:$CURRENT_USER" \\
  --role="roles/resourcemanager.organizationAdmin" || {
    echo "Warning: Failed to grant organizationAdmin role. Continuing anyway."
}

# Grant projectCreator on organization
gcloud organizations add-iam-policy-binding "$ORG_ID" \\
  --member="user:$CURRENT_USER" \\
  --role="roles/resourcemanager.projectCreator" || {
    echo "Warning: Failed to grant projectCreator role. Continuing anyway."
}

# Grant projectMover on organization
gcloud organizations add-iam-policy-binding "$ORG_ID" \\
  --member="user:$CURRENT_USER" \\
  --role="roles/resourcemanager.projectMover" || {
    echo "Warning: Failed to grant projectMover role. Continuing anyway."
}

# Step 2: Wait for IAM propagation
echo "\\nStep 2: Waiting for IAM propagation (important!)..."
echo "Waiting 5 minutes for IAM changes to propagate..."
for i in {300..1}; do
  echo -ne "Remaining: $i seconds\\r"
  sleep 1
done
echo -e "\\nIAM propagation wait complete."

# Step 3: Execute migration
echo "\\nStep 3: Executing project migration..."
gcloud beta projects move "$PROJECT_ID" \\
  --organization="$ORG_ID" || {
    echo "First migration attempt failed. Trying with additional options..."
    gcloud beta projects move "$PROJECT_ID" \\
      --organization="$ORG_ID" \\
      --billing-project="$PROJECT_ID" || {
        echo "ERROR: Migration failed. See error message above."
        exit 1
    }
}

# Step 4: Verify migration success
echo "\\nStep 4: Verifying migration success..."
CURRENT_ORG=$(gcloud projects describe "$PROJECT_ID" --format="value(parent.id)")
if [[ "$CURRENT_ORG" == "organizations/$ORG_ID" ]]; then
  echo "✅ MIGRATION SUCCESSFUL!"
  echo "Project $PROJECT_ID is now in organization $ORG_ID"
else
  echo "❌ MIGRATION VERIFICATION FAILED"
  echo "Project is in: $CURRENT_ORG"
  echo "Expected: organizations/$ORG_ID"
  exit 1
fi

# Step 5: Update billing account (if needed)
echo "\\nStep 5: Updating billing account linkage..."
BILLING_ACCOUNT=$(gcloud beta billing accounts list --format="value(name)" | head -n 1)
if [ -n "$BILLING_ACCOUNT" ]; then
  gcloud beta billing projects link "$PROJECT_ID" \\
    --billing-account="$BILLING_ACCOUNT" || {
      echo "Warning: Failed to update billing account. Please check manually."
  }
  echo "✅ Billing account updated"
else
  echo "No billing accounts found. Skipping billing update."
fi

echo "\\n===== Migration Complete ====="
echo "Project: $PROJECT_ID"
echo "Organization: $ORG_ID ($CURRENT_ORG)"
echo "\\nNext step: Check in GCP Console (IAM & Admin > Settings)"
echo "The 'Organization' field should show the target organization."
`;

// Function to save the migration script
function saveMigrationScript() {
  // This would be handled by the Gemini Code Assist extension
  console.log('Migration script generated');
}

// Function to execute the migration script
function executeMigrationScript() {
  // This would be executed by the user in the terminal
  console.log('Execute with: chmod +x migrate_project.sh && ./migrate_project.sh');
}

// Output
console.log('Migration script generated for moving cherry-ai-project to organization 873291114285');
console.log('Save to migrate_project.sh and execute with bash');
