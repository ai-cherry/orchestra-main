#!/usr/bin/env bash
set -euo pipefail

echo "▶ Starting Pulumi focused dev container setup script (setup.sh)..."

# Define Project ID from environment or default
PROJECT_ID="${PROJECT_ID:-cherry-ai-project}"
SA_KEY_PATH="${containerWorkspaceFolder}/.gcp_sa.json" # Path for the SA key, matches devcontainer.json

echo "▶ Using GCP Project ID: ${PROJECT_ID}"
echo "▶ Service Account key will be stored at: ${SA_KEY_PATH}"

# --- GCP Service Account Setup for Pulumi & gcloud ---
echo "  Attempting to use host gcloud authentication to fetch platform-admin SA key..."
# The following command relies on the gcloud config mounted from the host
# It attempts a login which might refresh tokens if host is already logged in.
# The `|| true` allows the script to continue if login itself non-interactive fails or has no update.
gcloud auth login --brief --quiet || echo "  Info: 'gcloud auth login' non-critical step finished or was skipped."

# Ensure the target directory for the SA key exists
mkdir -p "$(dirname "${SA_KEY_PATH}")"

echo "  Fetching 'platform-admin-key' from Secret Manager..."
if gcloud secrets versions access latest \
  --secret="platform-admin-key" \
  --project="${PROJECT_ID}" \
  > "${SA_KEY_PATH}"; then
  echo "  Successfully fetched platform-admin SA key to ${SA_KEY_PATH}."
  # GOOGLE_APPLICATION_CREDENTIALS is set via devcontainer.json, pointing to SA_KEY_PATH
  # Activate this SA for subsequent gcloud commands in this script
  echo "  Activating fetched SA key for gcloud CLI operations in this script..."
  if gcloud auth activate-service-account --key-file="${SA_KEY_PATH}" --project="${PROJECT_ID}" --quiet; then
    echo "  Successfully activated SA for gcloud CLI."
  else
    echo "  ⚠️ WARNING: Failed to activate SA for gcloud CLI. Subsequent gcloud commands in this script might use a different identity."
  fi
else
  echo "  ❌ ERROR: Failed to fetch 'platform-admin-key' from Secret Manager."
  echo "      This key is required for GOOGLE_APPLICATION_CREDENTIALS and Pulumi GCP authentication."
  echo "      Please ensure:"
  echo "        1. Your host's gcloud CLI is authenticated to GCP ('gcloud auth login')."
  echo "        2. The authenticated user has 'secretmanager.versions.access' permission for 'platform-admin-key' in project '${PROJECT_ID}'."
  echo "        3. The secret 'platform-admin-key' exists in Secret Manager in project '${PROJECT_ID}'."
  exit 1 # Critical failure, Pulumi login and other operations will likely fail
fi

# --- Pulumi Login to GCS Backend ---
PULUMI_GCS_BUCKET_NAME="cherry-ai-project-pulumi-state" # As per your plan
PULUMI_LOGIN_TARGET="gs://${PULUMI_GCS_BUCKET_NAME}"

echo "▶ Attempting to log in to Pulumi using GCS backend: ${PULUMI_LOGIN_TARGET}..."

# Check if bucket exists, try to create if not (optional, Pulumi login might also fail helpfully)
# This requires the activated SA to have storage.buckets.create and storage.buckets.get permissions if the bucket doesn't exist.
if ! gsutil ls -b "${PULUMI_LOGIN_TARGET}" >/dev/null 2>&1; then
  echo "  Pulumi state bucket '${PULUMI_GCS_BUCKET_NAME}' not found. Attempting to create it..."
  if gsutil mb -p "${PROJECT_ID}" -l "${REGION:-us-central1}" "${PULUMI_LOGIN_TARGET}"; then # Use REGION from env if set
    echo "  Successfully created GCS bucket: ${PULUMI_GCS_BUCKET_NAME}"
    gsutil versioning set on "${PULUMI_LOGIN_TARGET}"
    echo "  Enabled versioning on bucket ${PULUMI_GCS_BUCKET_NAME}."
  else
    echo "  ⚠️ WARNING: Failed to create GCS bucket '${PULUMI_GCS_BUCKET_NAME}'. Pulumi login might fail."
    echo "      Please ensure the bucket exists or the SA has permissions to create it and set versioning."
  fi
else
  echo "  Found existing Pulumi state bucket: ${PULUMI_GCS_BUCKET_NAME}."
fi 

if pulumi login "${PULUMI_LOGIN_TARGET}"; then
  echo "  Successfully logged into Pulumi backend: ${PULUMI_LOGIN_TARGET}."
else
  echo "  ❌ ERROR: Failed to log into Pulumi backend: ${PULUMI_LOGIN_TARGET}."
  echo "      Ensure the GCS bucket exists and the SA key ('${SA_KEY_PATH}') provides necessary permissions (Storage Object Admin on the bucket)."
  # exit 1 # You might want to exit if Pulumi login is critical for all dev workflows
fi

# --- Optional: Fetch other common API keys for general shell use (demonstration) ---
# This section can be expanded based on your needs, similar to the old init-dev.sh.
# For a pure Pulumi workflow, keys might be managed by Pulumi config or fetched by apps at runtime.
# If you want general env vars for tools/scripts outside Pulumi, this is where you'd add them.

BASHRC_ADDITIONS_FILE="/home/vscode/.devcontainer_env_setup_extras"
echo "# Auto-generated by Pulumi devcontainer setup.sh $(date)" > "${BASHRC_ADDITIONS_FILE}"

# Example: Make GOOGLE_APPLICATION_CREDENTIALS persistent in new shells
if [ -n "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]; then
  echo "export GOOGLE_APPLICATION_CREDENTIALS='${GOOGLE_APPLICATION_CREDENTIALS}'" >> "${BASHRC_ADDITIONS_FILE}"
  echo "▶ GOOGLE_APPLICATION_CREDENTIALS also added to ${BASHRC_ADDITIONS_FILE} for new shells."
fi

# Add other frequently used variables if desired:
# echo "export MY_OTHER_KEY='some_value'" >> "${BASHRC_ADDITIONS_FILE}"

# Source this file in .bashrc idempotently
BASHRC_FILE="/home/vscode/.bashrc"
SOURCE_LINE_EXTRAS="if [ -f \"${BASHRC_ADDITIONS_FILE}\" ]; then source \"${BASHRC_ADDITIONS_FILE}\"; fi"
if ! grep -Fxq "${SOURCE_LINE_EXTRAS}" "${BASHRC_FILE}"; then
  echo -e "\n# Load additional devcontainer environment variables" >> "${BASHRC_FILE}"
  echo "${SOURCE_LINE_EXTRAS}" >> "${BASHRC_FILE}"
fi

# --- Final Verification & Info ---
echo "▶ Final gcloud identity check:"
gcloud auth list
gcloud config list project

echo "▶ Pulumi identity check:"
pulumi whoami --verbose

echo "✅  Pulumi dev container setup script completed."
echo "   Pulumi should be logged into GCS backend. SA key at: ${SA_KEY_PATH}."
echo "   Open a new terminal or source ~/.bashrc for environment variables to be fully available." 