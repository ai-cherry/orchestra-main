#!/usr/bin/env bash
set -euo pipefail

echo "▶ Starting dev container initialization script..."

# Define Project ID from environment or default
PROJECT_ID="${PROJECT_ID:-cherry-ai-project}"
echo "▶ Using GCP Project ID: ${PROJECT_ID}"

# --- GCP Platform Admin Service Account Setup ---
echo "▶ Setting up GCP platform-admin service account..."
KEY_TMP="/workspace/credentials.json" # Using /workspace as it's typically available

# Ensure the directory for credentials.json exists if it's not /workspace root
mkdir -p "$(dirname "$KEY_TMP")"

# 1. Pull platform-admin SA key from Secret Manager
# Relies on gcloud being authenticated via mounted config from host
echo "  Fetching platform-admin-key..."
if gcloud secrets versions access latest \
  --secret="platform-admin-key" \
  --project="${PROJECT_ID}" \
  > "${KEY_TMP}"; then
  echo "  Successfully fetched platform-admin-key to ${KEY_TMP}"
  export GOOGLE_APPLICATION_CREDENTIALS="${KEY_TMP}"
  echo "  Exported GOOGLE_APPLICATION_CREDENTIALS=${KEY_TMP}"
  
  echo "  Activating platform-admin service account..."
  if gcloud auth activate-service-account --key-file="${KEY_TMP}" --project="${PROJECT_ID}" --quiet; then
    echo "  Successfully activated platform-admin service account."
  else
    echo "  ⚠️ WARNING: Failed to activate platform-admin service account using keyfile ${KEY_TMP}. Subsequent gcloud commands might fail or use a different identity."
  fi
else
  echo "  ❌ ERROR: Failed to fetch platform-admin-key. This is critical for further secret fetching."
  echo "  Please ensure your local gcloud is authenticated and has permissions for secret 'platform-admin-key' in project '${PROJECT_ID}'."
  # Decide if you want to exit here or try to continue
  # exit 1 
fi

# --- Environment File for Persistent Env Vars ---
# This file will be sourced by .bashrc
BASHRC_ADDITIONS_FILE="/home/vscode/.devcontainer_env_secrets"
echo "▶ Preparing environment file for other secrets: ${BASHRC_ADDITIONS_FILE}"
# Overwrite/create the file fresh on each container start
echo "# Devcontainer environment variables sourced by .bashrc" > "${BASHRC_ADDITIONS_FILE}"
echo "# Auto-generated by init-dev.sh on $(date)" >> "${BASHRC_ADDITIONS_FILE}"
# Export GOOGLE_APPLICATION_CREDENTIALS if set, so it's also in .bashrc
if [ -n "${GOOGLE_APPLICATION_CREDENTIALS:-}" ]; then
  echo "export GOOGLE_APPLICATION_CREDENTIALS="${GOOGLE_APPLICATION_CREDENTIALS}"" >> "${BASHRC_ADDITIONS_FILE}"
fi


# --- Fetch and Export Other API Keys ---
echo "▶ Exporting other API keys as environment variables..."
# List all secrets that need to be fetched
SECRETS_TO_FETCH=(
  "OPENROUTER_API_KEY" "PORTKEY_API_KEY" "PERPLEXITY_API_KEY" "ANTHROPIC_API_KEY"
  "PULUMI_ACCESS_TOKEN" "GH_FINE_PAT" "GH_CLASSIC_PAT" "OPENAI_API_KEY"
  "DEEPSEEK_API_KEY" "HUGGINGFACE_TOKEN" "DOCKER_CLI_USER" "DOCKER_ACCESS_TOKEN"
  "AGNO_PHI_API_KEY" "EDENAI_API_KEY" "LANGCHAIN_API_KEY" "N8N_API_KEY"
  "PIPEDREAM_WORKFLOW_ID" "PIPEDREAM_OAUTH_CLIENT_ID" "PIPEDREAM_OAUTH_CLIENT_SECRET"
  "XAI_API_KEY"
)

for SECRET_NAME in "${SECRETS_TO_FETCH[@]}"; do
  echo "  Fetching secret: ${SECRET_NAME}..."
  # Fetch the secret value. If fails, V will be empty.
  SECRET_VALUE=$(gcloud secrets versions access latest --secret="${SECRET_NAME}" --project="${PROJECT_ID}" || echo "")
  
  if [ -z "${SECRET_VALUE}" ]; then
    echo "  ⚠️ WARNING: Failed to fetch secret '${SECRET_NAME}' or it is empty. It will be set as an empty environment variable."
  else
    echo "  Successfully fetched ${SECRET_NAME}."
  fi
  
  # Add to the environment file for .bashrc
  # Escape double quotes within the secret value if any (rare for API keys, but good practice)
  ESCAPED_SECRET_VALUE=$(echo "${SECRET_VALUE}" | sed 's/"/\"/g')
  echo "export ${SECRET_NAME}="${ESCAPED_SECRET_VALUE}"" >> "${BASHRC_ADDITIONS_FILE}"
  
  # Export for the current script's execution context
  export "${SECRET_NAME}=${SECRET_VALUE}"
done

# --- Source Environment File in .bashrc (Idempotently) ---
BASHRC_FILE="/home/vscode/.bashrc"
echo "▶ Ensuring ${BASHRC_FILE} sources ${BASHRC_ADDITIONS_FILE}..."
SOURCE_LINE="if [ -f "${BASHRC_ADDITIONS_FILE}" ]; then source "${BASHRC_ADDITIONS_FILE}"; fi"
if ! grep -Fxq "${SOURCE_LINE}" "${BASHRC_FILE}"; then
  echo -e "\n# Load devcontainer secrets and environment variables" >> "${BASHRC_FILE}"
  echo "${SOURCE_LINE}" >> "${BASHRC_FILE}"
  echo "  Added sourcing line to ${BASHRC_FILE}."
else
  echo "  Sourcing line already present in ${BASHRC_FILE}."
fi

# --- Docker Hub Login (Non-interactive) ---
# Check if DOCKER_ACCESS_TOKEN and DOCKER_CLI_USER were successfully fetched and are not empty
echo "▶ Attempting Docker Hub login..."
if [ -n "${DOCKER_ACCESS_TOKEN:-}" ] && [ -n "${DOCKER_CLI_USER:-}" ]; then
  if echo "${DOCKER_ACCESS_TOKEN}" | docker login -u "${DOCKER_CLI_USER}" --password-stdin; then
    echo "  Docker Hub login successful for user '${DOCKER_CLI_USER}'."
  else
    echo "  ⚠️ WARNING: Docker Hub login failed for user '${DOCKER_CLI_USER}'. Check DOCKER_ACCESS_TOKEN and DOCKER_CLI_USER."
  fi
else
  echo "  ℹ️  Skipping Docker Hub login: DOCKER_ACCESS_TOKEN or DOCKER_CLI_USER is not set or empty."
  echo "    DOCKER_CLI_USER is: '${DOCKER_CLI_USER:-Not set}'"
  # Avoid printing DOCKER_ACCESS_TOKEN to logs for security
  if [ -z "${DOCKER_ACCESS_TOKEN:-}" ]; then echo "    DOCKER_ACCESS_TOKEN is: Not set or empty"; fi
fi

# --- Final Verification (Optional) ---
echo "▶ Verifying final gcloud identity:"
gcloud auth list
gcloud config list project

echo "✅  Dev container initialization script completed."
echo "   Secrets have been fetched and exported as environment variables."
echo "   You may need to open a new terminal or source ~/.bashrc for all changes to take effect in existing terminals." 