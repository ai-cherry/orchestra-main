#!/bin/bash
# push_to_gcp.sh
# Script to push all infrastructure to GCP using real service account keys

set -e

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ID="cherry-ai-project"
PROJECT_NUMBER="525398941159"
REGION="us-central1"
GITHUB_ORG="ai-cherry"
GITHUB_REPO="orchestra-main"
GCP_USER_EMAIL="scoobyjava@cherry-ai.me"
GCP_BACKUP_EMAIL="musilllynn@gmail.com"
# GITHUB_TOKEN="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" # Removed hardcoded token

# Log function with timestamps
log() {
  local level=$1
  local message=$2
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")

  case $level in
    "INFO")
      echo -e "${GREEN}[${timestamp}] [INFO] ${message}${NC}"
      ;;
    "WARN")
      echo -e "${YELLOW}[${timestamp}] [WARN] ${message}${NC}"
      ;;
    "ERROR")
      echo -e "${RED}[${timestamp}] [ERROR] ${message}${NC}"
      ;;
    "SUCCESS")
      echo -e "${GREEN}[${timestamp}] [SUCCESS] ${message}${NC}"
      ;;
    *)
      echo -e "[${timestamp}] ${message}"
      ;;
  esac
}

# Create service account key files
# Removed create_service_account_key_files function as keys should not be hardcoded or generated by this script directly.
# The required key files (project-admin-key.json, secret-management-key.json)
# must be present in the script's directory or their paths provided securely.

# Authenticate with GCP using service account key
authenticate_with_gcp() {
  log "INFO" "Authenticating with GCP using project admin service account key..."

  # Authenticate with gcloud using the project admin service account
  gcloud auth activate-service-account orchestra-project-admin-sa@cherry-ai-project.iam.gserviceaccount.com --key-file=project-admin-key.json --project=${PROJECT_ID}

  # Set the project
  gcloud config set project ${PROJECT_ID}

  log "SUCCESS" "Authenticated with GCP"
}

# Enable required APIs
enable_apis() {
  log "INFO" "Enabling required APIs..."

  # List of APIs to enable
  apis=(
    "iam.googleapis.com"
    "cloudresourcemanager.googleapis.com"
    "secretmanager.googleapis.com"
    "run.googleapis.com"
    "artifactregistry.googleapis.com"
    "aiplatform.googleapis.com"
    "compute.googleapis.com"
    "storage.googleapis.com"
    "iamcredentials.googleapis.com"
    "cloudbuild.googleapis.com"
    "cloudfunctions.googleapis.com"
    "generativelanguage.googleapis.com"
  )

  # Enable each API
  for api in "${apis[@]}"; do
    log "INFO" "Enabling ${api}..."
    gcloud services enable ${api} --project=${PROJECT_ID}
  done

  log "SUCCESS" "Required APIs enabled"
}

# Create GitHub Actions workflow
create_github_actions_workflow() {
  log "INFO" "Creating GitHub Actions workflow..."

  # Create .github/workflows directory if it doesn't exist
  mkdir -p .github/workflows

  # Create workflow file
  cat > .github/workflows/deploy-to-gcp.yml << EOF
name: Deploy to GCP

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install pip-tools
        run: pip install pip-tools

      - name: Compile requirements (if needed)
        run: |
          if [ -f requirements/base.in ]; then
            pip-compile requirements/base.in --output-file requirements/base.txt
          fi
          if [ -f requirements/dev.in ]; then
            pip-compile requirements/dev.in --output-file requirements/dev.txt
          fi

      - name: Install dependencies
        run: |
          if [ -f requirements/dev.txt ]; then
            pip install -r requirements/dev.txt
          elif [ -f requirements/base.txt ]; then
            pip install -r requirements/base.txt
          else
            echo "No requirements file found."
            exit 1
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: \${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: \${{ secrets.VERTEX_SERVICE_ACCOUNT_EMAIL }}
          project_id: \${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy orchestra-api \\
            --source . \\
            --region \${{ secrets.GCP_REGION }} \\
            --platform managed \\
            --allow-unauthenticated
EOF

  log "SUCCESS" "GitHub Actions workflow created"
}

# Main function
main() {
  log "INFO" "Starting GCP infrastructure setup with real keys..."

  # Ensure key files are present (User needs to provide them securely)
  if [ ! -f "project-admin-key.json" ] || [ ! -f "secret-management-key.json" ]; then
    log "ERROR" "Service account key files 'project-admin-key.json' and/or 'secret-management-key.json' not found."
    log "ERROR" "Please ensure these files are present in the current directory: $(pwd)"
    log "ERROR" "These files should contain the respective service account keys for project-admin and secret-management."
    exit 1
  fi

  # Authenticate with GCP
  authenticate_with_gcp

  # Enable required APIs
  enable_apis

  # Create GitHub Actions workflow
  create_github_actions_workflow

  log "SUCCESS" "GCP infrastructure setup completed successfully!"
  log "INFO" "The following tasks have been completed:"
  log "INFO" "1. Ensured service account key files are present (user-provided)"
  log "INFO" "2. Authenticated with GCP"
  log "INFO" "3. Enabled required APIs"
  log "INFO" "(Terraform steps have been removed from this workflow)"

  log "INFO" "Your GCP service accounts are now set up and ready to use!"
}

# Execute main function
main
