# PostgreSQL Production Database Configuration
version: '3.8'

services:
  postgres-primary:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-orchestra_prod}
      - POSTGRES_USER=${POSTGRES_USER:-orchestra}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - orchestra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-orchestra}"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  postgres-backup:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_DB=${POSTGRES_DB:-orchestra_prod}
      - POSTGRES_USER=${POSTGRES_USER:-orchestra}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./database/backups:/backups
      - ./database/scripts:/scripts
    networks:
      - orchestra-network
    depends_on:
      - postgres-primary
    command: >
      sh -c "
      echo '#!/bin/sh' > /scripts/backup.sh &&
      echo 'pg_dump -h postgres-primary -U $$POSTGRES_USER -d $$POSTGRES_DB > /backups/orchestra_$$(date +%Y%m%d_%H%M%S).sql' >> /scripts/backup.sh &&
      echo 'find /backups -name \"*.sql\" -mtime +$$BACKUP_RETENTION_DAYS -delete' >> /scripts/backup.sh &&
      chmod +x /scripts/backup.sh &&
      crond -f
      "

  redis-primary:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - orchestra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-sentinel:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    networks:
      - orchestra-network
    depends_on:
      - redis-primary
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf

networks:
  orchestra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

