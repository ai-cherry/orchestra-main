[tool.poetry]
name = "orchestra-main"
version = "0.1.0"
description = "AI Orchestrator and Modular Agent Framework for GCP"
authors = ["AI Cherry Team <security@ai-cherry.com>"]
packages = [{include = "orchestra_core", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
requests = "^2.32.0"
redis = "^5.0.4"
psycopg2-binary = "^2.9.9"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
pytest = "^8.4.0"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["orchestra_core"]
combine_as_imports = true
include_trailing_comma = true
multi_line_output = 3
force_grid_wrap = 0

[tool.ruff]
line-length = 120
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "legacy",
    "archive",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in init files
"tests/*" = ["ARG"]  # unused arguments in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
