# Dedicated cache stage
FROM python:3.11-slim as cache

# Set up cache directory
RUN mkdir -p /cache/poetry /cache/apt
ENV POETRY_CACHE_DIR=/cache/poetry

# Install Poetry
ENV POETRY_HOME=/opt/poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV POETRY_NO_INTERACTION=1
ENV PATH="$POETRY_HOME/bin:$PATH"

RUN curl -sSL https://install.python-poetry.org | python3 -

# Base image for all build stages
FROM python:3.11-slim as base

# Install common system dependencies with cache mount
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y \
    curl \
    gcc \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
ENV POETRY_HOME=/opt/poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT=true
ENV POETRY_NO_INTERACTION=1
ENV PATH="$POETRY_HOME/bin:$PATH"

RUN curl -sSL https://install.python-poetry.org | python3 -

# Set up working directory
WORKDIR /app

# Stage 1: LiteLLM dependencies
FROM base as litellm

# Copy only dependency definition files for caching
COPY pyproject.toml poetry.lock* ./

# Install just LiteLLM dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pypoetry/cache \
    --mount=type=cache,target=/root/.cache/pip \
    poetry install --only litellm --no-root

# Stage 2: Portkey dependencies (if needed)
FROM base as portkey

# Copy only dependency definition files for caching
COPY pyproject.toml poetry.lock* ./

# Install Portkey dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pypoetry/cache \
    --mount=type=cache,target=/root/.cache/pip \
    poetry install --only portkey --no-root

# Stage 3: OpenRouter dependencies (if needed)
FROM base as openrouter

# Copy only dependency definition files for caching
COPY pyproject.toml poetry.lock* ./

# Install OpenRouter dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pypoetry/cache \
    --mount=type=cache,target=/root/.cache/pip \
    poetry install --only openrouter --no-root

# Stage 4: Final runtime image
FROM python:3.11-slim

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy virtual environments from builder stages
COPY --from=litellm /app/.venv /app/litellm_venv
COPY --from=portkey /app/.venv /app/portkey_venv
COPY --from=openrouter /app/.venv /app/openrouter_venv

# Set up PATH to include all virtual environments
ENV PATH="/app/litellm_venv/bin:/app/portkey_venv/bin:/app/openrouter_venv/bin:$PATH"
ENV PYTHONPATH=/app

# Configure LiteLLM
ENV LITELLM_VERBOSE=False
ENV LITELLM_LOG="DEBUG"

# OpenRouter environment variables
ENV OR_SITE_URL="https://orchestra.example.com"
ENV OR_APP_NAME="OrchestraLLM"

# Copy application code
COPY core/orchestrator/src/services/llm /app/services/llm
COPY tools/llm_test_server /app/llm_test_server
COPY examples /app/examples

# Create monitoring directory
RUN mkdir -p /app/monitoring/metrics

# Set up litellm config
COPY config/litellm_config.yaml /app/config/litellm_config.yaml

# Expose the port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8001/health || exit 1

# Run the server
CMD ["python", "-m", "llm_test_server.main"]

# AI Orchestra LLM Test Dockerfile
# Uses multi-stage build for optimized LLM testing image

# Stage 1: Build dependencies
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    POETRY_VERSION=1.5.1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=0 \
    POETRY_HOME="/opt/poetry"

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

# Add Poetry to PATH
ENV PATH="$POETRY_HOME/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy pyproject.toml and poetry.lock
COPY pyproject.toml poetry.lock* ./

# Install dependencies
RUN poetry export -f requirements.txt --with litellm,portkey,openrouter > requirements-llm.txt && \
    pip install --no-cache-dir -r requirements-llm.txt

# Stage 2: Runtime image
FROM python:3.11-slim

# Set GCP project configuration
ENV PROJECT_ID=cherry-ai.me \
    PROJECT_NUMBER=525398941159 \
    REGION=us-central1 \
    GOOGLE_CLOUD_PROJECT=cherry-ai.me \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=production \
    PYTHONPATH=/app \
    USE_RECOVERY_MODE=false \
    STANDARD_MODE=true \
    VSCODE_DISABLE_WORKSPACE_TRUST=true \
    DISABLE_WORKSPACE_TRUST=true \
    PORT=8001

# Configure LiteLLM
ENV LITELLM_VERBOSE=False \
    LITELLM_LOG="DEBUG" \
    OR_SITE_URL="https://orchestra.example.com" \
    OR_APP_NAME="OrchestraLLM" \
    VERTEX_SA_EMAIL=vertex-agent@cherry-ai.me.iam.gserviceaccount.com

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY core/orchestrator/src/services/llm /app/services/llm
COPY tools/llm_test_server /app/tools/llm_test_server
COPY examples /app/examples
COPY config/litellm_config.yaml /app/config/litellm_config.yaml

# Add startup script to enforce standard mode
RUN echo '#!/bin/bash\n\
# Force standard mode with all required environment variables\n\
export USE_RECOVERY_MODE=false\n\
export STANDARD_MODE=true\n\
export VSCODE_DISABLE_WORKSPACE_TRUST=true\n\
export DISABLE_WORKSPACE_TRUST=true\n\
\n\
# Create standard mode marker file\n\
touch /app/.standard_mode\n\
\n\
# Start the application\n\
exec python -m tools.llm_test_server.main\n\
' > /app/startup.sh && chmod +x /app/startup.sh

# Create monitoring directory
RUN mkdir -p /app/monitoring/metrics

# Create non-root user
RUN groupadd -r orchestra && \
    useradd -r -g orchestra -d /app -s /bin/bash orchestra && \
    chown -R orchestra:orchestra /app

# Switch to non-root user
USER orchestra

# Expose port
EXPOSE ${PORT}

# Set health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Set entrypoint to use the startup script
ENTRYPOINT ["/app/startup.sh"]
