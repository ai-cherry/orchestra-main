Terraform will perform the following actions:

  # google_artifact_registry_repository.orchestra will be created
  + resource "google_artifact_registry_repository" "orchestra" {
      + create_time       = (known after apply)
      + description       = "Docker repository for Orchestra services"
      + format            = "DOCKER"
      + id                = (known after apply)
      + location          = "us-central1"
      + repository_id     = "orchestra"
      + uuid              = (known after apply)
    }

  # google_project_iam_member.vertex_agent_run_admin will be created
  + resource "google_project_iam_member" "vertex_agent_run_admin" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:vertex-agent@agi-baby-cherry.iam.gserviceaccount.com"
      + project = "agi-baby-cherry"
      + role    = "roles/run.admin"
    }

  # google_project_iam_member.vertex_agent_user will be created
  + resource "google_project_iam_member" "vertex_agent_user" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = "serviceAccount:vertex-agent@agi-baby-cherry.iam.gserviceaccount.com"
      + project = "agi-baby-cherry"
      + role    = "roles/aiplatform.user"
    }

  # google_project_service.gcp_services["aiplatform.googleapis.com"] will be created
  + resource "google_project_service" "gcp_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "agi-baby-cherry"
      + service                    = "aiplatform.googleapis.com"
    }
    # ... [additional API services would be listed here] ...

  # google_storage_bucket.terraform_state will be created
  + resource "google_storage_bucket" "terraform_state" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "us-central1"
      + name                        = "agi-baby-cherry-terraform-state"
      + project                     = (known after apply)
      + public_access_prevention    = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = (known after apply)
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }
          + condition {
              + age                   = 30
              + matches_prefix        = []
              + matches_storage_class = []
              + matches_suffix        = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }
    }

  # module.firestore.google_firestore_database.database will be created
  + resource "google_firestore_database" "database" {
      + app_engine_integration_mode = (known after apply)
      + concurrency_mode            = (known after apply)
      + id                          = (known after apply)
      + location_id                 = "us-central1"
      + name                        = "firestore-dev"
      + project                     = "agi-baby-cherry"
      + type                        = "FIRESTORE_NATIVE"
    }

  # module.networking.google_vpc_access_connector.connector will be created
  + resource "google_vpc_access_connector" "connector" {
      + id             = (known after apply)
      + max_throughput = 300
      + min_throughput = 200
      + name           = "vpc-connector-dev"
      + network        = (known after apply)
      + project        = "agi-baby-cherry"
      + region         = "us-central1"
      + state          = (known after apply)
    }

  # module.orchestrator_run.google_cloud_run_service.service will be created
  + resource "google_cloud_run_service" "service" {
      + autogenerate_revision_name = true
      + id                         = (known after apply)
      + location                   = "us-central1"
      + name                       = "orchestrator-api-dev"
      + project                    = "agi-baby-cherry"
      + status                     = (known after apply)

      + template {
          + metadata {
              + annotations = {
                  + "autoscaling.knative.dev/maxScale"        = "5"
                  + "autoscaling.knative.dev/minScale"        = "0"
                  + "run.googleapis.com/cpu-throttling"       = "false"
                  + "run.googleapis.com/vpc-access-connector" = (known after apply)
                }
            }

          + spec {
              + container_concurrency = 80
              + service_account_name  = (known after apply)
              + timeout_seconds       = 300

              + containers {
                  + image = "us-west2-docker.pkg.dev/agi-baby-cherry/orchestra/orchestrator:latest"

                  + env {
                      + name  = "REDIS_HOST"
                      + value = (known after apply)
                    }
                  + env {
                      + name  = "FIRESTORE_NAMESPACE"
                      + value = "orchestra-dev"
                    }
                  + env {
                      + name  = "VECTOR_INDEX_NAME"
                      + value = "orchestra-embeddings-dev"
                    }
                  # ... [additional environment variables would be here] ...

                  + resources {
                      + limits = {
                          + "cpu"    = "1000m"
                          + "memory" = "2Gi"
                        }
                    }
                }
            }
        }
    }

  # module.pubsub.google_pubsub_topic.events will be created
  + resource "google_pubsub_topic" "events" {
      + id         = (known after apply)
      + kms_key_name = null
      + labels     = {
          + "env" = "dev"
        }
      + name       = "orchestra-events-dev"
      + project    = "agi-baby-cherry"
    }

  # module.redis.google_redis_instance.cache will be created
  + resource "google_redis_instance" "cache" {
      + auth_enabled               = true
      + connect_mode               = "DIRECT_PEERING"
      + display_name               = "Orchestra Cache - Dev"
      + host                       = (known after apply)
      + id                         = (known after apply)
      + memory_size_gb             = 1
      + name                       = "orchestra-redis-dev"
      + persistence_config         = (known after apply)
      + persistence_iam_identity   = (known after apply)
      + port                       = (known after apply)
      + project                    = "agi-baby-cherry"
      + read_endpoint              = (known after apply)
      + read_endpoint_port         = (known after apply)
      + read_replicas_mode         = (known after apply)
      + redis_version              = "REDIS_6_X"
      + region                     = "us-central1"
      + server_ca_certs            = (known after apply)
      + tier                       = "BASIC"
      + transit_encryption_mode    = "DISABLED"
    }

  # module.vertex.google_vertex_ai_index.embedding_index will be created
  + resource "google_vertex_ai_index" "embedding_index" {
      + deployed_indexes      = (known after apply)
      + display_name          = "orchestra-embeddings-dev"
      + id                    = (known after apply)
      + index_update_method   = (known after apply)
      + metadata              = (known after apply)
      + name                  = (known after apply)
      + project               = "agi-baby-cherry"
      + region                = "us-central1"

      + index_stats {
          + shards_count               = (known after apply)
          + vectors_count              = (known after apply)
        }

      + metadata_schema {
          + schema_version = (known after apply)
        }
    }

  # ... [additional module resources would be listed here] ...

Plan: 32 to add, 0 to change, 0 to destroy.
