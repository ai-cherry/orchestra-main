config:
  gcp:project: cherry-ai-project # Your Google Cloud project ID
  gcp:region: us-central1 # Your preferred GCP region (e.g., us-central1)
  # Required: Full path to your Cloud Run Docker image
  # Example: us-central1-docker.pkg.dev/cherry-ai-project/ai-orchestra/my-app-image:latest
  cloudRunImage: us-central1-docker.pkg.dev/cherry-ai-project/ai-orchestra/ai-orchestra:latest # Assuming image name is also ai-orchestra

  # Required: GitHub repository details for Cloud Build Trigger
  githubRepoOwner: scoobyjava # Your GitHub username or organization
  githubRepoName: orchestra-main # Your GitHub repository name


  # Optional: Service account email for Cloud Run to access secrets
  # If you have a specific service account for your Cloud Run service, provide its email here.
  # Example: my-cloud-run-sa@YOUR_GCP_PROJECT_ID.iam.gserviceaccount.com
  # cloudRunServiceAccountEmail:

  # Optional: Secret ID in Secret Manager that Cloud Run needs to access
  # If cloudRunServiceAccountEmail is set, and this secretIdToAccess is set,
  # the program will grant the service account access to this secret.
  # Example: my-database-password
  # secretIdToAccess:
# Notes for secrets that might be directly injected into Pulumi config (not from env vars for this example):
# To manage secrets with Pulumi's secret management, you would use:
# pulumi config set --secret myApiKey YOUR_API_KEY_VALUE
# And then in __main__.py: my_api_key = config.require_secret("myApiKey")
# However, the request was to read secrets from Secret Manager via environment variables for the *application*,
# not necessarily for Pulumi configuration itself during deployment, though Pulumi can also use env vars.

# For the application running in Cloud Run to access secrets from Secret Manager:
# 1. Ensure the Cloud Run service's runtime service account has `roles/secretmanager.secretAccessor` on the specific secrets.
#    (The __main__.py attempts to set this up if cloudRunServiceAccountEmail and secretIdToAccess are provided).
# 2. In your Cloud Run container definition (in __main__.py), you would map these secrets to environment variables.
#    Example env var for the container:
#    {
#        name: "DATABASE_PASSWORD",
#        value_source: {
#            secret_key_ref: {
#                secret: "my-db-password-secret-name-in-secret-manager",
#                version: "latest"
#            }
#        }
#    }
# This Pulumi.dev.yaml primarily handles configuration for the Pulumi program itself.
# Secrets needed by the *application* should be provisioned into Secret Manager and accessed by Cloud Run as shown above.
