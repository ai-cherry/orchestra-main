# GitHub Codespaces Integration for Cloud Build
# This file defines a Cloud Build pipeline that:
# 1. Automatically sets up a Codespace for review
# 2. Uses GitHub Actions feedback
# 3. Integrates with Terraform changes

timeout: 3600s
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: "N1_HIGHCPU_8"
  env:
    - "TERRAFORM_VERSION=1.5.0"
    - "GITHUB_OWNER=ai-cherry"
    - "CODESPACE_MACHINE=standardLinux32gb"

substitutions:
  _GITHUB_TOKEN: "" # Provided by GitHub Actions or from Secret Manager
  _ENVIRONMENT: "dev"
  _REPOSITORY: "orchestra-main"

steps:
  # Fetch GitHub credentials from Secret Manager
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "fetch-github-token"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [ -z "$_GITHUB_TOKEN" ]; then
          echo "Fetching GitHub token from Secret Manager"
          TOKEN=$(gcloud secrets versions access latest --secret="github-pat-token")
          echo "::set-output name=token::$${TOKEN}"
        else
          echo "Using provided GitHub token"
          echo "::set-output name=token::$${_GITHUB_TOKEN}"
        fi

  # Install Terraform
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "setup-terraform"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        apt-get update && apt-get install -y unzip curl
        curl -fSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
        unzip terraform.zip
        mv terraform /usr/local/bin/
        terraform --version

  # Run Terraform validation
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "terraform-validate"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd terraform
        terraform init -backend=false
        terraform validate

  # Plan Terraform changes
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "terraform-plan"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Use master service key for GCP authentication if available
        if [ -n "$GCP_MASTER_SERVICE_JSON" ]; then
          echo "Using GCP_MASTER_SERVICE_JSON for authentication"
          echo "$GCP_MASTER_SERVICE_JSON" > /workspace/gcp-key.json
          gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
        elif [ -n "$GCP_PROJECT_ADMIN_KEY" ]; then
          echo "Using GCP_PROJECT_ADMIN_KEY for authentication"
          echo "$GCP_PROJECT_ADMIN_KEY" > /workspace/gcp-key.json
          gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
        elif [ -n "$GCP_SECRET_MANAGEMENT_KEY" ]; then
          echo "Using GCP_SECRET_MANAGEMENT_KEY for authentication"
          echo "$GCP_SECRET_MANAGEMENT_KEY" > /workspace/gcp-key.json
          gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
        else
          echo "No GCP credentials found, using default service account"
        fi

        # Set project ID
        gcloud config set project cherry-ai.me

        cd terraform
        terraform init
        terraform workspace select ${_ENVIRONMENT} || terraform workspace new ${_ENVIRONMENT}
        terraform plan -out=tfplan -var="env=${_ENVIRONMENT}" -no-color > /workspace/terraform-plan.txt
        echo "Terraform plan created"
        cat /workspace/terraform-plan.txt

        # Clean up credentials after use
        if [ -f "/workspace/gcp-key.json" ]; then
          rm /workspace/gcp-key.json
        fi

  # Create Pull Request comment with Terraform plan
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "github-pr-comment"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [ "$BRANCH_NAME" != "main" ] && [ -n "$_PR_NUMBER" ]; then
          apt-get update && apt-get install -y curl jq

          # Get PR number from branch if not provided
          if [ -z "$_PR_NUMBER" ]; then
            PR_URL=$(git config --get remote.origin.url)
            PR_OWNER=$(echo $PR_URL | sed -e 's/.*github.com[\/:]\(.*\)\/\(.*\).git/\1/')
            PR_REPO=$(echo $PR_URL | sed -e 's/.*github.com[\/:]\(.*\)\/\(.*\).git/\2/')

            PR_DATA=$(curl -s -H "Authorization: token $(cat /workspace/github-token.txt)" \
              "https://api.github.com/repos/$PR_OWNER/$PR_REPO/pulls?head=$PR_OWNER:$BRANCH_NAME&state=open")

            _PR_NUMBER=$(echo $PR_DATA | jq -r '.[0].number')
          fi

          if [ -n "$_PR_NUMBER" ]; then
            # Post comment to PR
            COMMENT="#### Terraform Plan for \`$BRANCH_NAME\`
            \`\`\`terraform
            $(cat /workspace/terraform-plan.txt)
            \`\`\`

            [View in Codespace](https://github.com/codespaces)"

            curl -s -X POST \
              -H "Authorization: token $(cat /workspace/github-token.txt)" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": $(echo "$COMMENT" | jq -R -s .)}" \
              "https://api.github.com/repos/$GITHUB_OWNER/$_REPOSITORY/issues/$_PR_NUMBER/comments"

            echo "Posted Terraform plan to PR #$_PR_NUMBER"
          else
            echo "No open PR found for branch $BRANCH_NAME"
          fi
        else
          echo "Skipping PR comment for main branch or missing PR number"
        fi

  # Create Codespace for review (only for PRs with changes)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "create-review-codespace"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [ "$BRANCH_NAME" != "main" ] && [ -n "$_PR_NUMBER" ] && grep -q "Plan:" /workspace/terraform-plan.txt; then
          apt-get update && apt-get install -y curl jq python3 python3-pip
          pip3 install requests

          cat > /workspace/create_codespace.py << EOF
          import os
          import requests
          import json

          def create_codespace():
              token = os.environ.get('GITHUB_TOKEN')
              if not token:
                  with open('/workspace/github-token.txt', 'r') as f:
                      token = f.read().strip()

              owner = os.environ.get('GITHUB_OWNER', 'ai-cherry')
              repo = os.environ.get('_REPOSITORY', 'orchestra-main')
              branch = os.environ.get('BRANCH_NAME', 'main')

              url = "https://api.github.com/user/codespaces"

              headers = {
                  "Accept": "application/vnd.github+json",
                  "Authorization": f"token {token}",
                  "X-GitHub-Api-Version": "2022-11-28"
              }

              data = {
                  "repository_id": f"{owner}/{repo}",
                  "ref": branch,
                  "machine": os.environ.get('CODESPACE_MACHINE', 'standardLinux32gb'),
                  "display_name": f"Review PR #{os.environ.get('_PR_NUMBER', 'unknown')}",
                  "environment_variables": [
                      {"name": "TERRAFORM_PLAN_PATH", "value": "/workspace/terraform-plan.txt"},
                      {"name": "PR_NUMBER", "value": os.environ.get('_PR_NUMBER', 'unknown')}
                  ]
              }

              response = requests.post(url, headers=headers, json=data)

              if response.status_code == 201:
                  codespace = response.json()
                  print(f"Created codespace: {codespace['name']}")
                  print(f"URL: {codespace['web_url']}")

                  # Update PR with codespace link
                  if '_PR_NUMBER' in os.environ:
                      comment_url = f"https://api.github.com/repos/{owner}/{repo}/issues/{os.environ['_PR_NUMBER']}/comments"
                      comment_data = {
                          "body": f"**Review environment created**\n\nA Codespace has been created for reviewing this PR's Terraform changes: [Open Codespace]({codespace['web_url']})"
                      }
                      comment_response = requests.post(comment_url, headers=headers, json=comment_data)
                      if comment_response.status_code == 201:
                          print("Posted codespace link to PR")
                      else:
                          print(f"Failed to post comment: {comment_response.status_code} - {comment_response.text}")

                  return codespace
              else:
                  print(f"Failed to create codespace: {response.status_code}")
                  print(response.text)
                  return None

          if __name__ == "__main__":
              create_codespace()
          EOF

          # Run the Python script to create the codespace
          export GITHUB_TOKEN=$(cat /workspace/github-token.txt)
          export GITHUB_OWNER=${GITHUB_OWNER}
          export _REPOSITORY=${_REPOSITORY}
          export BRANCH_NAME=${BRANCH_NAME}
          export _PR_NUMBER=${_PR_NUMBER}
          export CODESPACE_MACHINE=${CODESPACE_MACHINE}

          python3 /workspace/create_codespace.py
        else
          echo "Skipping codespace creation for main branch or no changes"
        fi

  # Apply Terraform changes (only for main branch)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    id: "terraform-apply"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          # Use master service key for GCP authentication if available
          if [ -n "$GCP_MASTER_SERVICE_JSON" ]; then
            echo "Using GCP_MASTER_SERVICE_JSON for authentication"
            echo "$GCP_MASTER_SERVICE_JSON" > /workspace/gcp-key.json
            gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
          elif [ -n "$GCP_PROJECT_ADMIN_KEY" ]; then
            echo "Using GCP_PROJECT_ADMIN_KEY for authentication"
            echo "$GCP_PROJECT_ADMIN_KEY" > /workspace/gcp-key.json
            gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
          elif [ -n "$GCP_SECRET_MANAGEMENT_KEY" ]; then
            echo "Using GCP_SECRET_MANAGEMENT_KEY for authentication"
            echo "$GCP_SECRET_MANAGEMENT_KEY" > /workspace/gcp-key.json
            gcloud auth activate-service-account --key-file=/workspace/gcp-key.json
          else
            echo "No GCP credentials found, using default service account"
          fi

          # Set project ID
          gcloud config set project cherry-ai.me

          cd terraform
          terraform workspace select ${_ENVIRONMENT} || terraform workspace new ${_ENVIRONMENT}
          terraform apply -auto-approve -var="env=${_ENVIRONMENT}"
          echo "Terraform changes applied"

          # Clean up credentials after use
          if [ -f "/workspace/gcp-key.json" ]; then
            rm /workspace/gcp-key.json
          fi
        else
          echo "Skipping apply for non-main branch"
        fi

artifacts:
  objects:
    location: "gs://${PROJECT_ID}-cloudbuild-artifacts/${_ENVIRONMENT}/${BUILD_ID}/"
    paths:
      - "/workspace/terraform-plan.txt"

# Storage for GitHub token and GCP credentials
secretEnv:
  - "GITHUB_TOKEN"
  - "GCP_MASTER_SERVICE_JSON"
  - "GCP_PROJECT_ADMIN_KEY"
  - "GCP_SECRET_MANAGEMENT_KEY"

availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/github-pat-token/versions/latest
      env: "GITHUB_TOKEN"
    - versionName: projects/${PROJECT_ID}/secrets/gcp-master-service-key/versions/latest
      env: "GCP_MASTER_SERVICE_JSON"
    - versionName: projects/${PROJECT_ID}/secrets/gcp-project-admin-key/versions/latest
      env: "GCP_PROJECT_ADMIN_KEY"
    - versionName: projects/${PROJECT_ID}/secrets/gcp-secret-management-key/versions/latest
      env: "GCP_SECRET_MANAGEMENT_KEY"
