#!/bin/bash
# AI Orchestra - Terraform Backend Setup Script
# This script sets up the GCS backend for Terraform state and initializes the infrastructure

set -e  # Exit on any error

# Text styling
BOLD="\033[1m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
NC="\033[0m"  # No Color

# Print section header
section() {
    echo ""
    echo -e "${BOLD}${BLUE}==== $1 ====${NC}"
    echo ""
}

# Print success message
success() {
    echo -e "${GREEN}✓ $1${NC}"
}

# Print warning message
warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

# Print error message
error() {
    echo -e "${RED}❌ $1${NC}"
}

# Ask for confirmation
confirm() {
    read -p "$1 (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 1
    fi
    return 0
}

# Variables
PROJECT_ID=${PROJECT_ID:-"cherry-ai-project"}
REGION=${REGION:-"us-west4"}
BUCKET_NAME="${PROJECT_ID}-terraform-state"
TERRAFORM_DIR="terraform"

section "AI Orchestra Terraform Backend Setup"
echo "This script will set up the GCS backend for Terraform state and initialize the infrastructure."
echo ""
echo "Project ID: $PROJECT_ID"
echo "Region: $REGION"
echo "Bucket Name: $BUCKET_NAME"
echo "Terraform Directory: $TERRAFORM_DIR"
echo ""

if ! confirm "Do you want to proceed with the setup?"; then
    exit 0
fi

# Check for gcloud CLI
if ! command -v gcloud &> /dev/null; then
    error "gcloud CLI not found. Please install it first."
    exit 1
fi

# Check if logged in
ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null || echo "")
if [[ -z "$ACCOUNT" ]]; then
    error "You are not logged in to gcloud. Please run 'gcloud auth login' first."
    exit 1
fi

echo "Currently authenticated as: $ACCOUNT"

# Set the project
section "Setting GCP Project"
echo "Setting project to $PROJECT_ID..."
gcloud config set project $PROJECT_ID
success "Project set to $PROJECT_ID"

# Enable required APIs
section "Enabling Required APIs"
echo "Enabling essential GCP APIs..."
gcloud services enable cloudresourcemanager.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable iam.googleapis.com
success "Required APIs enabled"

# Create Terraform state bucket
section "Creating Terraform State Bucket"
echo "Creating bucket $BUCKET_NAME in $REGION..."

# Check if bucket already exists
BUCKET_EXISTS=$(gcloud storage ls --project=$PROJECT_ID gs://$BUCKET_NAME 2>/dev/null || echo "")

if [[ -n "$BUCKET_EXISTS" ]]; then
    warning "Bucket $BUCKET_NAME already exists. Skipping creation."
    
    # Check if versioning is enabled
    VERSIONING=$(gcloud storage buckets describe gs://$BUCKET_NAME --format="value(versioning.enabled)")
    if [[ "$VERSIONING" != "True" ]]; then
        echo "Enabling versioning on existing bucket..."
        gcloud storage buckets update gs://$BUCKET_NAME --versioning
        success "Versioning enabled on existing bucket"
    else
        success "Versioning already enabled on bucket"
    fi
else
    # Create the bucket
    gcloud storage buckets create gs://$BUCKET_NAME \
        --project=$PROJECT_ID \
        --location=$REGION \
        --uniform-bucket-level-access
    
    # Enable versioning
    echo "Enabling versioning on bucket..."
    gcloud storage buckets update gs://$BUCKET_NAME --versioning
    
    success "Terraform state bucket created and configured"
fi

# Check if Terraform directory exists
if [ ! -d "$TERRAFORM_DIR" ]; then
    error "Terraform directory '$TERRAFORM_DIR' not found."
    exit 1
fi

# Create backend.tf file if it doesn't exist
section "Creating Terraform Backend Configuration"
BACKEND_FILE="$TERRAFORM_DIR/backend.tf"

if [ -f "$BACKEND_FILE" ]; then
    warning "Backend configuration already exists at $BACKEND_FILE"
    echo "Backing up existing file to ${BACKEND_FILE}.bak"
    cp "$BACKEND_FILE" "${BACKEND_FILE}.bak"
fi

echo "Creating backend configuration at $BACKEND_FILE..."
cat > "$BACKEND_FILE" << EOF
# Terraform backend configuration
# Generated by setup_terraform_backend.sh

terraform {
  backend "gcs" {
    bucket = "$BUCKET_NAME"
    prefix = "terraform/state"
  }
}
EOF

success "Backend configuration created at $BACKEND_FILE"

# Check if variables.tf exists and update project_id if needed
VARIABLES_FILE="$TERRAFORM_DIR/variables.tf"
if [ -f "$VARIABLES_FILE" ]; then
    section "Updating Terraform Variables"
    echo "Checking if project_id variable exists in $VARIABLES_FILE..."
    
    if grep -q "variable \"project_id\"" "$VARIABLES_FILE"; then
        echo "Updating project_id default value..."
        sed -i "s/default\s*=\s*\"[^\"]*\"/default = \"$PROJECT_ID\"/" "$VARIABLES_FILE"
        success "Updated project_id default value to $PROJECT_ID"
    else
        echo "Adding project_id variable to $VARIABLES_FILE..."
        cat >> "$VARIABLES_FILE" << EOF

variable "project_id" {
  description = "The GCP project ID"
  type        = string
  default     = "$PROJECT_ID"
}
EOF
        success "Added project_id variable to $VARIABLES_FILE"
    fi
    
    if grep -q "variable \"region\"" "$VARIABLES_FILE"; then
        echo "Updating region default value..."
        sed -i "s/default\s*=\s*\"[^\"]*\"/default = \"$REGION\"/" "$VARIABLES_FILE"
        success "Updated region default value to $REGION"
    else
        echo "Adding region variable to $VARIABLES_FILE..."
        cat >> "$VARIABLES_FILE" << EOF

variable "region" {
  description = "The GCP region for resources"
  type        = string
  default     = "$REGION"
}
EOF
        success "Added region variable to $VARIABLES_FILE"
    fi
else
    warning "Variables file '$VARIABLES_FILE' not found. Skipping variable updates."
fi

# Initialize Terraform
section "Initializing Terraform"
echo "Running terraform init..."
cd "$TERRAFORM_DIR"
terraform init
success "Terraform initialized successfully"

# Validate Terraform configuration
section "Validating Terraform Configuration"
echo "Running terraform validate..."
terraform validate
success "Terraform configuration is valid"

section "Setup Complete!"
echo "Terraform backend is now configured and initialized."
echo ""
echo "Next steps:"
echo "1. Review the Terraform configuration in the '$TERRAFORM_DIR' directory"
echo "2. Run 'terraform plan' to see what changes will be made"
echo "3. Run 'terraform apply' to create the infrastructure"
echo ""
echo "Happy terraforming!"