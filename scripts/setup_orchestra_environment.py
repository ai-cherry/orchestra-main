# TODO: Consider adding connection pooling configuration
#!/usr/bin/env python3
"""
"""
    """Setup Cherry AI environment."""
        self.env_file = self.root_dir / ".env"
        self.env_example = self.root_dir / "env.example"
        self.errors: List[str] = []
        self.warnings: List[str] = []

    def run(self):
        """Run the complete setup process."""
        print("üéº Cherry AI - Complete Environment Setup")
        print("=" * 50)

        # Step 1: Environment setup
        self.setup_environment()

        # Step 2: Install dependencies
        self.install_dependencies()

        # Step 3: Update configurations
        self.update_configurations()

        # Step 4: Setup AI context
        self.setup_ai_context()

        # Step 5: Validate setup
        self.validate_setup()

        # Summary
        self.print_summary()

    def setup_environment(self):
        """Setup environment variables."""
        print("\nüìã Setting up environment variables...")

        # Check if .env exists
        if not self.env_file.exists():
            print("  Creating .env from env.example...")
            shutil.copy(self.env_example, self.env_file)

        # Read current .env
        env_vars = {}
        if self.env_file.exists():
            with open(self.env_file, "r") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        env_vars[key] = value

        # Required variables
        required_vars = {
            "ENVIRONMENT": "development",
            "WEAVIATE_URL": "",
            "WEAVIATE_API_KEY": "",
            "REDIS_HOST": "localhost",
            "REDIS_PORT": "6379",
            "OPENROUTER_API_KEY": "",
            "OPENAI_API_KEY": "",
            "ANTHROPIC_API_KEY": "",
            "PORTKEY_API_KEY": "",
            "SITE_URL": "http://localhost:8000",
            "SITE_TITLE": "Cherry AI Development",
        }

        # Check and prompt for missing values
        updated = False
        for key, default in required_vars.items():
            if key not in env_vars or not env_vars[key]:
                if default:
                    env_vars[key] = default
                    print(f"  ‚úì Set {key} to default: {default}")
                    updated = True
                else:
                    # Check if it's already in environment
                    env_value = os.getenv(key)
                    if env_value:
                        env_vars[key] = env_value
                        print(f"  ‚úì Using {key} from environment")
                        updated = True
                    else:
                        self.warnings.append(f"{key} not configured")
                        print(f"  ‚ö†Ô∏è  {key} needs to be configured")

        # Write updated .env if needed
        if updated:
            with open(self.env_file, "w") as f:
                f.write("# Cherry AI Environment Configuration\n")
                f.write("# Generated by setup script\n\n")
                for key, value in sorted(env_vars.items()):
                    f.write(f"{key}={value}\n")
            print("  ‚úì Updated .env file")

    def install_dependencies(self):
        """Install Python dependencies."""
        print("\nüì¶ Installing dependencies...")

        req_file = self.root_dir / "requirements" / "base.txt"
        with open(req_file, "r") as f:
            requirements = f.read()

            with open(req_file, "a") as f:

        # Install requirements
        print("  Installing Python packages...")
        try:

            pass
            subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pip",
                    "install",
                    "-r",
                    str(req_file),
                    "--quiet",
                ],
                check=True,
            )
            print("  ‚úì Dependencies installed")
        except Exception:

            pass
            self.errors.append(f"Failed to install dependencies: {e}")
            print("  ‚úó Failed to install dependencies")

    def update_configurations(self):
        """Update configuration files."""
        print("\nüîß Updating configurations...")

        # Replace old MCP config with clean one
        old_mcp = self.root_dir / ".mcp.json"
        new_mcp = self.root_dir / ".mcp-clean.json"

        if new_mcp.exists():
            shutil.copy(new_mcp, old_mcp)
            print("  ‚úì Updated MCP configuration")

        # Update docker-compose to ensure no GCP refs
        docker_compose = self.root_dir / "docker-compose.yml"
        if docker_compose.exists():
            with open(docker_compose, "r") as f:
                content = f.read()

            if "LAMBDA_CREDENTIALS_PATH" not in content:
                print("  ‚úì docker-compose.yml is clean")
            else:
                self.warnings.append("docker-compose.yml may still have GCP references")

    def setup_ai_context(self):
        """Setup AI context files."""
        print("\nü§ñ Setting up AI context...")

        # Update .ai-context-index.md
        context_index = self.root_dir / ".ai-context-index.md"
        new_content = """
"""
        with open(context_index, "w") as f:
            f.write(new_content)
        print("  ‚úì Updated AI context index")

        # Create a new context file for the current architecture
        arch_context = self.root_dir / "ARCHITECTURE_CONTEXT.md"
        arch_content = """
"""
        with open(arch_context, "w") as f:
            f.write(arch_content)
        print("  ‚úì Created architecture context")

    def validate_setup(self):
        """Validate the setup is correct."""
        print("\n‚úÖ Validating setup...")

        # Check Python version
        python_version = sys.version_info
        if python_version.major == 3 and python_version.minor >= 10:
            print(f"  ‚úì Python {python_version.major}.{python_version.minor} is compatible")
        else:
            self.warnings.append(f"Python 3.10+ recommended, found {python_version.major}.{python_version.minor}")

        # Check key files exist
        key_files = [
            "core/conductor/src/config/settings.py",
            "docker-compose.yml",
            ".env",
        ]

        for file in key_files:
            if (self.root_dir / file).exists():
                print(f"  ‚úì {file} exists")
            else:
                self.errors.append(f"{file} not found")

        # Check for GCP remnants
        print("\n  Checking for GCP remnants...")
        gcp_check = subprocess.run(
            [
                "grep",
                "-r",
                "google-cloud",
                "--include=*.txt",
                str(self.root_dir / "requirements"),
            ],
            capture_output=True,
            text=True,
        )

        if gcp_check.returncode == 0 and gcp_check.stdout:
            self.warnings.append("Found Google Cloud references in requirements")
        else:
            print("  ‚úì No GCP dependencies in requirements")

    def print_summary(self):
        """Print setup summary."""
        print("\n" + "=" * 60)
        print("üìä SETUP SUMMARY")
        print("=" * 60)

        if not self.errors and not self.warnings:
            print("\n‚úÖ Setup completed successfully!")
            print("\nüöÄ Next steps:")
            print("1. Configure missing environment variables in .env")
            print("")
            print("3. Start locally: docker-compose up")
            print("4. Deploy: cd infra/digitalocean_deployment && pulumi up")
        else:
            if self.errors:
                print("\n‚ùå Errors:")
                for error in self.errors:
                    print(f"  - {error}")

            if self.warnings:
                print("\n‚ö†Ô∏è  Warnings:")
                for warning in self.warnings:
                    print(f"  - {warning}")

            print("\nüìã Please fix the issues above before proceeding.")

if __name__ == "__main__":
    setup = cherry_aiSetup()
    setup.run()
