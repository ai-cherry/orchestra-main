#!/usr/bin/env python3
"""
Complete setup script for Orchestra AI environment.
Sets up all configurations, dependencies, and validates the setup.
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import shutil


class OrchestraSetup:
    """Setup Orchestra AI environment."""

    def __init__(self):
        self.root_dir = Path(__file__).parent.parent
        self.env_file = self.root_dir / ".env"
        self.env_example = self.root_dir / "env.example"
        self.errors: List[str] = []
        self.warnings: List[str] = []

    def run(self):
        """Run the complete setup process."""
        print("🎼 Orchestra AI - Complete Environment Setup")
        print("=" * 50)

        # Step 1: Environment setup
        self.setup_environment()

        # Step 2: Install dependencies
        self.install_dependencies()

        # Step 3: Update configurations
        self.update_configurations()

        # Step 4: Setup AI context
        self.setup_ai_context()

        # Step 5: Validate setup
        self.validate_setup()

        # Summary
        self.print_summary()

    def setup_environment(self):
        """Setup environment variables."""
        print("\n📋 Setting up environment variables...")

        # Check if .env exists
        if not self.env_file.exists():
            print("  Creating .env from env.example...")
            shutil.copy(self.env_example, self.env_file)

        # Read current .env
        env_vars = {}
        if self.env_file.exists():
            with open(self.env_file, "r") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        env_vars[key] = value

        # Required variables
        required_vars = {
            "ENVIRONMENT": "development",
            "MONGODB_URI": "",
            "DRAGONFLY_URI": "",
            "WEAVIATE_URL": "",
            "WEAVIATE_API_KEY": "",
            "REDIS_HOST": "localhost",
            "REDIS_PORT": "6379",
            "OPENROUTER_API_KEY": "",
            "OPENAI_API_KEY": "",
            "ANTHROPIC_API_KEY": "",
            "PORTKEY_API_KEY": "",
            "SITE_URL": "http://localhost:8000",
            "SITE_TITLE": "Orchestra AI Development",
        }

        # Check and prompt for missing values
        updated = False
        for key, default in required_vars.items():
            if key not in env_vars or not env_vars[key]:
                if default:
                    env_vars[key] = default
                    print(f"  ✓ Set {key} to default: {default}")
                    updated = True
                else:
                    # Check if it's already in environment
                    env_value = os.getenv(key)
                    if env_value:
                        env_vars[key] = env_value
                        print(f"  ✓ Using {key} from environment")
                        updated = True
                    else:
                        self.warnings.append(f"{key} not configured")
                        print(f"  ⚠️  {key} needs to be configured")

        # Write updated .env if needed
        if updated:
            with open(self.env_file, "w") as f:
                f.write("# Orchestra AI Environment Configuration\n")
                f.write("# Generated by setup script\n\n")
                for key, value in sorted(env_vars.items()):
                    f.write(f"{key}={value}\n")
            print("  ✓ Updated .env file")

    def install_dependencies(self):
        """Install Python dependencies."""
        print("\n📦 Installing dependencies...")

        # Check if pymongo is in requirements
        req_file = self.root_dir / "requirements" / "base.txt"
        with open(req_file, "r") as f:
            requirements = f.read()

        if "pymongo" not in requirements:
            print("  Adding pymongo to requirements...")
            with open(req_file, "a") as f:
                f.write("\n# MongoDB driver\npymongo==4.6.1\n")

        # Install requirements
        print("  Installing Python packages...")
        try:
            subprocess.run(
                [
                    sys.executable,
                    "-m",
                    "pip",
                    "install",
                    "-r",
                    str(req_file),
                    "--quiet",
                ],
                check=True,
            )
            print("  ✓ Dependencies installed")
        except subprocess.CalledProcessError as e:
            self.errors.append(f"Failed to install dependencies: {e}")
            print(f"  ✗ Failed to install dependencies")

    def update_configurations(self):
        """Update configuration files."""
        print("\n🔧 Updating configurations...")

        # Replace old MCP config with clean one
        old_mcp = self.root_dir / ".mcp.json"
        new_mcp = self.root_dir / ".mcp-clean.json"

        if new_mcp.exists():
            shutil.copy(new_mcp, old_mcp)
            print("  ✓ Updated MCP configuration")

        # Update docker-compose to ensure no GCP refs
        docker_compose = self.root_dir / "docker-compose.yml"
        if docker_compose.exists():
            with open(docker_compose, "r") as f:
                content = f.read()

            if "GOOGLE_APPLICATION_CREDENTIALS" not in content:
                print("  ✓ docker-compose.yml is clean")
            else:
                self.warnings.append("docker-compose.yml may still have GCP references")

    def setup_ai_context(self):
        """Setup AI context files."""
        print("\n🤖 Setting up AI context...")

        # Update .ai-context-index.md
        context_index = self.root_dir / ".ai-context-index.md"
        new_content = """# AI Context Index - Orchestra AI (GCP-Free)

This index provides context for AI coding assistants working with the Orchestra AI codebase.

## Architecture Overview

Orchestra AI is now a **GCP-free** system using:
- **MongoDB Atlas** for persistent memory storage
- **DragonflyDB** (Aiven) for high-performance caching
- **Weaviate Cloud** for vector search
- **DigitalOcean** for deployment (optional)

## Key Components

### Memory System
- `core/orchestrator/src/agents/memory/mongodb_manager.py` - MongoDB memory manager
- `core/orchestrator/src/agents/memory/manager.py` - Memory management interface

### Configuration
- `core/orchestrator/src/config/settings.py` - Main settings (GCP-free)
- `.env` - Environment variables
- `.mcp.json` - MCP server configuration

### External Services
- **MongoDB Atlas**: Document storage for agent memories
- **DragonflyDB**: Redis-compatible in-memory cache
- **Weaviate**: Vector database for semantic search

## Development Workflow

1. **Local Development**: Use `docker-compose up` with local Redis/PostgreSQL
2. **External Services**: Configure via environment variables
3. **Testing**: Run `python scripts/test_new_setup.py`
4. **Deployment**: Use Pulumi with DigitalOcean provider

## Important Notes

- No GCP dependencies remain in the codebase
- All Google Cloud imports have been removed
- Firestore replaced with MongoDB
- Secret Manager replaced with environment variables
"""

        with open(context_index, "w") as f:
            f.write(new_content)
        print("  ✓ Updated AI context index")

        # Create a new context file for the current architecture
        arch_context = self.root_dir / "ARCHITECTURE_CONTEXT.md"
        arch_content = """# Orchestra AI Architecture (Post-GCP)

## System Architecture

### Core Services
1. **Orchestrator** (`core/orchestrator/`) - Main coordination service
2. **Memory Manager** - Layered memory system with MongoDB/Redis/Weaviate
3. **Agent System** - Phidata-based agents
4. **API Layer** - FastAPI endpoints

### Memory Architecture
```
┌─────────────────┐
│   Short-term    │ → DragonflyDB (Aiven)
├─────────────────┤
│   Mid-term      │ → MongoDB Atlas
├─────────────────┤
│   Long-term     │ → Weaviate Cloud
└─────────────────┘
```

### External Dependencies
- **LLM Providers**: OpenRouter, OpenAI, Anthropic (via Portkey)
- **Memory Storage**: MongoDB Atlas, DragonflyDB, Weaviate
- **Deployment**: DigitalOcean Droplets

### Development Stack
- Python 3.10
- FastAPI
- Phidata (agent framework)
- Docker Compose (local dev)
- Pulumi (infrastructure as code)
"""

        with open(arch_context, "w") as f:
            f.write(arch_content)
        print("  ✓ Created architecture context")

    def validate_setup(self):
        """Validate the setup is correct."""
        print("\n✅ Validating setup...")

        # Check Python version
        python_version = sys.version_info
        if python_version.major == 3 and python_version.minor >= 10:
            print(
                f"  ✓ Python {python_version.major}.{python_version.minor} is compatible"
            )
        else:
            self.warnings.append(
                f"Python 3.10+ recommended, found {python_version.major}.{python_version.minor}"
            )

        # Check key files exist
        key_files = [
            "core/orchestrator/src/agents/memory/mongodb_manager.py",
            "core/orchestrator/src/config/settings.py",
            "docker-compose.yml",
            ".env",
        ]

        for file in key_files:
            if (self.root_dir / file).exists():
                print(f"  ✓ {file} exists")
            else:
                self.errors.append(f"{file} not found")

        # Check for GCP remnants
        print("\n  Checking for GCP remnants...")
        gcp_check = subprocess.run(
            [
                "grep",
                "-r",
                "google-cloud",
                "--include=*.txt",
                str(self.root_dir / "requirements"),
            ],
            capture_output=True,
            text=True,
        )

        if gcp_check.returncode == 0 and gcp_check.stdout:
            self.warnings.append("Found Google Cloud references in requirements")
        else:
            print("  ✓ No GCP dependencies in requirements")

    def print_summary(self):
        """Print setup summary."""
        print("\n" + "=" * 50)
        print("📊 SETUP SUMMARY")
        print("=" * 50)

        if not self.errors and not self.warnings:
            print("\n✅ Setup completed successfully!")
            print("\n🚀 Next steps:")
            print("1. Configure missing environment variables in .env")
            print("2. Run tests: python scripts/test_new_setup.py")
            print("3. Start locally: docker-compose up")
            print("4. Deploy: cd infra/digitalocean_deployment && pulumi up")
        else:
            if self.errors:
                print("\n❌ Errors:")
                for error in self.errors:
                    print(f"  - {error}")

            if self.warnings:
                print("\n⚠️  Warnings:")
                for warning in self.warnings:
                    print(f"  - {warning}")

            print("\n📋 Please fix the issues above before proceeding.")


if __name__ == "__main__":
    setup = OrchestraSetup()
    setup.run()
