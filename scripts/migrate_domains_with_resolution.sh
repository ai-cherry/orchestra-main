#!/bin/bash
# Domain Migration Script with Dependency Resolution
# Generated by Domain Infrastructure conductor

set -e

echo "🚀 Starting Domain Migration with Dependency Resolution"
echo "=================================================="

# Phase 1: Create domain directories
echo -e "\n📁 Creating domain directory structure..."
mkdir -p domains/{Personal,PayReady,ParagonRX}/{services,models,api,config,interfaces}
mkdir -p shared/interfaces
mkdir -p shared/utilities

# Phase 2: Create domain interfaces to resolve dependencies
echo -e "\n🔗 Creating domain interfaces..."
cp shared/interfaces/domain_contracts.py domains/Personal/interfaces/
cp shared/interfaces/domain_contracts.py domains/PayReady/interfaces/
cp shared/interfaces/domain_contracts.py domains/ParagonRX/interfaces/

# Phase 3: Refactor cross-domain dependencies
echo -e "\n🔧 Refactoring cross-domain dependencies..."

# Extract shared agent logic
cat > shared/utilities/agent_base.py << 'EOF'
"""Base agent functionality shared across domains"""
from abc import ABC, abstractmethod

class BaseAgent(ABC):
    @abstractmethod
    async def process(self, input_data):
        pass
EOF

# Phase 4: Move domain-specific files
echo -e "\n📦 Moving domain-specific files..."

# Personal domain files
echo "  Moving Personal domain files..."
# Move only if files exist
[ -f "agent/app/services/specialized_agents.py" ] && mv agent/app/services/specialized_agents.py domains/Personal/services/
[ -f "ai_components/coordination/ai_conductor.py" ] && mv ai_components/coordination/ai_conductor.py domains/Personal/services/
[ -f "core/conductor/src/services/conversation_service.py" ] && mv core/conductor/src/services/conversation_service.py domains/Personal/services/

# PayReady domain files
echo "  Moving PayReady domain files..."
[ -d "services/pay_ready" ] && mv services/pay_ready/* domains/PayReady/services/ 2>/dev/null || true
[ -f "workflows/pay_ready_etl_flow.py" ] && mv workflows/pay_ready_etl_flow.py domains/PayReady/services/

# ParagonRX domain files
echo "  Moving ParagonRX domain files..."
[ -f "core/health_monitor.py" ] && mv core/health_monitor.py domains/ParagonRX/services/
[ -f "agent/app/services/system_health.py" ] && mv agent/app/services/system_health.py domains/ParagonRX/services/

# Phase 5: Update imports
echo -e "\n🔄 Updating import statements..."

# Create import updater script
cat > /tmp/update_imports.py << 'EOF'
import os
import re
from pathlib import Path

def update_imports(file_path):
    """Update imports to use new domain structure"""
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Update import patterns
    replacements = [
        (r'from services\.pay_ready', 'from domains.PayReady.services'),
        (r'from agent\.app\.services', 'from domains.Personal.services'),
        (r'from core\.health_monitor', 'from domains.ParagonRX.services.health_monitor'),
        (r'import services\.pay_ready', 'import domains.PayReady.services'),
    ]
    
    for pattern, replacement in replacements:
        content = re.sub(pattern, replacement, content)
    
    with open(file_path, 'w') as f:
        f.write(content)

# Update all Python files
for root, dirs, files in os.walk('domains'):
    for file in files:
        if file.endswith('.py'):
            file_path = Path(root) / file
            update_imports(file_path)
            print(f"Updated imports in: {file_path}")
EOF

python3 /tmp/update_imports.py

# Phase 6: Create domain-specific configurations
echo -e "\n⚙️ Creating domain-specific configurations..."

# Personal domain config
cat > domains/Personal/config/domain_config.yaml << EOF
domain: Personal
persona: Cherry
database:
  schema: personal_domain
weaviate:
  cluster: personal-cherry-cluster
  collections:
    - personal_memories
    - personal_knowledge
api:
  base_path: /api/personal
  rate_limit: 100
EOF

# PayReady domain config
cat > domains/PayReady/config/domain_config.yaml << EOF
domain: PayReady
persona: Sophia
database:
  schema: payready_domain
weaviate:
  cluster: payready-sophia-cluster
  collections:
    - payready_memories
    - payready_knowledge
api:
  base_path: /api/payready
  rate_limit: 50
EOF

# ParagonRX domain config
cat > domains/ParagonRX/config/domain_config.yaml << EOF
domain: ParagonRX
persona: Karen
database:
  schema: paragonrx_domain
weaviate:
  cluster: paragonrx-karen-cluster
  collections:
    - paragonrx_memories
    - paragonrx_knowledge
api:
  base_path: /api/paragonrx
  rate_limit: 200
EOF

# Phase 7: Validate migration
echo -e "\n✅ Validating migration..."

# Check domain directories
for domain in Personal PayReady ParagonRX; do
    if [ -d "domains/$domain" ]; then
        echo "  ✅ $domain domain directory created"
        file_count=$(find domains/$domain -name "*.py" | wc -l)
        echo "     Files: $file_count Python files"
    else
        echo "  ❌ $domain domain directory missing"
    fi
done

echo -e "\n🎉 Domain migration complete!"
echo "Next steps:"
echo "  1. Run: python3 scripts/domain_setup/provision_weaviate_clusters.py"
echo "  2. Run: python3 scripts/domain_setup/configure_airbyte_pipelines.py"
echo "  3. Deploy with: pulumi up -C infrastructure"
